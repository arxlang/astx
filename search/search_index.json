{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ASTx Library: A Versatile Toolkit for Language Representation","text":"<p>ASTx is a groundbreaking library designed to encapsulate language components in an agnostic and pythonic way. It provides a comprehensive set of classes and functionalities, allowing developers to articulate the core elements of any programming language.</p> <ul> <li>License: BSD 3 Clause</li> <li>Documentation: https://astx.arxlang.org</li> </ul>"},{"location":"#core-features","title":"Core Features","text":""},{"location":"#1-expressive-language-components","title":"1. Expressive Language Components","text":"<p>ASTx offers a rich suite of classes to describe essential language constructs such as:</p> <ul> <li><code>If</code> statements</li> <li><code>For</code> loops</li> <li><code>Function</code> declarations and usages</li> <li>Variables</li> <li>Data Types</li> <li>Operations</li> <li>And more</li> </ul> <p>These classes enable a concise and clear representation, providing an intuitive way to model various programming constructs.</p>"},{"location":"#2-symbol-table-class","title":"2. Symbol Table Class","text":"<p>An integral part of ASTx, the Symbol Table class facilitates the translation of ASTx expressions to other languages like LLVM-IR. This class acts as a mapping layer, allowing a seamless connection between ASTx expressions and target language representations.</p>"},{"location":"#3-language-agnostic-design","title":"3. Language Agnostic Design","text":"<p>Uniquely tailored to be independent of specific programming languages, ASTx offers a flexible foundation. It strives to provide initial components that can describe any programming language, giving users the freedom to work with multiple languages effortlessly.</p>"},{"location":"#4-integration-with-projects-like-arx-ir","title":"4. Integration with Projects like ARX-IR","text":"<p>ASTx has proven to be a vital tool in projects like ARX-IR, where it's leveraged to translate Abstract Syntax Trees (AST) into LLVM-IR. This showcases the library's adaptability and potential to serve as a foundational layer in various applications.</p>"},{"location":"#why-choose-astx","title":"Why Choose ASTx?","text":"<p>ASTx is not just a library; it's a robust framework that fosters creativity and efficiency in language processing. Its pythonic design, combined with the power to handle different language constructs, positions ASTx as an invaluable resource for developers and researchers alike.</p> <p>Whether you're building a compiler, working on language translation, or exploring new frontiers in programming language design, ASTx offers a reliable and extensible toolkit to support your endeavors.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>You can explore the ASTx library and dive into its capabilities by accessing the official documentation. For those interested in contributing or seeking further insights, the ASTx community provides extensive support and collaboration opportunities.</p> <p>Unlock the potential of language representation with ASTx, and join us in shaping the future of programming languages.</p>"},{"location":"changelog/","title":"Release Notes","text":""},{"location":"changelog/#0180-2025-02-26","title":"0.18.0 (2025-02-26)","text":""},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Fix the Python transpiler and check python transpiler results with builtin ast in the tests (#171) (d75c4e8)</li> </ul>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>add <code>EnumDeclStmt</code> class (#161) (64fe0af)</li> <li>add <code>StructDeclStmt</code> and <code>StructDefStmt</code> classes (#162) (e696faa)</li> <li>Add shortcut for type instances (#170) (9d39a82)</li> <li>add support for goto statement via <code>GotoStmt</code> class (#182) (5930018)</li> <li>Add support for ParenthesizedExpr and Boolean Operators (#187) (165004a)</li> <li>base: add support for Identifier class (#174) (8b8e6d0)</li> <li>create <code>AssignmentExpr</code> class (#178) (5cfee00)</li> <li>create <code>CatchHandlerStmt</code> and <code>ExceptionHandlerStmt</code> (#180) (964088c)</li> <li>Create <code>FinallyHandlerStmt</code> class (#181) (a6a206d)</li> <li>create <code>SubscriptExpr</code> class (#165) (35deeb0)</li> <li>create <code>SwitchStmt</code> and <code>CaseStmt</code> classes (#167) (7733e53)</li> <li>create <code>ThrowStmt</code> class (#179) (092de0e)</li> <li>create <code>YieldExpr</code> class (#176) (280ea46)</li> <li>Improve the experience with boolean operators (#188) (bbfc4ea)</li> <li>walrus: Add support for Walrus operator; fix issues in operators, test_operators, init, and python files  (#166) (77a7c6f)</li> </ul>"},{"location":"changelog/#0170-2024-12-24","title":"0.17.0 (2024-12-24)","text":""},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Fix warnings from ReprStruct/Undefined (#155) (bc48b00)</li> </ul>"},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>add ClassDeclStmt and ClassDefStmt (#153) (76739a9)</li> <li>Improve the ASTNodes type as a generic type (#156) (dc9e0ae)</li> </ul>"},{"location":"changelog/#0161-2024-11-29","title":"0.16.1 (2024-11-29)","text":""},{"location":"changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>refactoring: Split datatype module into types and literals packages (#152) (90e828f)</li> </ul>"},{"location":"changelog/#0160-2024-11-27","title":"0.16.0 (2024-11-27)","text":""},{"location":"changelog/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>Add missing typechecked (#126) (031de47)</li> <li>change args type in FunctionCall class (#140) (89feb55)</li> <li>Improve the usage of typechecked (#127) (97fb87c)</li> </ul>"},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li><code>ImportExpr</code> and <code>ImportFromExpr</code> (#122) (7785ba7)</li> <li>add <code>IfExpr</code> class (#143) (4301e2a)</li> <li>add ForCountLoopExpr class (#141) (0bdebdd)</li> <li>Add Python Transpiler (#115) (225f398)</li> <li>Add support for char and string (#125) (7b8f52d)</li> <li>Add support for complex32 and complex64 (#124) (d9df755)</li> <li>Add support for date, time, datetime, timestamp (#146) (e5ffb9b)</li> <li>Add support for ForRangeLoopExpr (#133) (5fb1805)</li> <li>Add support for LambdaExpr (#123) (3ec145f)</li> <li>Add support for WhileExpr class (#142) (e94ca1a)</li> <li>Add support to <code>Import</code>, and <code>ImportFrom</code> statement and <code>Alias</code> expression  (#118) (617f506)</li> <li>add TypeCastExpr class (#130) (3a18439)</li> <li>Implement runtime type checking with typeguard (#119) (b03014e)</li> <li>transpiler: Add support for bool operators (#137) (18a0e2f)</li> </ul>"},{"location":"changelog/#0150-2024-09-14","title":"0.15.0 (2024-09-14)","text":""},{"location":"changelog/#features_3","title":"Features","text":"<ul> <li>Add Support for Float Datatypes (float16, float32, float64) (#86) (2e48959)</li> </ul>"},{"location":"changelog/#0140-2024-09-09","title":"0.14.0 (2024-09-09)","text":""},{"location":"changelog/#features_4","title":"Features","text":"<ul> <li>Add support for int128 (#76) (9dfe465)</li> <li>Add support for Unsigned Integers datatypes uint8, uint16, unit32, uint64, uint 128 (#81) (5a72f95)</li> </ul>"},{"location":"changelog/#0132-2024-07-26","title":"0.13.2 (2024-07-26)","text":""},{"location":"changelog/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>Fix FOR-LOOPs AST structure output (#72) (8cbb104)</li> </ul>"},{"location":"changelog/#0131-2024-07-26","title":"0.13.1 (2024-07-26)","text":""},{"location":"changelog/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>Fix graphviz diagram (#68) (97fb871)</li> <li>Fix IF and FUNCTION-CALL AST struct representation (#71) (87fffbe)</li> </ul>"},{"location":"changelog/#0130-2024-06-03","title":"0.13.0 (2024-06-03)","text":""},{"location":"changelog/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>set ReprStruct as ast data type in funcs (#66) (5ac2e73)</li> </ul>"},{"location":"changelog/#features_5","title":"Features","text":"<ul> <li>add ascii repr in the console (#52) (71a9039)</li> <li>Improve FunctionCall and add support for While AST statement (#65) (c4adea5)</li> </ul>"},{"location":"changelog/#0123-2024-05-02","title":"0.12.3 (2024-05-02)","text":""},{"location":"changelog/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>Test coverage for more than 95% of the code and fix general issues (#64) (13d5d3c)</li> </ul>"},{"location":"changelog/#0122-2024-05-02","title":"0.12.2 (2024-05-02)","text":""},{"location":"changelog/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>Support subscripting to get nodes by index (#63) (102bf75)</li> </ul>"},{"location":"changelog/#0121-2024-05-02","title":"0.12.1 (2024-05-02)","text":""},{"location":"changelog/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>Fix the usage of Function Arguments (#62) (6c78b66)</li> </ul>"},{"location":"changelog/#0120-2024-04-28","title":"0.12.0 (2024-04-28)","text":""},{"location":"changelog/#features_6","title":"Features","text":"<ul> <li>Add initial support for context (parent node) (#61) (f1200a7)</li> </ul>"},{"location":"changelog/#0110-2024-04-21","title":"0.11.0 (2024-04-21)","text":""},{"location":"changelog/#features_7","title":"Features","text":"<ul> <li>Add AST for Program, Package, and Target (#58) (87865a8)</li> </ul>"},{"location":"changelog/#0100-2024-04-19","title":"0.10.0 (2024-04-19)","text":""},{"location":"changelog/#bug-fixes_10","title":"Bug Fixes","text":"<ul> <li>Fix get_struct for variables (#59) (7f4ec89)</li> </ul>"},{"location":"changelog/#features_8","title":"Features","text":"<ul> <li>Add structure for the output from asciinet approach (#55) (f66beb5)</li> </ul>"},{"location":"changelog/#091-2024-03-23","title":"0.9.1 (2024-03-23)","text":""},{"location":"changelog/#bug-fixes_11","title":"Bug Fixes","text":"<ul> <li>docs: Fix contributing guide and getting started tutorial (#53) (e51d83f)</li> </ul>"},{"location":"changelog/#090-2024-03-06","title":"0.9.0 (2024-03-06)","text":""},{"location":"changelog/#features_9","title":"Features","text":"<ul> <li>create LiteralBoolean class (#51) (5b84b04)</li> <li>Improve DataTypeOp and add Tutorial about For Loops (#29) (195c57b)</li> <li>Improve Function classes and add a tutorial about that (#27) (f8608d5)</li> <li>Improve Variables classes (#26) (d981f88)</li> </ul>"},{"location":"changelog/#080-2024-01-08","title":"0.8.0 (2024-01-08)","text":""},{"location":"changelog/#features_10","title":"Features","text":"<ul> <li>Add new data types for LiteralInt8, LiteralInt16, LiteralIn64 (#24) (40230ec)</li> </ul>"},{"location":"changelog/#071-2023-12-05","title":"0.7.1 (2023-12-05)","text":""},{"location":"changelog/#bug-fixes_12","title":"Bug Fixes","text":"<ul> <li>Fix typing issues (#19) (9cb53c4)</li> </ul>"},{"location":"changelog/#070-2023-12-05","title":"0.7.0 (2023-12-05)","text":""},{"location":"changelog/#features_11","title":"Features","text":"<ul> <li>Add ref attribute to the Expr class (#18) (60b9b0e)</li> </ul>"},{"location":"changelog/#060-2023-09-07","title":"0.6.0 (2023-09-07)","text":""},{"location":"changelog/#features_12","title":"Features","text":"<ul> <li>Add options for the graph visualization objects shape (#16) (93f6ebd)</li> </ul>"},{"location":"changelog/#051-2023-09-07","title":"0.5.1 (2023-09-07)","text":""},{"location":"changelog/#bug-fixes_13","title":"Bug Fixes","text":"<ul> <li>Fix docs generation (#15) (e1bfb4e)</li> </ul>"},{"location":"changelog/#050-2023-09-06","title":"0.5.0 (2023-09-06)","text":""},{"location":"changelog/#features_13","title":"Features","text":"<ul> <li>Add initial support for jupyter display with graphviz (#14) (35a8c98)</li> </ul>"},{"location":"changelog/#040-2023-09-05","title":"0.4.0 (2023-09-05)","text":""},{"location":"changelog/#features_14","title":"Features","text":"<ul> <li>Represent the ASTx in <code>yaml</code> and <code>json</code> formats (#13) (26d22af)</li> </ul>"},{"location":"changelog/#033-2023-08-30","title":"0.3.3 (2023-08-30)","text":""},{"location":"changelog/#bug-fixes_14","title":"Bug Fixes","text":"<ul> <li>config: Fix configuration and improve documentation (#12) (fbb8898)</li> </ul>"},{"location":"changelog/#032-2023-08-22","title":"0.3.2 (2023-08-22)","text":""},{"location":"changelog/#bug-fixes_15","title":"Bug Fixes","text":"<ul> <li>Fix logo in the documentation and fix configuration files style. (#11) (8552e08)</li> </ul>"},{"location":"changelog/#031-2023-08-22","title":"0.3.1 (2023-08-22)","text":""},{"location":"changelog/#bug-fixes_16","title":"Bug Fixes","text":"<ul> <li>fix documentation release workflow (#10) (6cfb9a6)</li> </ul>"},{"location":"changelog/#030-2023-08-22","title":"0.3.0 (2023-08-22)","text":""},{"location":"changelog/#bug-fixes_17","title":"Bug Fixes","text":"<ul> <li>Fix the current linter configuration and the dependencies' pinning (#9) (d310511)</li> </ul>"},{"location":"changelog/#features_15","title":"Features","text":"<ul> <li>Add support for ForRangeLoop and ForCountLoop (#7) (bb77de1)</li> </ul>"},{"location":"changelog/#021-2023-08-07","title":"0.2.1 (2023-08-07)","text":""},{"location":"changelog/#bug-fixes_18","title":"Bug Fixes","text":"<ul> <li>Refactor Control flow classes and improve Documentation (#6) (4013398)</li> </ul>"},{"location":"changelog/#020-2023-08-07","title":"0.2.0 (2023-08-07)","text":""},{"location":"changelog/#bug-fixes_19","title":"Bug Fixes","text":"<ul> <li>Fix release configuration (#5) (13cd6e1)</li> </ul>"},{"location":"changelog/#features_16","title":"Features","text":"<ul> <li>Overload DataType operators (#4) (3b93128)</li> </ul>"},{"location":"contributing/","title":"Contributing Guideline","text":"<p>In order to be able to contribute, it is important that you understand the project layout. This project uses the src layout, which means that the package code is located at <code>./src/astx</code>.</p> <p>For my information, check the official documentation: https://packaging.python.org/en/latest/discussions/src-layout-vs-flat-layout/</p> <p>In addition, you should know that to build our package we use Poetry, it's a Python package management tool that simplifies the process of building and publishing Python packages. It allows us to easily manage dependencies, virtual environments and package versions. Poetry also includes features such as dependency resolution, lock files and publishing to PyPI. Overall, Poetry streamlines the process of managing Python packages, making it easier for us to create and share our code with others.</p> <p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/arxlang/astx/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>ASTx could always use more documentation, whether as part of the official ASTx docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/arxlang/astx/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are   welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here\u2019s how to set up <code>astx</code> for local development.</p> <ol> <li>Fork the <code>astx</code> repo on GitHub.</li> <li>Clone your fork locally:</li> </ol> <pre><code>$ git clone git@github.com:your_name_here/astx.git\n$ cd astx/\n</code></pre> <ol> <li>Create a new virtual environment and install your local copy into that:</li> </ol> <pre><code># note: you can use mamba or conda or micromamba\n$ mamba env create --file conda/dev.yaml\n$ conda activate astx\n$ poetry install\n</code></pre> <ol> <li>Create a branch for local development:</li> </ol> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n# Now you can make your changes locally.\n</code></pre> <ol> <li>When you\u2019re done making changes, check that your changes pass the linter and     the tests:</li> </ol> <pre><code>$ makim tests.linter\n$ makim tests.unit\n</code></pre> <ol> <li>Commit your changes and push your branch to GitHub:</li> </ol> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> <ol> <li>Submit a pull request through the GitHub website.</li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated. Put your     new functionality into a function with a docstring, and add the feature to     the list in README.rst.</li> <li>The pull request should work for Python &gt;= 3.8.</li> </ol>"},{"location":"contributing/#tips","title":"Tips","text":"<p>To run a subset of tests, you can use something like:</p> <pre><code>$ pytest tests.test_arxast\n</code></pre> <p>or</p> <pre><code>$ makim tests.unit --path \"tests/test_arxast\" --params \"-k mytest_func\"\n</code></pre>"},{"location":"contributing/#release","title":"Release","text":"<p>This project uses semantic-release in order to cut a new release based on the commit-message.</p>"},{"location":"contributing/#commit-message-format","title":"Commit message format","text":"<p>semantic-release uses the commit messages to determine the consumer impact of changes in the codebase. Following formalized conventions for commit messages, semantic-release automatically determines the next semantic version number, generates a changelog and publishes the release.</p> <p>By default, semantic-release uses Angular Commit Message Conventions. The commit message format can be changed with the <code>preset</code> or <code>config</code> options_ of the @semantic-release/commit-analyzer and @semantic-release/release-notes-generator plugins.</p> <p>Tools such as commitizen or commitlint can be used to help contributors and enforce valid commit messages.</p> <p>The table below shows which commit message gets you which release type when <code>semantic-release</code> runs (using the default configuration):</p> Commit message Release type <code>fix(pencil): stop graphite breaking when pressure is applied</code> Fix Release <code>feat(pencil): add 'graphiteWidth' option</code> Feature Release <code>perf(pencil): remove graphiteWidth option</code> Chore <code>feat(pencil)!: The graphiteWidth option has been removed</code> Breaking Release <p>NOTE: Breaking change's commit message prefix should have <code>!</code> before <code>:</code>. Also, ensure to specify <code>feat</code> or <code>fix</code> in the prefix.</p> <p>References:</p> <ul> <li>https://github.com/semantic-release/semantic-release/blob/master/README.md#commit-message-format</li> <li>https://www.conventionalcommits.org/en/v1.0.0/</li> </ul> <p>This project uses the <code>squash and merge</code> strategy, so ensure to apply the commit message format to the PR's title.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install ASTx, run this command in your terminal:</p> <pre><code>$ pip install astx\n</code></pre> <p>This is the preferred method to install ASTx, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>The sources for ASTx can be downloaded from the Github repo.</p> <p>You can either clone the public repository:</p> <pre><code>$ git clone https://github.com/arxlang/astx\n</code></pre> <p>Or download the tarball:</p> <pre><code>$ curl -OJL https://github.com/arxlang/astx/tarball/main\n</code></pre> <p>Once you have a copy of the source, you can install it with:</p> <pre><code>$ poetry install\n</code></pre>"},{"location":"api/","title":"Index","text":""},{"location":"api/#astx","title":"astx","text":"<p>ASTx.</p> <p>Modules:</p> <ul> <li> <code>base</code>           \u2013            <p>AST classes and functions.</p> </li> <li> <code>blocks</code>           \u2013            <p>Module for different kind of ASTx blocks.</p> </li> <li> <code>callables</code>           \u2013            <p>Module for callable ASTx.</p> </li> <li> <code>classes</code>           \u2013            <p>Module for classes definitions/declarations.</p> </li> <li> <code>exceptions</code>           \u2013            <p>Module for Exceptions.</p> </li> <li> <code>flows</code>           \u2013            <p>Module for controle flow AST.</p> </li> <li> <code>literals</code>           \u2013            <p>AST nodes for literals.</p> </li> <li> <code>mixes</code>           \u2013            <p>Module for mixing ASTx types from different modules.</p> </li> <li> <code>modifiers</code>           \u2013            <p>Modifications for ASTx, such as visibility, scope, etc.</p> </li> <li> <code>operators</code>           \u2013            <p>ASTx classes for the operators.</p> </li> <li> <code>packages</code>           \u2013            <p>Define ASTx for more broader scope.</p> </li> <li> <code>subscript</code>           \u2013            <p>Module for subscripts definitions/declarations.</p> </li> <li> <code>symbol_table</code>           \u2013            <p>Symbol Table module for ASTx.</p> </li> <li> <code>tools</code>           \u2013            <p>Package for astx helper tools.</p> </li> <li> <code>types</code>           \u2013            <p>Collection of ASTx nodes used for types.</p> </li> <li> <code>variables</code>           \u2013            <p>Module for Variables.</p> </li> <li> <code>viz</code>           \u2013            <p>AST graphic representation Module.</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>AST</code>           \u2013            <p>AST main expression class.</p> </li> <li> <code>ASTKind</code>           \u2013            <p>The expression kind class used for downcasting.</p> </li> <li> <code>ASTNodes</code>           \u2013            <p>AST with a list of nodes, supporting type-specific elements.</p> </li> <li> <code>AliasExpr</code>           \u2013            <p>Represents an alias in an import statement.</p> </li> <li> <code>AndOp</code>           \u2013            <p>AST class for logical AND operation.</p> </li> <li> <code>Argument</code>           \u2013            <p>AST class for argument definition.</p> </li> <li> <code>Arguments</code>           \u2013            <p>AST class for argument definition.</p> </li> <li> <code>AssignmentExpr</code>           \u2013            <p>AST class for assignment expressions.</p> </li> <li> <code>BinaryOp</code>           \u2013            <p>AST class for the binary operator.</p> </li> <li> <code>Block</code>           \u2013            <p>The AST tree.</p> </li> <li> <code>BoolBinaryOp</code>           \u2013            <p>Base AST class for boolean binary operations.</p> </li> <li> <code>BoolUnaryOp</code>           \u2013            <p>Base AST class for boolean unary operations.</p> </li> <li> <code>Boolean</code>           \u2013            <p>Boolean data type expression.</p> </li> <li> <code>CaseStmt</code>           \u2013            <p>AST class for a case in a Switch statement.</p> </li> <li> <code>CatchHandlerStmt</code>           \u2013            <p>AST class for catch statements.</p> </li> <li> <code>ClassDeclStmt</code>           \u2013            <p>AST class for class declaration.</p> </li> <li> <code>ClassDefStmt</code>           \u2013            <p>AST class for class definition, including attributes and methods.</p> </li> <li> <code>Complex</code>           \u2013            <p>Base class for complex numbers.</p> </li> <li> <code>Complex32</code>           \u2013            <p>Complex32 data type class.</p> </li> <li> <code>Complex64</code>           \u2013            <p>Complex64 data type class.</p> </li> <li> <code>DataType</code>           \u2013            <p>AST main expression class.</p> </li> <li> <code>DataTypeOps</code>           \u2013            <p>Overload some magic functions used for the main operations.</p> </li> <li> <code>Date</code>           \u2013            <p>Date data type expression.</p> </li> <li> <code>DateTime</code>           \u2013            <p>DateTime data type expression.</p> </li> <li> <code>EnumDeclStmt</code>           \u2013            <p>AST class for enum declaration.</p> </li> <li> <code>ExceptionHandlerStmt</code>           \u2013            <p>AST class for try statements.</p> </li> <li> <code>Expr</code>           \u2013            <p>AST main expression class.</p> </li> <li> <code>ExprType</code>           \u2013            <p>ExprType expression class.</p> </li> <li> <code>FinallyHandlerStmt</code>           \u2013            <p>AST class for finally statements.</p> </li> <li> <code>Float16</code>           \u2013            <p>Float16 data type expression.</p> </li> <li> <code>Float32</code>           \u2013            <p>Float32 data type expression.</p> </li> <li> <code>Float64</code>           \u2013            <p>Float64 data type expression.</p> </li> <li> <code>Floating</code>           \u2013            <p>AST for the literal float number.</p> </li> <li> <code>ForCountLoopExpr</code>           \u2013            <p>AST class for a simple Count-Controlled <code>For</code> Loop expression.</p> </li> <li> <code>ForCountLoopStmt</code>           \u2013            <p>AST class for a simple Count-Controlled <code>For</code> Loop statement.</p> </li> <li> <code>ForRangeLoopExpr</code>           \u2013            <p>AST class for <code>For</code> Range Expression.</p> </li> <li> <code>ForRangeLoopStmt</code>           \u2013            <p>AST class for <code>For</code> Range Statement.</p> </li> <li> <code>Function</code>           \u2013            <p>AST class for function definition.</p> </li> <li> <code>FunctionCall</code>           \u2013            <p>AST class for function call.</p> </li> <li> <code>FunctionPrototype</code>           \u2013            <p>AST class for function prototype declaration.</p> </li> <li> <code>FunctionReturn</code>           \u2013            <p>AST class for function <code>return</code> statement.</p> </li> <li> <code>GotoStmt</code>           \u2013            <p>AST class for function <code>Goto</code> statement.</p> </li> <li> <code>Identifier</code>           \u2013            <p>AST class for identifiers.</p> </li> <li> <code>IfExpr</code>           \u2013            <p>AST class for <code>if</code> expression.</p> </li> <li> <code>IfStmt</code>           \u2013            <p>AST class for <code>if</code> statement.</p> </li> <li> <code>ImportExpr</code>           \u2013            <p>Represents an import operation as an expression.</p> </li> <li> <code>ImportFromExpr</code>           \u2013            <p>Represents a 'from ... import ...' operation as an expression.</p> </li> <li> <code>ImportFromStmt</code>           \u2013            <p>Represents an import-from statement.</p> </li> <li> <code>ImportStmt</code>           \u2013            <p>Represents an import statement.</p> </li> <li> <code>InlineVariableDeclaration</code>           \u2013            <p>AST class for inline variable declaration expression.</p> </li> <li> <code>Int16</code>           \u2013            <p>Int16 data type expression.</p> </li> <li> <code>Int32</code>           \u2013            <p>Int32 data type expression.</p> </li> <li> <code>Int64</code>           \u2013            <p>Int64 data type expression.</p> </li> <li> <code>Int8</code>           \u2013            <p>Int8 data type expression.</p> </li> <li> <code>Integer</code>           \u2013            <p>Integer number data type expression.</p> </li> <li> <code>LambdaExpr</code>           \u2013            <p>AST class for lambda expressions.</p> </li> <li> <code>Literal</code>           \u2013            <p>Literal Data type.</p> </li> <li> <code>LiteralBoolean</code>           \u2013            <p>LiteralBoolean data type class.</p> </li> <li> <code>LiteralComplex</code>           \u2013            <p>Base class for literal complex numbers.</p> </li> <li> <code>LiteralComplex32</code>           \u2013            <p>LiteralComplex32 data type class.</p> </li> <li> <code>LiteralComplex64</code>           \u2013            <p>LiteralComplex64 data type class.</p> </li> <li> <code>LiteralDate</code>           \u2013            <p>LiteralDate data type class.</p> </li> <li> <code>LiteralDateTime</code>           \u2013            <p>LiteralDateTime data type class.</p> </li> <li> <code>LiteralFloat16</code>           \u2013            <p>LiteralFloat16 data type class.</p> </li> <li> <code>LiteralFloat32</code>           \u2013            <p>LiteralFloat32 data type class.</p> </li> <li> <code>LiteralFloat64</code>           \u2013            <p>LiteralFloat64 data type class.</p> </li> <li> <code>LiteralInt128</code>           \u2013            <p>LiteralInt128 data type class.</p> </li> <li> <code>LiteralInt16</code>           \u2013            <p>LiteralInt16 data type class.</p> </li> <li> <code>LiteralInt32</code>           \u2013            <p>LiteralInt32 data type class.</p> </li> <li> <code>LiteralInt64</code>           \u2013            <p>LiteralInt64 data type class.</p> </li> <li> <code>LiteralInt8</code>           \u2013            <p>LiteralInt8 data type class.</p> </li> <li> <code>LiteralNone</code>           \u2013            <p>LiteralNone data type.</p> </li> <li> <code>LiteralString</code>           \u2013            <p>LiteralString data type class.</p> </li> <li> <code>LiteralTime</code>           \u2013            <p>LiteralTime data type class.</p> </li> <li> <code>LiteralTimestamp</code>           \u2013            <p>LiteralTimestamp data type class.</p> </li> <li> <code>LiteralUInt128</code>           \u2013            <p>LiteralUInt128 data type class.</p> </li> <li> <code>LiteralUInt16</code>           \u2013            <p>LiteralUInt16 data type class.</p> </li> <li> <code>LiteralUInt32</code>           \u2013            <p>LiteralUInt32 data type class.</p> </li> <li> <code>LiteralUInt64</code>           \u2013            <p>LiteralUInt64 data type class.</p> </li> <li> <code>LiteralUInt8</code>           \u2013            <p>LiteralUInt8 data type class.</p> </li> <li> <code>LiteralUTF8Char</code>           \u2013            <p>Literal class for UTF-8 characters.</p> </li> <li> <code>LiteralUTF8String</code>           \u2013            <p>Literal class for UTF-8 strings.</p> </li> <li> <code>Module</code>           \u2013            <p>AST main expression class.</p> </li> <li> <code>MutabilityKind</code>           \u2013            <p>Definition for different kind of mutability.</p> </li> <li> <code>NandOp</code>           \u2013            <p>AST class for logical NAND operation.</p> </li> <li> <code>NorOp</code>           \u2013            <p>AST class for logical NOR operation.</p> </li> <li> <code>Number</code>           \u2013            <p>Number data type expression.</p> </li> <li> <code>OperatorType</code>           \u2013            <p>AST main expression class.</p> </li> <li> <code>OrOp</code>           \u2013            <p>AST class for logical OR operation.</p> </li> <li> <code>Package</code>           \u2013            <p>AST class for Package.</p> </li> <li> <code>ParenthesizedExpr</code>           \u2013            <p>AST class for explicitly grouped expressions (parentheses retained).</p> </li> <li> <code>Program</code>           \u2013            <p>AST class for Program.</p> </li> <li> <code>ScopeKind</code>           \u2013            <p>Definition for different kind of scopes.</p> </li> <li> <code>SignedInteger</code>           \u2013            <p>Signed integer number data type expression.</p> </li> <li> <code>StatementType</code>           \u2013            <p>AST main expression class.</p> </li> <li> <code>String</code>           \u2013            <p>Base class for strings.</p> </li> <li> <code>StructDeclStmt</code>           \u2013            <p>AST class for struct declaration.</p> </li> <li> <code>StructDefStmt</code>           \u2013            <p>AST class for struct definition.</p> </li> <li> <code>SubscriptExpr</code>           \u2013            <p>AST class for subscript expressions.</p> </li> <li> <code>SwitchStmt</code>           \u2013            <p>AST class for Switch statements based on Rust's match syntax.</p> </li> <li> <code>Target</code>           \u2013            <p>Define the Architecture target for the program.</p> </li> <li> <code>ThrowStmt</code>           \u2013            <p>AST class for throw statements.</p> </li> <li> <code>Time</code>           \u2013            <p>Time data type expression.</p> </li> <li> <code>Timestamp</code>           \u2013            <p>Timestamp data type expression.</p> </li> <li> <code>TypeCastExpr</code>           \u2013            <p>AST class for type casting expressions.</p> </li> <li> <code>UInt128</code>           \u2013            <p>UInt128 data type expression.</p> </li> <li> <code>UInt16</code>           \u2013            <p>UInt16 data type expression.</p> </li> <li> <code>UInt32</code>           \u2013            <p>UInt32 data type expression.</p> </li> <li> <code>UInt64</code>           \u2013            <p>UInt64 data type expression.</p> </li> <li> <code>UInt8</code>           \u2013            <p>UInt8 data type expression.</p> </li> <li> <code>UTF8Char</code>           \u2013            <p>Class for UTF-8 encoded characters.</p> </li> <li> <code>UTF8String</code>           \u2013            <p>Class for UTF-8 encoded strings.</p> </li> <li> <code>UnaryOp</code>           \u2013            <p>AST class for the unary operator.</p> </li> <li> <code>Undefined</code>           \u2013            <p>Undefined expression class.</p> </li> <li> <code>UnsignedInteger</code>           \u2013            <p>Unsigned integer number data type expression.</p> </li> <li> <code>Variable</code>           \u2013            <p>AST class for the variable usage.</p> </li> <li> <code>VariableAssignment</code>           \u2013            <p>AST class for variable declaration.</p> </li> <li> <code>VariableDeclaration</code>           \u2013            <p>AST class for variable declaration.</p> </li> <li> <code>VisibilityKind</code>           \u2013            <p>Definition of different kind of visibility.</p> </li> <li> <code>WalrusOp</code>           \u2013            <p>AST class for the Walrus (assignment expression) operator.</p> </li> <li> <code>WhileExpr</code>           \u2013            <p>AST class for <code>while</code> expression.</p> </li> <li> <code>WhileStmt</code>           \u2013            <p>AST class for <code>while</code> statement.</p> </li> <li> <code>XnorOp</code>           \u2013            <p>AST class for logical XNOR operation.</p> </li> <li> <code>XorOp</code>           \u2013            <p>AST class for logical XOR operation.</p> </li> <li> <code>YieldExpr</code>           \u2013            <p>AST class for YieldExpr.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>get_version</code>             \u2013              <p>Return the program version.</p> </li> </ul>"},{"location":"api/#astx.AST","title":"AST","text":"<pre><code>AST(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>AST main expression class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a structure that represents the node object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the AST instance.\"\"\"\n    self.kind = ASTKind.GenericKind\n    self.loc = loc\n    self.ref = \"\"\n    self.comment = \"\"\n    self.parent = parent\n    self._update_parent()\n</code></pre>"},{"location":"api/#astx.AST.get_struct","title":"get_struct  <code>abstractmethod</code>","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a structure that represents the node object.</p> Source code in <code>src/astx/base.py</code> <pre><code>@abstractmethod\ndef get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a structure that represents the node object.\"\"\"\n</code></pre>"},{"location":"api/#astx.AST.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.AST.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.ASTKind","title":"ASTKind","text":"<p>               Bases: <code>Enum</code></p> <p>The expression kind class used for downcasting.</p>"},{"location":"api/#astx.ASTNodes","title":"ASTNodes","text":"<pre><code>ASTNodes(name: str = 'entry', loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Generic[ASTType]</code>, <code>AST</code></p> <p>AST with a list of nodes, supporting type-specific elements.</p> <p>Methods:</p> <ul> <li> <code>append</code>             \u2013              <p>Append a new node to the stack.</p> </li> <li> <code>get_struct</code>             \u2013              <p>Return a string that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    name: str = \"entry\",\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the AST instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.name = name\n    self.nodes: list[ASTType] = []\n    self.position: int = 0\n</code></pre>"},{"location":"api/#astx.ASTNodes.append","title":"append","text":"<pre><code>append(value: ASTType) -&gt; None\n</code></pre> <p>Append a new node to the stack.</p> Source code in <code>src/astx/base.py</code> <pre><code>def append(self, value: ASTType) -&gt; None:\n    \"\"\"Append a new node to the stack.\"\"\"\n    self.nodes.append(value)\n</code></pre>"},{"location":"api/#astx.ASTNodes.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a string that represents the object.\"\"\"\n    args_nodes = []\n\n    for node in self.nodes:\n        args_nodes.append(node.get_struct(simplified))\n\n    key = str(self)\n    value = cast(ReprStruct, args_nodes)\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.ASTNodes.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.ASTNodes.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.AliasExpr","title":"AliasExpr","text":"<pre><code>AliasExpr(name: str, asname: str = '', loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Expr</code></p> <p>Represents an alias in an import statement.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the alias.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/packages.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    asname: str = \"\",\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc=loc, parent=parent)\n    self.name = name\n    self.asname = asname\n    self.kind = ASTKind.AliasExprKind\n</code></pre>"},{"location":"api/#astx.AliasExpr.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the alias.</p> Source code in <code>src/astx/packages.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the alias.\"\"\"\n    str_asname = f\", {self.asname}\" if self.asname else \"\"\n    str_name_asname = f\"[{self.name}{str_asname}]\"\n    key = f\"Alias {str_name_asname}\"\n    value = \"\"\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.AliasExpr.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.AliasExpr.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.AndOp","title":"AndOp","text":"<pre><code>AndOp(lhs: DataType, rhs: DataType, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>BoolBinaryOp</code></p> <p>AST class for logical AND operation.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/types/operators.py</code> <pre><code>def __init__(\n    self,\n    lhs: DataType,\n    rhs: DataType,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Instantiate AST class for logical AND operation.\"\"\"\n    super().__init__(\n        op_code=self.op_code,\n        lhs=lhs,\n        rhs=rhs,\n        loc=loc,\n        parent=parent,\n    )\n</code></pre>"},{"location":"api/#astx.AndOp.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure that represents the object.</p> Source code in <code>src/astx/types/operators.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure that represents the object.\"\"\"\n    key = f\"BOOL_BINARY_OP[{self.__class__.__name__}]\"\n    value: ReprStruct = {\n        \"lhs\": self.lhs.get_struct(simplified),\n        \"rhs\": self.rhs.get_struct(simplified),\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.AndOp.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.AndOp.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.Argument","title":"Argument","text":"<pre><code>Argument(name: str, type_: DataType, mutability: MutabilityKind = constant, default: Expr = UNDEFINED, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Variable</code></p> <p>AST class for argument definition.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/callables.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    type_: DataType,\n    mutability: MutabilityKind = MutabilityKind.constant,\n    default: Expr = UNDEFINED,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the VarExprAST instance.\"\"\"\n    super().__init__(name=name, loc=loc, parent=parent)\n    self.mutability = mutability\n    self.type_ = type_\n    self.default = default\n    self.kind = ASTKind.ArgumentKind\n</code></pre>"},{"location":"api/#astx.Argument.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/callables.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    key = f\"Argument[{self.name}, {self.type_}] = {self.default}\"\n    value = self.default.get_struct()\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.Argument.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.Argument.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.Arguments","title":"Arguments","text":"<pre><code>Arguments(*args: Argument, **kwargs: Any)\n</code></pre> <p>               Bases: <code>ASTNodes[Argument]</code></p> <p>AST class for argument definition.</p> <p>Methods:</p> <ul> <li> <code>append</code>             \u2013              <p>Append a new node to the stack.</p> </li> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/callables.py</code> <pre><code>def __init__(self, *args: Argument, **kwargs: Any) -&gt; None:\n    super().__init__(**kwargs)\n    for arg in args:\n        self.append(arg)\n</code></pre>"},{"location":"api/#astx.Arguments.append","title":"append","text":"<pre><code>append(value: ASTType) -&gt; None\n</code></pre> <p>Append a new node to the stack.</p> Source code in <code>src/astx/base.py</code> <pre><code>def append(self, value: ASTType) -&gt; None:\n    \"\"\"Append a new node to the stack.\"\"\"\n    self.nodes.append(value)\n</code></pre>"},{"location":"api/#astx.Arguments.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/callables.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    args_nodes = []\n\n    for node in self.nodes:\n        args_nodes.append(node.get_struct(simplified))\n\n    key = str(self)\n    value = cast(ReprStruct, args_nodes)\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.Arguments.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.Arguments.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.AssignmentExpr","title":"AssignmentExpr","text":"<pre><code>AssignmentExpr(targets: Iterable[Expr] | ASTNodes[Expr], value: Expr, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Expr</code></p> <p>AST class for assignment expressions.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/operators.py</code> <pre><code>def __init__(\n    self,\n    targets: Iterable[Expr] | ASTNodes[Expr],\n    value: Expr,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc=loc, parent=parent)\n\n    if isinstance(targets, ASTNodes):\n        self.targets = targets\n    else:\n        self.targets = ASTNodes()\n        for target in targets:\n            self.targets.append(target)\n\n    self.value = value\n    self.kind = ASTKind.AssignmentExprKind\n</code></pre>"},{"location":"api/#astx.AssignmentExpr.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/operators.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    key = \"ASSIGNMENT-EXPR\"\n    targets_dict = {\"targets\": self.targets.get_struct(simplified)}\n    value_dict = {\"value\": self.value.get_struct(simplified)}\n\n    value = {\n        **cast(DictDataTypesStruct, targets_dict),\n        **cast(DictDataTypesStruct, value_dict),\n    }\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.AssignmentExpr.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.AssignmentExpr.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.BinaryOp","title":"BinaryOp","text":"<pre><code>BinaryOp(op_code: str, lhs: DataType, rhs: DataType, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>DataTypeOps</code></p> <p>AST class for the binary operator.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/types/operators.py</code> <pre><code>def __init__(\n    self,\n    op_code: str,\n    lhs: DataType,\n    rhs: DataType,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the BinaryOp instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n\n    self.op_code = op_code\n    self.lhs = lhs\n    self.rhs = rhs\n    self.kind = ASTKind.BinaryOpKind\n\n    if not (\n        isinstance(lhs.type_, DataType) and isinstance(rhs.type_, DataType)\n    ):\n        raise Exception(\n            \"For now, binary operators are just allowed for `DataType`.\"\n            f\"LHS: {lhs.type_}, RHS: {rhs.type_}\"\n        )\n\n    if lhs.type_ == rhs.type_:\n        self.type_ = lhs.type_\n    else:\n        # type inference\n        self.type_ = max([lhs.type_, rhs.type_], key=lambda v: v.nbytes)\n</code></pre>"},{"location":"api/#astx.BinaryOp.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure that represents the object.</p> Source code in <code>src/astx/types/operators.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure that represents the object.\"\"\"\n    key = f\"BINARY[{self.op_code}]\"\n    lhs = {\"lhs\": self.lhs.get_struct(simplified)}\n    rhs = {\"rhs\": self.rhs.get_struct(simplified)}\n\n    content: ReprStruct = {**lhs, **rhs}\n    return self._prepare_struct(key, content, simplified)\n</code></pre>"},{"location":"api/#astx.BinaryOp.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.BinaryOp.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.Block","title":"Block","text":"<pre><code>Block(name: str = 'entry', loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>ASTNodes[ASTType]</code></p> <p>The AST tree.</p> <p>Methods:</p> <ul> <li> <code>append</code>             \u2013              <p>Append a new node to the stack.</p> </li> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    name: str = \"entry\",\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the AST instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.name = name\n    self.nodes: list[ASTType] = []\n    self.position: int = 0\n</code></pre>"},{"location":"api/#astx.Block.append","title":"append","text":"<pre><code>append(value: ASTType) -&gt; None\n</code></pre> <p>Append a new node to the stack.</p> Source code in <code>src/astx/base.py</code> <pre><code>def append(self, value: ASTType) -&gt; None:\n    \"\"\"Append a new node to the stack.\"\"\"\n    self.nodes.append(value)\n</code></pre>"},{"location":"api/#astx.Block.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/blocks.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    block_nodes = []\n\n    for node in self.nodes:\n        block_nodes.append(node.get_struct(simplified))\n\n    key = f\"BLOCK[{self.name}]\"\n    value = cast(ReprStruct, block_nodes)\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.Block.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.Block.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.BoolBinaryOp","title":"BoolBinaryOp","text":"<pre><code>BoolBinaryOp(op_code: str, lhs: DataType, rhs: DataType, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>BinaryOp</code></p> <p>Base AST class for boolean binary operations.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/types/operators.py</code> <pre><code>def __init__(\n    self,\n    op_code: str,\n    lhs: DataType,\n    rhs: DataType,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(\n        op_code=op_code,\n        lhs=lhs,\n        rhs=rhs,\n        loc=loc,\n        parent=parent,\n    )\n</code></pre>"},{"location":"api/#astx.BoolBinaryOp.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure that represents the object.</p> Source code in <code>src/astx/types/operators.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure that represents the object.\"\"\"\n    key = f\"BOOL_BINARY_OP[{self.__class__.__name__}]\"\n    value: ReprStruct = {\n        \"lhs\": self.lhs.get_struct(simplified),\n        \"rhs\": self.rhs.get_struct(simplified),\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.BoolBinaryOp.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.BoolBinaryOp.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.BoolUnaryOp","title":"BoolUnaryOp","text":"<pre><code>BoolUnaryOp(op_code: str, operand: DataType, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>UnaryOp</code></p> <p>Base AST class for boolean unary operations.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/types/operators.py</code> <pre><code>def __init__(\n    self,\n    op_code: str,\n    operand: DataType,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(\n        op_code=op_code,\n        operand=operand,\n        loc=loc,\n        parent=parent,\n    )\n</code></pre>"},{"location":"api/#astx.BoolUnaryOp.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure that represents the object.</p> Source code in <code>src/astx/types/operators.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure that represents the object.\"\"\"\n    key = f\"BOOL_UNARY_OP[{self.__class__.__name__}]\"\n    value: ReprStruct = {\"operand\": self.operand.get_struct(simplified)}\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.BoolUnaryOp.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.BoolUnaryOp.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.Boolean","title":"Boolean","text":"<pre><code>Boolean(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>AnyType</code></p> <p>Boolean data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/#astx.Boolean.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.Boolean.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.Boolean.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.CaseStmt","title":"CaseStmt","text":"<pre><code>CaseStmt(body: Block, condition: Optional[Expr] = None, default: bool = False, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>StatementType</code></p> <p>AST class for a case in a Switch statement.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/flows.py</code> <pre><code>def __init__(\n    self,\n    body: Block,\n    condition: Optional[Expr] = None,\n    default: bool = False,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the CaseStmt instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.condition = condition\n    self.body = body\n    self.default = default\n    self.kind = ASTKind.CaseStmtKind\n\n    if self.default is False and self.condition is None:\n        raise ValueError(\n            \"Condition must be provided for non-default branches.\"\n        )\n\n    if self.default is True and self.condition is not None:\n        raise ValueError(\n            \"Condition must NOT be provided for default branches.\"\n        )\n</code></pre>"},{"location":"api/#astx.CaseStmt.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/flows.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    default_case = \"default\" if self.condition is None else \"\"\n    default_only = \"[default]\" if self.condition is None else \"\"\n    id_str = f\"{id(self)}\" if simplified else \"\"\n\n    key = (\n        f\"CASE-STMT[{id_str}{default_case}]\"\n        if simplified and self.condition is not None\n        else f\"CASE-STMT[{id_str}, {default_case}]\"\n        if simplified\n        else f\"CASE-STMT{default_only}\"\n    )\n\n    condition_dict = (\n        {}\n        if self.condition is None\n        else {\"condition\": self.condition.get_struct(simplified)}\n    )\n    value = {\n        **cast(DictDataTypesStruct, condition_dict),\n        \"body\": self.body.get_struct(simplified),\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.CaseStmt.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.CaseStmt.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.CatchHandlerStmt","title":"CatchHandlerStmt","text":"<pre><code>CatchHandlerStmt(body: Block[AST], name: Optional[Identifier] = None, types: Optional[Iterable[Identifier] | ASTNodes[Identifier]] = None, parent: Optional[ASTNodes] = None, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>StatementType</code></p> <p>AST class for catch statements.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/exceptions.py</code> <pre><code>def __init__(\n    self,\n    body: Block[AST],\n    name: Optional[Identifier] = None,\n    types: Optional[Iterable[Identifier] | ASTNodes[Identifier]] = None,\n    parent: Optional[ASTNodes] = None,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n) -&gt; None:\n    \"\"\"Initialize the instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.body = body\n    self.name = name\n\n    if types:\n        if isinstance(types, ASTNodes):\n            self.types = types\n        else:\n            self.types = ASTNodes[Identifier]()\n            for t in types:\n                self.types.append(t)\n    else:\n        self.types = None\n\n    self.kind = ASTKind.CatchHandlerStmtKind\n</code></pre>"},{"location":"api/#astx.CatchHandlerStmt.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/exceptions.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    key = \"CATCH-HANDLER-STMT\"\n    body_dict = {\"body\": self.body.get_struct(simplified)}\n    name_dict = (\n        {\"name\": self.name.get_struct(simplified)} if self.name else {}\n    )\n    types_dict = (\n        {\"types\": self.types.get_struct(simplified)} if self.types else {}\n    )\n\n    value: DictDataTypesStruct = {\n        **cast(DictDataTypesStruct, body_dict),\n        **cast(DictDataTypesStruct, name_dict),\n        **cast(DictDataTypesStruct, types_dict),\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.CatchHandlerStmt.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.CatchHandlerStmt.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.ClassDeclStmt","title":"ClassDeclStmt","text":"<pre><code>ClassDeclStmt(name: str, bases: Iterable[Expr] | ASTNodes[Expr] = [], decorators: Iterable[Expr] | ASTNodes[Expr] = [], visibility: VisibilityKind = public, is_abstract: bool = False, metaclass: Optional[Expr] = None, attributes: Iterable[VariableDeclaration] | ASTNodes[VariableDeclaration] = [], methods: Iterable[Function] | ASTNodes[Function] = [], loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>StatementType</code></p> <p>AST class for class declaration.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/classes.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    bases: Iterable[Expr] | ASTNodes[Expr] = [],\n    decorators: Iterable[Expr] | ASTNodes[Expr] = [],\n    visibility: VisibilityKind = VisibilityKind.public,\n    is_abstract: bool = False,\n    metaclass: Optional[Expr] = None,\n    attributes: Iterable[VariableDeclaration]\n    | ASTNodes[VariableDeclaration] = [],\n    methods: Iterable[Function] | ASTNodes[Function] = [],\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize ClassDeclStmt instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.name = name\n\n    if isinstance(bases, ASTNodes):\n        self.bases = bases\n    else:\n        self.bases = ASTNodes()\n        for base in bases:\n            self.bases.append(base)\n\n    if isinstance(decorators, ASTNodes):\n        self.decorators = decorators\n    else:\n        self.decorators = ASTNodes[Expr]()\n        for decorator in decorators:\n            self.decorators.append(decorator)\n\n    if isinstance(attributes, ASTNodes):\n        self.attributes = attributes\n    else:\n        self.attributes = ASTNodes[VariableDeclaration]()\n        for a in attributes:\n            self.attributes.append(a)\n\n    if isinstance(methods, ASTNodes):\n        self.methods = methods\n    else:\n        self.methods = ASTNodes[Function]()\n        for m in methods:\n            self.methods.append(m)\n\n    self.visibility = visibility\n    self.is_abstract = is_abstract\n    self.metaclass = metaclass\n    self.kind = ASTKind.ClassDeclStmtKind\n</code></pre>"},{"location":"api/#astx.ClassDeclStmt.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/classes.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    vis = dict(zip((\"public\", \"private\", \"protected\"), (\"+\", \"-\", \"#\")))\n    abstract = \", abstract\" if self.is_abstract else \"\"\n\n    key = f\"CLASS-DECL[{vis[self.visibility.name]}{self.name}{abstract}]\"\n    value = self._get_struct_wrapper(simplified)\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.ClassDeclStmt.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.ClassDeclStmt.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.ClassDefStmt","title":"ClassDefStmt","text":"<pre><code>ClassDefStmt(name: str, bases: Iterable[Expr] | ASTNodes[Expr] = [], decorators: Iterable[Expr] | ASTNodes[Expr] = [], body: Block = CLASS_BODY_DEFAULT, visibility: VisibilityKind = public, is_abstract: bool = False, metaclass: Optional[Expr] = None, attributes: Iterable[VariableDeclaration] | ASTNodes[VariableDeclaration] = [], methods: Iterable[Function] | ASTNodes[Function] = [], loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>ClassDeclStmt</code></p> <p>AST class for class definition, including attributes and methods.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/classes.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    bases: Iterable[Expr] | ASTNodes[Expr] = [],\n    decorators: Iterable[Expr] | ASTNodes[Expr] = [],\n    body: Block = CLASS_BODY_DEFAULT,\n    visibility: VisibilityKind = VisibilityKind.public,\n    is_abstract: bool = False,\n    metaclass: Optional[Expr] = None,\n    attributes: Iterable[VariableDeclaration]\n    | ASTNodes[VariableDeclaration] = [],\n    methods: Iterable[Function] | ASTNodes[Function] = [],\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize ClassDefStmt instance.\"\"\"\n    super().__init__(\n        name=name,\n        bases=bases,\n        decorators=decorators,\n        visibility=visibility,\n        is_abstract=is_abstract,\n        metaclass=metaclass,\n        attributes=attributes,\n        methods=methods,\n        loc=loc,\n        parent=parent,\n    )\n\n    if body != CLASS_BODY_DEFAULT:\n        self.body = body\n    else:\n        self.body = copy.deepcopy(body)\n        self.body.name = f\"{name}_body\"\n    self.kind = ASTKind.ClassDefStmtKind\n</code></pre>"},{"location":"api/#astx.ClassDefStmt.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/classes.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    vis = dict(zip((\"public\", \"private\", \"protected\"), (\"+\", \"-\", \"#\")))\n    abstract = \", abstract\" if self.is_abstract else \"\"\n\n    key = f\"CLASS-DEF[{vis[self.visibility.name]}{self.name}{abstract}]\"\n    value = self._get_struct_wrapper(simplified)\n\n    if self.body != CLASS_BODY_DEFAULT:\n        value[\"body\"] = self.body.get_struct(simplified)\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.ClassDefStmt.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.ClassDefStmt.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.Complex","title":"Complex","text":"<pre><code>Complex(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Number</code></p> <p>Base class for complex numbers.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/#astx.Complex.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.Complex.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.Complex.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.Complex32","title":"Complex32","text":"<pre><code>Complex32(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Complex</code></p> <p>Complex32 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/#astx.Complex32.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.Complex32.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.Complex32.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.Complex64","title":"Complex64","text":"<pre><code>Complex64(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Complex</code></p> <p>Complex64 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/#astx.Complex64.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.Complex64.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.Complex64.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.DataType","title":"DataType","text":"<pre><code>DataType(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>ExprType</code></p> <p>AST main expression class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/#astx.DataType.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.DataType.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.DataType.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.DataTypeOps","title":"DataTypeOps","text":"<pre><code>DataTypeOps(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>DataType</code></p> <p>Overload some magic functions used for the main operations.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/#astx.DataTypeOps.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.DataTypeOps.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.DataTypeOps.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.Date","title":"Date","text":"<pre><code>Date(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Temporal</code></p> <p>Date data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/#astx.Date.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.Date.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.Date.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.DateTime","title":"DateTime","text":"<pre><code>DateTime(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Temporal</code></p> <p>DateTime data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/#astx.DateTime.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.DateTime.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.DateTime.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.EnumDeclStmt","title":"EnumDeclStmt","text":"<pre><code>EnumDeclStmt(name: str, attributes: Iterable[VariableDeclaration] | ASTNodes[VariableDeclaration] = [], visibility: VisibilityKind = public, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>StatementType</code></p> <p>AST class for enum declaration.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/classes.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    attributes: Iterable[VariableDeclaration]\n    | ASTNodes[VariableDeclaration] = [],\n    visibility: VisibilityKind = VisibilityKind.public,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize EnumDeclStmt instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.name = name\n\n    if isinstance(attributes, ASTNodes):\n        self.attributes = attributes\n    else:\n        self.attributes = ASTNodes[VariableDeclaration]()\n        for a in attributes:\n            self.attributes.append(a)\n\n    self.visibility = visibility\n    self.kind = ASTKind.EnumDeclStmtKind\n</code></pre>"},{"location":"api/#astx.EnumDeclStmt.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/classes.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    vis = dict(zip((\"public\", \"private\", \"protected\"), (\"+\", \"-\", \"#\")))\n    key = f\"ENUM-DECL[{vis[self.visibility.name]}{self.name}]\"\n\n    attrs_dict: ReprStruct = {}\n    if self.attributes:\n        attrs_dict = {\"attributes\": self.attributes.get_struct(simplified)}\n\n    value = {\n        **cast(DictDataTypesStruct, attrs_dict),\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.EnumDeclStmt.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.EnumDeclStmt.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.ExceptionHandlerStmt","title":"ExceptionHandlerStmt","text":"<pre><code>ExceptionHandlerStmt(body: Block[AST], handlers: Iterable[CatchHandlerStmt] | ASTNodes[CatchHandlerStmt], finally_handler: Optional[FinallyHandlerStmt] = None, parent: Optional[ASTNodes] = None, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>StatementType</code></p> <p>AST class for try statements.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/exceptions.py</code> <pre><code>def __init__(\n    self,\n    body: Block[AST],\n    handlers: Iterable[CatchHandlerStmt] | ASTNodes[CatchHandlerStmt],\n    finally_handler: Optional[FinallyHandlerStmt] = None,\n    parent: Optional[ASTNodes] = None,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n) -&gt; None:\n    \"\"\"Initialize the instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.body = body\n\n    if isinstance(handlers, ASTNodes):\n        self.handlers = handlers\n    else:\n        self.handlers = ASTNodes[CatchHandlerStmt]()\n        for h in handlers:\n            self.handlers.append(h)\n\n    self.finally_handler = finally_handler\n\n    self.kind = ASTKind.ExceptionHandlerStmtKind\n</code></pre>"},{"location":"api/#astx.ExceptionHandlerStmt.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/exceptions.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    key = \"EXCEPTION-HANDLER-STMT\"\n\n    body_dict = {\"body\": self.body.get_struct(simplified)}\n    handlers_dict = {\"handlers\": self.handlers.get_struct(simplified)}\n    finally_dict = (\n        {\"finally_handler\": self.finally_handler.get_struct(simplified)}\n        if self.finally_handler\n        else {}\n    )\n\n    value: DictDataTypesStruct = {\n        **cast(DictDataTypesStruct, body_dict),\n        **cast(DictDataTypesStruct, handlers_dict),\n        **cast(DictDataTypesStruct, finally_dict),\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.ExceptionHandlerStmt.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.ExceptionHandlerStmt.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.Expr","title":"Expr","text":"<pre><code>Expr(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>AST</code></p> <p>AST main expression class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a structure that represents the node object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the AST instance.\"\"\"\n    self.kind = ASTKind.GenericKind\n    self.loc = loc\n    self.ref = \"\"\n    self.comment = \"\"\n    self.parent = parent\n    self._update_parent()\n</code></pre>"},{"location":"api/#astx.Expr.get_struct","title":"get_struct  <code>abstractmethod</code>","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a structure that represents the node object.</p> Source code in <code>src/astx/base.py</code> <pre><code>@abstractmethod\ndef get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a structure that represents the node object.\"\"\"\n</code></pre>"},{"location":"api/#astx.Expr.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.Expr.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.ExprType","title":"ExprType","text":"<pre><code>ExprType(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Expr</code></p> <p>ExprType expression class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a structure that represents the node object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the AST instance.\"\"\"\n    self.kind = ASTKind.GenericKind\n    self.loc = loc\n    self.ref = \"\"\n    self.comment = \"\"\n    self.parent = parent\n    self._update_parent()\n</code></pre>"},{"location":"api/#astx.ExprType.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a structure that represents the node object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a structure that represents the node object.\"\"\"\n    return {\"Type\": self.__class__.__name__}\n</code></pre>"},{"location":"api/#astx.ExprType.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.ExprType.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.FinallyHandlerStmt","title":"FinallyHandlerStmt","text":"<pre><code>FinallyHandlerStmt(body: Block[AST], parent: Optional[ASTNodes] = None, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>StatementType</code></p> <p>AST class for finally statements.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/exceptions.py</code> <pre><code>def __init__(\n    self,\n    body: Block[AST],\n    parent: Optional[ASTNodes] = None,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n) -&gt; None:\n    \"\"\"Initialize the instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.body = body\n    self.kind = ASTKind.FinallyHandlerStmtKind\n</code></pre>"},{"location":"api/#astx.FinallyHandlerStmt.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/exceptions.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    key = \"FINALLY-STMT\"\n    value: DictDataTypesStruct = {\"body\": self.body.get_struct(simplified)}\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.FinallyHandlerStmt.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.FinallyHandlerStmt.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.Float16","title":"Float16","text":"<pre><code>Float16(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Floating</code></p> <p>Float16 data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/#astx.Float16.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.Float16.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.Float16.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.Float32","title":"Float32","text":"<pre><code>Float32(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Floating</code></p> <p>Float32 data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/#astx.Float32.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.Float32.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.Float32.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.Float64","title":"Float64","text":"<pre><code>Float64(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Floating</code></p> <p>Float64 data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/#astx.Float64.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.Float64.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.Float64.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.Floating","title":"Floating","text":"<pre><code>Floating(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Number</code></p> <p>AST for the literal float number.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/#astx.Floating.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.Floating.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.Floating.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.ForCountLoopExpr","title":"ForCountLoopExpr","text":"<pre><code>ForCountLoopExpr(initializer: InlineVariableDeclaration, condition: Expr, update: Expr, body: Block, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Expr</code></p> <p>AST class for a simple Count-Controlled <code>For</code> Loop expression.</p> <p>This is a very basic <code>for</code> loop, used by languages like C or C++.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/flows.py</code> <pre><code>def __init__(\n    self,\n    initializer: InlineVariableDeclaration,\n    condition: Expr,\n    update: Expr,\n    body: Block,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the ForLoopCountExpr instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.initializer = initializer\n    self.condition = condition\n    self.update = update\n    self.body = body\n    self.kind = ASTKind.ForCountLoopExprKind\n</code></pre>"},{"location":"api/#astx.ForCountLoopExpr.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/flows.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    for_init = {\"initialization\": self.initializer.get_struct(simplified)}\n    for_cond = {\"condition\": self.condition.get_struct(simplified)}\n    for_update = {\"update\": self.update.get_struct(simplified)}\n    for_body = self.body.get_struct(simplified)\n\n    key = \"FOR-COUNT-EXPR\"\n    value: ReprStruct = {\n        **cast(DictDataTypesStruct, for_init),\n        **cast(DictDataTypesStruct, for_cond),\n        **cast(DictDataTypesStruct, for_update),\n        **cast(DictDataTypesStruct, for_body),\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.ForCountLoopExpr.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.ForCountLoopExpr.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.ForCountLoopStmt","title":"ForCountLoopStmt","text":"<pre><code>ForCountLoopStmt(initializer: InlineVariableDeclaration, condition: Expr, update: Expr, body: Block, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>StatementType</code></p> <p>AST class for a simple Count-Controlled <code>For</code> Loop statement.</p> <p>This is a very basic <code>for</code> loop, used by languages like C or C++.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/flows.py</code> <pre><code>def __init__(\n    self,\n    initializer: InlineVariableDeclaration,\n    condition: Expr,\n    update: Expr,\n    body: Block,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the ForCountLoopStmt instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.initializer = initializer\n    self.condition = condition\n    self.update = update\n    self.body = body\n    self.kind = ASTKind.ForCountLoopStmtKind\n</code></pre>"},{"location":"api/#astx.ForCountLoopStmt.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/flows.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    for_init = {\"initialization\": self.initializer.get_struct(simplified)}\n    for_cond = {\"condition\": self.condition.get_struct(simplified)}\n    for_update = {\"update\": self.update.get_struct(simplified)}\n    for_body = self.body.get_struct(simplified)\n\n    key = \"FOR-COUNT-STMT\"\n    value: ReprStruct = {\n        **cast(DictDataTypesStruct, for_init),\n        **cast(DictDataTypesStruct, for_cond),\n        **cast(DictDataTypesStruct, for_update),\n        **cast(DictDataTypesStruct, for_body),\n    }\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.ForCountLoopStmt.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.ForCountLoopStmt.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.ForRangeLoopExpr","title":"ForRangeLoopExpr","text":"<pre><code>ForRangeLoopExpr(variable: InlineVariableDeclaration, start: Expr, end: Expr, step: Expr, body: Block, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Expr</code></p> <p>AST class for <code>For</code> Range Expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/flows.py</code> <pre><code>def __init__(\n    self,\n    variable: InlineVariableDeclaration,\n    start: Expr,\n    end: Expr,\n    step: Expr,\n    body: Block,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the ForRangeLoopExpr instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.variable = variable\n    self.start = start\n    self.end = end\n    self.step = step\n    self.body = body\n    self.kind = ASTKind.ForRangeLoopExprKind\n</code></pre>"},{"location":"api/#astx.ForRangeLoopExpr.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/flows.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    for_var = {\"var\": self.variable.get_struct(simplified)}\n    for_start = {\"start\": self.start.get_struct(simplified)}\n    for_end = {\"end\": self.end.get_struct(simplified)}\n    for_step = {\"step\": self.step.get_struct(simplified)}\n    for_body = self.body.get_struct(simplified)\n\n    key = \"FOR-RANGE-LOOP-EXPR\"\n    value: ReprStruct = {\n        **cast(DictDataTypesStruct, for_var),\n        **cast(DictDataTypesStruct, for_start),\n        **cast(DictDataTypesStruct, for_end),\n        **cast(DictDataTypesStruct, for_step),\n        **cast(DictDataTypesStruct, for_body),\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.ForRangeLoopExpr.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.ForRangeLoopExpr.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.ForRangeLoopStmt","title":"ForRangeLoopStmt","text":"<pre><code>ForRangeLoopStmt(variable: InlineVariableDeclaration, start: Expr, end: Expr, step: Expr, body: Block, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>StatementType</code></p> <p>AST class for <code>For</code> Range Statement.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/flows.py</code> <pre><code>def __init__(\n    self,\n    variable: InlineVariableDeclaration,\n    start: Expr,\n    end: Expr,\n    step: Expr,\n    body: Block,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the ForRangeLoopStmt instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.variable = variable\n    self.start = start\n    self.end = end\n    self.step = step\n    self.body = body\n    self.kind = ASTKind.ForRangeLoopStmtKind\n</code></pre>"},{"location":"api/#astx.ForRangeLoopStmt.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/flows.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    for_start = {\"start\": self.start.get_struct(simplified)}\n    for_end = {\"end\": self.end.get_struct(simplified)}\n    for_step = {\"step\": self.step.get_struct(simplified)}\n    for_body = self.body.get_struct(simplified)\n\n    key = \"FOR-RANGE-LOOP-STMT\"\n    value: ReprStruct = {\n        **cast(DictDataTypesStruct, for_start),\n        **cast(DictDataTypesStruct, for_end),\n        **cast(DictDataTypesStruct, for_step),\n        **cast(DictDataTypesStruct, for_body),\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.ForRangeLoopStmt.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.ForRangeLoopStmt.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.Function","title":"Function","text":"<pre><code>Function(prototype: FunctionPrototype, body: Block, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>StatementType</code></p> <p>AST class for function definition.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Get the AST structure that represent the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Return the function prototype name.</p> </li> </ul> Source code in <code>src/astx/callables.py</code> <pre><code>def __init__(\n    self,\n    prototype: FunctionPrototype,\n    body: Block,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the Function instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.prototype = prototype\n    self.body = body\n    self.kind = ASTKind.FunctionKind\n</code></pre>"},{"location":"api/#astx.Function.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Return the function prototype name.</p>"},{"location":"api/#astx.Function.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Get the AST structure that represent the object.</p> Source code in <code>src/astx/callables.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Get the AST structure that represent the object.\"\"\"\n    fn_args = self.prototype.args.get_struct(simplified)\n    fn_body = self.body.get_struct(simplified)\n\n    key = f\"FUNCTION[{self.prototype.name}]\"\n    args_struct = {\"args\": fn_args}\n    body_struct = {\"body\": fn_body}\n\n    value: ReprStruct = {**args_struct, **body_struct}\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.Function.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.Function.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.FunctionCall","title":"FunctionCall","text":"<pre><code>FunctionCall(fn: Function, args: Iterable[DataType], type_: DataType = AnyType(), loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>DataType</code></p> <p>AST class for function call.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/callables.py</code> <pre><code>def __init__(\n    self,\n    fn: Function,\n    args: Iterable[DataType],\n    type_: DataType = AnyType(),\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the Call instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.fn = fn\n    self.args = args\n    self.kind = ASTKind.CallKind\n    self.type_ = type_\n</code></pre>"},{"location":"api/#astx.FunctionCall.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/callables.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    call_params = []\n\n    for node in self.args:\n        call_params.append(node.get_struct(simplified))\n\n    key = f\"FUNCTION-CALL[{self.fn.name}]\"\n    value = cast(\n        ReprStruct,\n        {\n            f\"Parameters ({len(call_params)})\": {\n                f\"param({idx})\": param\n                for idx, param in enumerate(call_params)\n            }\n        },\n    )\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.FunctionCall.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.FunctionCall.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.FunctionPrototype","title":"FunctionPrototype","text":"<pre><code>FunctionPrototype(name: str, args: Arguments, return_type: AnyType, scope: ScopeKind = global_, visibility: VisibilityKind = public, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>StatementType</code></p> <p>AST class for function prototype declaration.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Get the AST structure that represent the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/callables.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    args: Arguments,\n    return_type: AnyType,\n    scope: ScopeKind = ScopeKind.global_,\n    visibility: VisibilityKind = VisibilityKind.public,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the FunctionPrototype instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.name = name\n    self.args = args\n    self.return_type = return_type\n    self.loc = loc\n    self.kind = ASTKind.PrototypeKind\n    self.scope = scope\n    self.visibility = visibility\n</code></pre>"},{"location":"api/#astx.FunctionPrototype.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Get the AST structure that represent the object.</p> Source code in <code>src/astx/callables.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Get the AST structure that represent the object.\"\"\"\n    raise Exception(\"Visitor method not necessary\")\n</code></pre>"},{"location":"api/#astx.FunctionPrototype.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.FunctionPrototype.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.FunctionReturn","title":"FunctionReturn","text":"<pre><code>FunctionReturn(value: DataType, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>StatementType</code></p> <p>AST class for function <code>return</code> statement.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/callables.py</code> <pre><code>def __init__(\n    self,\n    value: DataType,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the Return instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.value = value\n    self.kind = ASTKind.ReturnKind\n</code></pre>"},{"location":"api/#astx.FunctionReturn.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/callables.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    key = \"RETURN\"\n    value = self.value.get_struct(simplified)\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.FunctionReturn.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.FunctionReturn.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.GotoStmt","title":"GotoStmt","text":"<pre><code>GotoStmt(label: Identifier, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>StatementType</code></p> <p>AST class for function <code>Goto</code> statement.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/flows.py</code> <pre><code>def __init__(\n    self,\n    label: Identifier,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the Return instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.label = label\n    self.kind = ASTKind.GotoStmtKind\n</code></pre>"},{"location":"api/#astx.GotoStmt.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/flows.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    key = f\"GOTO-STMT[{self.label.value}]\"\n    value: DictDataTypesStruct = {}\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.GotoStmt.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.GotoStmt.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.Identifier","title":"Identifier","text":"<pre><code>Identifier(value: str, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Expr</code></p> <p>AST class for identifiers.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a structure that represents the Identifier object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    value: str,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the Identifier instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.value = value\n</code></pre>"},{"location":"api/#astx.Identifier.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a structure that represents the Identifier object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a structure that represents the Identifier object.\"\"\"\n    key = f\"IDENTIFIER[{self.value}]\"\n    return self._prepare_struct(key, self.value, simplified)\n</code></pre>"},{"location":"api/#astx.Identifier.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.Identifier.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.IfExpr","title":"IfExpr","text":"<pre><code>IfExpr(condition: Expr, then: Block, else_: Optional[Block] = None, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Expr</code></p> <p>AST class for <code>if</code> expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/flows.py</code> <pre><code>def __init__(\n    self,\n    condition: Expr,\n    then: Block,\n    else_: Optional[Block] = None,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the IfExpr instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.loc = loc\n    self.condition = condition\n    self.then = then\n    self.else_ = else_\n    self.kind = ASTKind.IfExprKind\n</code></pre>"},{"location":"api/#astx.IfExpr.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/flows.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    if_condition = {\"condition\": self.condition.get_struct(simplified)}\n    if_then = {\"then-block\": self.then.get_struct(simplified)}\n    if_else: ReprStruct = {}\n\n    if self.else_ is not None:\n        if_else = {\"else-block\": self.else_.get_struct(simplified)}\n\n    key = \"IF-EXPR\"\n    value: ReprStruct = {\n        **cast(DictDataTypesStruct, if_condition),\n        **cast(DictDataTypesStruct, if_then),\n        **cast(DictDataTypesStruct, if_else),\n    }\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.IfExpr.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.IfExpr.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.IfStmt","title":"IfStmt","text":"<pre><code>IfStmt(condition: Expr, then: Block, else_: Optional[Block] = None, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>StatementType</code></p> <p>AST class for <code>if</code> statement.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/flows.py</code> <pre><code>def __init__(\n    self,\n    condition: Expr,\n    then: Block,\n    else_: Optional[Block] = None,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the IfStmt instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.loc = loc\n    self.condition = condition\n    self.then = then\n    self.else_ = else_\n    self.kind = ASTKind.IfStmtKind\n</code></pre>"},{"location":"api/#astx.IfStmt.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/flows.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    if_condition = {\"condition\": self.condition.get_struct(simplified)}\n    if_then = {\"then-block\": self.then.get_struct(simplified)}\n    if_else: ReprStruct = {}\n\n    if self.else_ is not None:\n        if_else = {\"else-block\": self.else_.get_struct(simplified)}\n\n    key = \"IF-STMT\"\n    value: ReprStruct = {\n        **cast(DictDataTypesStruct, if_condition),\n        **cast(DictDataTypesStruct, if_then),\n        **cast(DictDataTypesStruct, if_else),\n    }\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.IfStmt.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.IfStmt.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.ImportExpr","title":"ImportExpr","text":"<pre><code>ImportExpr(names: list[AliasExpr], loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Expr</code></p> <p>Represents an import operation as an expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the import expression.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/packages.py</code> <pre><code>def __init__(\n    self,\n    names: list[AliasExpr],\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc=loc, parent=parent)\n    self.names = names\n    self.kind = ASTKind.ImportExprKind\n</code></pre>"},{"location":"api/#astx.ImportExpr.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the import expression.</p> Source code in <code>src/astx/packages.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the import expression.\"\"\"\n    key = \"ImportExpr\"\n    value = cast(\n        ReprStruct, [name.get_struct(simplified) for name in self.names]\n    )\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.ImportExpr.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.ImportExpr.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.ImportFromExpr","title":"ImportFromExpr","text":"<pre><code>ImportFromExpr(names: list[AliasExpr], module: str = '', level: int = 0, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Expr</code></p> <p>Represents a 'from ... import ...' operation as an expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the import-from expression.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/packages.py</code> <pre><code>def __init__(\n    self,\n    names: list[AliasExpr],\n    module: str = \"\",\n    level: int = 0,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc=loc, parent=parent)\n    self.names = names\n    self.module = module\n    self.level = level\n    self.kind = ASTKind.ImportFromExprKind\n</code></pre>"},{"location":"api/#astx.ImportFromExpr.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the import-from expression.</p> Source code in <code>src/astx/packages.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the import-from expression.\"\"\"\n    level_dots = \".\" * self.level\n    module_str = (\n        f\"{level_dots}{self.module}\" if self.module else level_dots\n    )\n\n    key = f\"ImportFromExpr [{module_str}]\"\n    value = cast(\n        ReprStruct, [name.get_struct(simplified) for name in self.names]\n    )\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.ImportFromExpr.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.ImportFromExpr.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.ImportFromStmt","title":"ImportFromStmt","text":"<pre><code>ImportFromStmt(names: list[AliasExpr], module: str = '', level: int = 0, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>StatementType</code></p> <p>Represents an import-from statement.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the import-from statement.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/packages.py</code> <pre><code>def __init__(\n    self,\n    names: list[AliasExpr],\n    module: str = \"\",\n    level: int = 0,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc=loc, parent=parent)\n    self.module = module\n    self.names = names\n    self.level = level\n    self.kind = ASTKind.ImportFromStmtKind\n</code></pre>"},{"location":"api/#astx.ImportFromStmt.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the import-from statement.</p> Source code in <code>src/astx/packages.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the import-from statement.\"\"\"\n    level_dots = \".\" * self.level\n    module_str = (\n        f\"{level_dots}{self.module}\" if self.module else level_dots\n    )\n\n    key = f\"ImportFromStmt [{module_str}]\"\n    value = cast(\n        ReprStruct, [name.get_struct(simplified) for name in self.names]\n    )\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.ImportFromStmt.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.ImportFromStmt.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.ImportStmt","title":"ImportStmt","text":"<pre><code>ImportStmt(names: list[AliasExpr], loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>StatementType</code></p> <p>Represents an import statement.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the import statement.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/packages.py</code> <pre><code>def __init__(\n    self,\n    names: list[AliasExpr],\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc=loc, parent=parent)\n    self.names = names\n    self.kind = ASTKind.ImportStmtKind\n</code></pre>"},{"location":"api/#astx.ImportStmt.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the import statement.</p> Source code in <code>src/astx/packages.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the import statement.\"\"\"\n    key = \"ImportStmt\"\n    value = cast(\n        ReprStruct, [name.get_struct(simplified) for name in self.names]\n    )\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.ImportStmt.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.ImportStmt.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.InlineVariableDeclaration","title":"InlineVariableDeclaration","text":"<pre><code>InlineVariableDeclaration(name: str, type_: DataType, mutability: MutabilityKind = constant, visibility: VisibilityKind = public, scope: ScopeKind = local, value: Expr = UNDEFINED, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Expr</code></p> <p>AST class for inline variable declaration expression.</p> <p>Can be used in expressions like for loops.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/variables.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    type_: DataType,\n    mutability: MutabilityKind = MutabilityKind.constant,\n    visibility: VisibilityKind = VisibilityKind.public,\n    scope: ScopeKind = ScopeKind.local,\n    value: Expr = UNDEFINED,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the VarExprAST instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.mutability = mutability\n    self.scope = scope\n    self.visibility = visibility\n    self.name = name\n    self.type_ = type_\n    self.value = value\n    self.kind = ASTKind.VarDeclKind\n</code></pre>"},{"location":"api/#astx.InlineVariableDeclaration.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/variables.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    key = str(self)\n    value = self.value.get_struct(simplified)\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.InlineVariableDeclaration.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.InlineVariableDeclaration.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.Int16","title":"Int16","text":"<pre><code>Int16(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>SignedInteger</code></p> <p>Int16 data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/#astx.Int16.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.Int16.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.Int16.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.Int32","title":"Int32","text":"<pre><code>Int32(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>SignedInteger</code></p> <p>Int32 data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/#astx.Int32.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.Int32.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.Int32.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.Int64","title":"Int64","text":"<pre><code>Int64(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>SignedInteger</code></p> <p>Int64 data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/#astx.Int64.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.Int64.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.Int64.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.Int8","title":"Int8","text":"<pre><code>Int8(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>SignedInteger</code></p> <p>Int8 data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/#astx.Int8.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.Int8.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.Int8.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.Integer","title":"Integer","text":"<pre><code>Integer(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>AnyType</code></p> <p>Integer number data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/#astx.Integer.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.Integer.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.Integer.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.LambdaExpr","title":"LambdaExpr","text":"<pre><code>LambdaExpr(body: Expr, params: Arguments = Arguments(), loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Expr</code></p> <p>AST class for lambda expressions.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the lambda expression.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/callables.py</code> <pre><code>def __init__(\n    self,\n    body: Expr,\n    params: Arguments = Arguments(),\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc=loc, parent=parent)\n    self.params = params\n    self.body = body\n    self.kind = ASTKind.LambdaExprKind\n</code></pre>"},{"location":"api/#astx.LambdaExpr.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the lambda expression.</p> Source code in <code>src/astx/callables.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the lambda expression.\"\"\"\n    key = \"LambdaExpr\"\n    value: ReprStruct = {\n        \"params\": self.params.get_struct(simplified),\n        \"body\": self.body.get_struct(simplified),\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.LambdaExpr.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.LambdaExpr.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.Literal","title":"Literal","text":"<pre><code>Literal(*args, **kwargs)\n</code></pre> <p>               Bases: <code>DataTypeOps</code></p> <p>Literal Data type.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/base.py</code> <pre><code>def __init__(self, *args, **kwargs) -&gt; None:  # type: ignore\n    super().__init__(*args, **kwargs)\n    self.ref = uuid4().hex\n</code></pre>"},{"location":"api/#astx.Literal.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.Literal.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.Literal.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.LiteralBoolean","title":"LiteralBoolean","text":"<pre><code>LiteralBoolean(value: bool, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralBoolean data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/boolean.py</code> <pre><code>def __init__(\n    self, value: bool, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralBoolean.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = Boolean()\n    self.loc = loc\n</code></pre>"},{"location":"api/#astx.LiteralBoolean.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.LiteralBoolean.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.LiteralBoolean.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.LiteralComplex","title":"LiteralComplex","text":"<pre><code>LiteralComplex(real: float, imag: float, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>Base class for literal complex numbers.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the complex literal.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self,\n    real: float,\n    imag: float,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n) -&gt; None:\n    \"\"\"Initialize a generic complex number.\"\"\"\n    super().__init__(loc)\n    self.value = real, imag\n</code></pre>"},{"location":"api/#astx.LiteralComplex.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the complex literal.</p> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the complex literal.\"\"\"\n    key = f\"{self.__class__.__name__}: {self.value}\"\n    value: ReprStruct = {\n        \"real\": self.value[0],\n        \"imag\": self.value[1],\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.LiteralComplex.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.LiteralComplex.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.LiteralComplex32","title":"LiteralComplex32","text":"<pre><code>LiteralComplex32(real: float, imag: float, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>LiteralComplex</code></p> <p>LiteralComplex32 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the complex literal.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self,\n    real: float,\n    imag: float,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n) -&gt; None:\n    \"\"\"Initialize LiteralComplex32.\"\"\"\n    super().__init__(real, imag, loc)\n    self.type_ = Complex32()\n</code></pre>"},{"location":"api/#astx.LiteralComplex32.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the complex literal.</p> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the complex literal.\"\"\"\n    key = f\"{self.__class__.__name__}: {self.value}\"\n    value: ReprStruct = {\n        \"real\": self.value[0],\n        \"imag\": self.value[1],\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.LiteralComplex32.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.LiteralComplex32.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.LiteralComplex64","title":"LiteralComplex64","text":"<pre><code>LiteralComplex64(real: float, imag: float, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>LiteralComplex</code></p> <p>LiteralComplex64 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the complex literal.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self,\n    real: float,\n    imag: float,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n) -&gt; None:\n    \"\"\"Initialize LiteralComplex64.\"\"\"\n    super().__init__(real, imag, loc)\n    self.type_ = Complex64()\n</code></pre>"},{"location":"api/#astx.LiteralComplex64.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the complex literal.</p> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the complex literal.\"\"\"\n    key = f\"{self.__class__.__name__}: {self.value}\"\n    value: ReprStruct = {\n        \"real\": self.value[0],\n        \"imag\": self.value[1],\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.LiteralComplex64.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.LiteralComplex64.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.LiteralDate","title":"LiteralDate","text":"<pre><code>LiteralDate(value: str, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralDate data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the structure of the LiteralDate object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/temporal.py</code> <pre><code>def __init__(\n    self, value: str, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralDate.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = Date()\n    self.loc = loc\n</code></pre>"},{"location":"api/#astx.LiteralDate.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the structure of the LiteralDate object.</p> Source code in <code>src/astx/literals/temporal.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the structure of the LiteralDate object.\"\"\"\n    key = f\"LiteralDate: {self.value}\"\n    return self._prepare_struct(key, self.value, simplified)\n</code></pre>"},{"location":"api/#astx.LiteralDate.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.LiteralDate.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.LiteralDateTime","title":"LiteralDateTime","text":"<pre><code>LiteralDateTime(value: str, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralDateTime data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the structure of the LiteralDateTime object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/temporal.py</code> <pre><code>def __init__(\n    self, value: str, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralDateTime.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = DateTime()\n    self.loc = loc\n</code></pre>"},{"location":"api/#astx.LiteralDateTime.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the structure of the LiteralDateTime object.</p> Source code in <code>src/astx/literals/temporal.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the structure of the LiteralDateTime object.\"\"\"\n    key = f\"LiteralDateTime: {self.value}\"\n    return self._prepare_struct(key, self.value, simplified)\n</code></pre>"},{"location":"api/#astx.LiteralDateTime.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.LiteralDateTime.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.LiteralFloat16","title":"LiteralFloat16","text":"<pre><code>LiteralFloat16(value: float, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralFloat16 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self, value: float, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralFloat16.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = Float16()\n    self.loc = loc\n</code></pre>"},{"location":"api/#astx.LiteralFloat16.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.LiteralFloat16.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.LiteralFloat16.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.LiteralFloat32","title":"LiteralFloat32","text":"<pre><code>LiteralFloat32(value: float, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralFloat32 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self, value: float, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralFloat32.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = Float32()\n    self.loc = loc\n</code></pre>"},{"location":"api/#astx.LiteralFloat32.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.LiteralFloat32.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.LiteralFloat32.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.LiteralFloat64","title":"LiteralFloat64","text":"<pre><code>LiteralFloat64(value: float, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralFloat64 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self, value: float, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralFloat64.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = Float64()\n    self.loc = loc\n</code></pre>"},{"location":"api/#astx.LiteralFloat64.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.LiteralFloat64.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.LiteralFloat64.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.LiteralInt128","title":"LiteralInt128","text":"<pre><code>LiteralInt128(value: int, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralInt128 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self, value: int, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralInt128.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = Int128()\n    self.loc = loc\n</code></pre>"},{"location":"api/#astx.LiteralInt128.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.LiteralInt128.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.LiteralInt128.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.LiteralInt16","title":"LiteralInt16","text":"<pre><code>LiteralInt16(value: int, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralInt16 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self, value: int, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralInt16.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = Int16()\n    self.loc = loc\n</code></pre>"},{"location":"api/#astx.LiteralInt16.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.LiteralInt16.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.LiteralInt16.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.LiteralInt32","title":"LiteralInt32","text":"<pre><code>LiteralInt32(value: int, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralInt32 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self, value: int, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralInt32.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = Int32()\n    self.loc = loc\n</code></pre>"},{"location":"api/#astx.LiteralInt32.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.LiteralInt32.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.LiteralInt32.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.LiteralInt64","title":"LiteralInt64","text":"<pre><code>LiteralInt64(value: int, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralInt64 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self, value: int, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralInt64.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = Int64()\n    self.loc = loc\n</code></pre>"},{"location":"api/#astx.LiteralInt64.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.LiteralInt64.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.LiteralInt64.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.LiteralInt8","title":"LiteralInt8","text":"<pre><code>LiteralInt8(value: int, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralInt8 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self, value: int, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralInt8.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = Int8()\n    self.loc = loc\n</code></pre>"},{"location":"api/#astx.LiteralInt8.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.LiteralInt8.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.LiteralInt8.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.LiteralNone","title":"LiteralNone","text":"<pre><code>LiteralNone(loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralNone data type.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/base.py</code> <pre><code>def __init__(self, loc: SourceLocation = NO_SOURCE_LOCATION) -&gt; None:\n    \"\"\"Initialize LiteralNone.\"\"\"\n    super().__init__(loc)\n    self.value = None\n    self.type_ = NoneType()\n</code></pre>"},{"location":"api/#astx.LiteralNone.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.LiteralNone.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.LiteralNone.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.LiteralString","title":"LiteralString","text":"<pre><code>LiteralString(value: str, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralString data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/string.py</code> <pre><code>def __init__(\n    self, value: str, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralString.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = String()\n    self.loc = loc\n</code></pre>"},{"location":"api/#astx.LiteralString.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/literals/string.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    key = f\"LiteralString: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.LiteralString.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.LiteralString.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.LiteralTime","title":"LiteralTime","text":"<pre><code>LiteralTime(value: str, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralTime data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the structure of the LiteralTime object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/temporal.py</code> <pre><code>def __init__(\n    self, value: str, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralTime.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = Time()\n    self.loc = loc\n</code></pre>"},{"location":"api/#astx.LiteralTime.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the structure of the LiteralTime object.</p> Source code in <code>src/astx/literals/temporal.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the structure of the LiteralTime object.\"\"\"\n    key = f\"LiteralTime: {self.value}\"\n    return self._prepare_struct(key, self.value, simplified)\n</code></pre>"},{"location":"api/#astx.LiteralTime.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.LiteralTime.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.LiteralTimestamp","title":"LiteralTimestamp","text":"<pre><code>LiteralTimestamp(value: str, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralTimestamp data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the structure of the LiteralTimestamp object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/temporal.py</code> <pre><code>def __init__(\n    self, value: str, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralTimestamp.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = Timestamp()\n    self.loc = loc\n</code></pre>"},{"location":"api/#astx.LiteralTimestamp.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the structure of the LiteralTimestamp object.</p> Source code in <code>src/astx/literals/temporal.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the structure of the LiteralTimestamp object.\"\"\"\n    key = f\"LiteralTimestamp: {self.value}\"\n    return self._prepare_struct(key, self.value, simplified)\n</code></pre>"},{"location":"api/#astx.LiteralTimestamp.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.LiteralTimestamp.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.LiteralUInt128","title":"LiteralUInt128","text":"<pre><code>LiteralUInt128(value: int, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralUInt128 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self, value: int, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralUInt128.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = UInt128()\n    self.loc = loc\n</code></pre>"},{"location":"api/#astx.LiteralUInt128.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.LiteralUInt128.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.LiteralUInt128.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.LiteralUInt16","title":"LiteralUInt16","text":"<pre><code>LiteralUInt16(value: int, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralUInt16 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self, value: int, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralUInt16.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = UInt16()\n    self.loc = loc\n</code></pre>"},{"location":"api/#astx.LiteralUInt16.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.LiteralUInt16.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.LiteralUInt16.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.LiteralUInt32","title":"LiteralUInt32","text":"<pre><code>LiteralUInt32(value: int, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralUInt32 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self, value: int, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralUInt32.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = UInt32()\n    self.loc = loc\n</code></pre>"},{"location":"api/#astx.LiteralUInt32.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.LiteralUInt32.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.LiteralUInt32.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.LiteralUInt64","title":"LiteralUInt64","text":"<pre><code>LiteralUInt64(value: int, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralUInt64 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self, value: int, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralUInt64.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = UInt64()\n    self.loc = loc\n</code></pre>"},{"location":"api/#astx.LiteralUInt64.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.LiteralUInt64.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.LiteralUInt64.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.LiteralUInt8","title":"LiteralUInt8","text":"<pre><code>LiteralUInt8(value: int, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralUInt8 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self, value: int, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralUInt8.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = UInt8()\n    self.loc = loc\n</code></pre>"},{"location":"api/#astx.LiteralUInt8.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.LiteralUInt8.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.LiteralUInt8.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.LiteralUTF8Char","title":"LiteralUTF8Char","text":"<pre><code>LiteralUTF8Char(value: str, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>LiteralString</code></p> <p>Literal class for UTF-8 characters.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the structure of the object in a simplified.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/string.py</code> <pre><code>def __init__(\n    self, value: str, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    super().__init__(value=value, loc=loc)\n    self.type_ = UTF8Char()\n</code></pre>"},{"location":"api/#astx.LiteralUTF8Char.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the structure of the object in a simplified.</p> Source code in <code>src/astx/literals/string.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the structure of the object in a simplified.\"\"\"\n    key = f\"LiteralUTF8Char: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.LiteralUTF8Char.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.LiteralUTF8Char.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.LiteralUTF8String","title":"LiteralUTF8String","text":"<pre><code>LiteralUTF8String(value: str, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>LiteralString</code></p> <p>Literal class for UTF-8 strings.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the structure of the object in a simplified.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/string.py</code> <pre><code>def __init__(\n    self, value: str, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    super().__init__(value=value, loc=loc)\n    self.type_ = UTF8String()\n</code></pre>"},{"location":"api/#astx.LiteralUTF8String.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the structure of the object in a simplified.</p> Source code in <code>src/astx/literals/string.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the structure of the object in a simplified.\"\"\"\n    key = f\"LiteralUTF8String: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.LiteralUTF8String.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.LiteralUTF8String.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.Module","title":"Module","text":"<pre><code>Module(name: str = 'main', loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Block</code></p> <p>AST main expression class.</p> <p>Methods:</p> <ul> <li> <code>append</code>             \u2013              <p>Append a new node to the stack.</p> </li> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>block</code>               (<code>list[AST]</code>)           \u2013            <p>Define an alias for self.nodes.</p> </li> </ul> Source code in <code>src/astx/packages.py</code> <pre><code>def __init__(\n    self,\n    name: str = \"main\",\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n) -&gt; None:\n    \"\"\"Initialize the AST instance.\"\"\"\n    super().__init__(name=name, loc=loc)\n    self.kind = ASTKind.ModuleKind\n</code></pre>"},{"location":"api/#astx.Module.block","title":"block  <code>property</code>","text":"<pre><code>block: list[AST]\n</code></pre> <p>Define an alias for self.nodes.</p>"},{"location":"api/#astx.Module.append","title":"append","text":"<pre><code>append(value: ASTType) -&gt; None\n</code></pre> <p>Append a new node to the stack.</p> Source code in <code>src/astx/base.py</code> <pre><code>def append(self, value: ASTType) -&gt; None:\n    \"\"\"Append a new node to the stack.\"\"\"\n    self.nodes.append(value)\n</code></pre>"},{"location":"api/#astx.Module.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/packages.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    block_node = []\n\n    for node in self.nodes:\n        block_node.append(node.get_struct(simplified))\n\n    key = f\"MODULE[{self.name}]\"\n    value = cast(ReprStruct, block_node)\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.Module.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.Module.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.MutabilityKind","title":"MutabilityKind","text":"<p>               Bases: <code>Enum</code></p> <p>Definition for different kind of mutability.</p>"},{"location":"api/#astx.NandOp","title":"NandOp","text":"<pre><code>NandOp(lhs: DataType, rhs: DataType, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>BoolBinaryOp</code></p> <p>AST class for logical NAND operation.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/types/operators.py</code> <pre><code>def __init__(\n    self,\n    lhs: DataType,\n    rhs: DataType,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Instantiate AST class for logical NAND operation.\"\"\"\n    super().__init__(\n        op_code=self.op_code,\n        lhs=lhs,\n        rhs=rhs,\n        loc=loc,\n        parent=parent,\n    )\n</code></pre>"},{"location":"api/#astx.NandOp.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure that represents the object.</p> Source code in <code>src/astx/types/operators.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure that represents the object.\"\"\"\n    key = f\"BOOL_BINARY_OP[{self.__class__.__name__}]\"\n    value: ReprStruct = {\n        \"lhs\": self.lhs.get_struct(simplified),\n        \"rhs\": self.rhs.get_struct(simplified),\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.NandOp.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.NandOp.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.NorOp","title":"NorOp","text":"<pre><code>NorOp(lhs: DataType, rhs: DataType, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>BoolBinaryOp</code></p> <p>AST class for logical NOR operation.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/types/operators.py</code> <pre><code>def __init__(\n    self,\n    lhs: DataType,\n    rhs: DataType,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Instantiate AST class for logical NOR operation.\"\"\"\n    super().__init__(\n        op_code=self.op_code,\n        lhs=lhs,\n        rhs=rhs,\n        loc=loc,\n        parent=parent,\n    )\n</code></pre>"},{"location":"api/#astx.NorOp.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure that represents the object.</p> Source code in <code>src/astx/types/operators.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure that represents the object.\"\"\"\n    key = f\"BOOL_BINARY_OP[{self.__class__.__name__}]\"\n    value: ReprStruct = {\n        \"lhs\": self.lhs.get_struct(simplified),\n        \"rhs\": self.rhs.get_struct(simplified),\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.NorOp.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.NorOp.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.Number","title":"Number","text":"<pre><code>Number(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>AnyType</code></p> <p>Number data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/#astx.Number.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.Number.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.Number.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.OperatorType","title":"OperatorType","text":"<pre><code>OperatorType(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>DataType</code></p> <p>AST main expression class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/#astx.OperatorType.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.OperatorType.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.OperatorType.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.OrOp","title":"OrOp","text":"<pre><code>OrOp(lhs: DataType, rhs: DataType, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>BoolBinaryOp</code></p> <p>AST class for logical OR operation.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/types/operators.py</code> <pre><code>def __init__(\n    self,\n    lhs: DataType,\n    rhs: DataType,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Instantiate AST class for logical OR operation.\"\"\"\n    super().__init__(\n        op_code=self.op_code,\n        lhs=lhs,\n        rhs=rhs,\n        loc=loc,\n        parent=parent,\n    )\n</code></pre>"},{"location":"api/#astx.OrOp.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure that represents the object.</p> Source code in <code>src/astx/types/operators.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure that represents the object.\"\"\"\n    key = f\"BOOL_BINARY_OP[{self.__class__.__name__}]\"\n    value: ReprStruct = {\n        \"lhs\": self.lhs.get_struct(simplified),\n        \"rhs\": self.rhs.get_struct(simplified),\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.OrOp.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.OrOp.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.Package","title":"Package","text":"<pre><code>Package(name: str = 'main', modules: list[Module] = [], packages: list[Package] = [], loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>ASTNodes</code></p> <p>AST class for Package.</p> <p>Methods:</p> <ul> <li> <code>append</code>             \u2013              <p>Append a new node to the stack.</p> </li> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/packages.py</code> <pre><code>def __init__(\n    self,\n    name: str = \"main\",\n    modules: list[Module] = [],\n    packages: list[Package] = [],\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n) -&gt; None:\n    \"\"\"Initialize the AST instance.\"\"\"\n    super().__init__(loc=loc)\n    self.name = name\n    self.modules = copy.deepcopy(modules)\n    self.packages = copy.deepcopy(packages)\n</code></pre>"},{"location":"api/#astx.Package.append","title":"append","text":"<pre><code>append(value: ASTType) -&gt; None\n</code></pre> <p>Append a new node to the stack.</p> Source code in <code>src/astx/base.py</code> <pre><code>def append(self, value: ASTType) -&gt; None:\n    \"\"\"Append a new node to the stack.\"\"\"\n    self.nodes.append(value)\n</code></pre>"},{"location":"api/#astx.Package.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/packages.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    packages = []\n    modules = []\n\n    for package in self.packages:\n        packages.append(package.get_struct(simplified))\n\n    for module in self.modules:\n        modules.append(module.get_struct(simplified))\n\n    key = str(self)\n    value = cast(\n        ReprStruct,\n        {\n            \"modules\": modules,\n            \"packages\": packages,\n        },\n    )\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.Package.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.Package.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.ParenthesizedExpr","title":"ParenthesizedExpr","text":"<pre><code>ParenthesizedExpr(value: Expr, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Expr</code></p> <p>AST class for explicitly grouped expressions (parentheses retained).</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    value: Expr,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the ParenthesizedExpr instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.value = value\n    self.kind = ASTKind.ParenthesizedExprKind\n</code></pre>"},{"location":"api/#astx.ParenthesizedExpr.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    key = \"GROUP\"\n    value = self.value.get_struct(simplified)\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.ParenthesizedExpr.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.ParenthesizedExpr.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.Program","title":"Program","text":"<pre><code>Program(name: str = 'main', target: Target = Target('', ''), modules: list[Module] = [], packages: list[Package] = [], loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Package</code></p> <p>AST class for Program.</p> <p>Methods:</p> <ul> <li> <code>append</code>             \u2013              <p>Append a new node to the stack.</p> </li> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/packages.py</code> <pre><code>def __init__(\n    self,\n    name: str = \"main\",\n    target: Target = Target(\"\", \"\"),\n    modules: list[Module] = [],\n    packages: list[Package] = [],\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n) -&gt; None:\n    \"\"\"Initialize the AST instance.\"\"\"\n    super().__init__(\n        name=name, modules=modules, packages=packages, loc=loc\n    )\n    self.target = copy.deepcopy(target)\n</code></pre>"},{"location":"api/#astx.Program.append","title":"append","text":"<pre><code>append(value: ASTType) -&gt; None\n</code></pre> <p>Append a new node to the stack.</p> Source code in <code>src/astx/base.py</code> <pre><code>def append(self, value: ASTType) -&gt; None:\n    \"\"\"Append a new node to the stack.\"\"\"\n    self.nodes.append(value)\n</code></pre>"},{"location":"api/#astx.Program.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/packages.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    packages = []\n    modules = []\n\n    for package in self.packages:\n        packages.append(package.get_struct(simplified))\n\n    for module in self.modules:\n        modules.append(module.get_struct(simplified))\n\n    key = str(self)\n    value = cast(\n        ReprStruct,\n        {\n            \"modules\": modules,\n            \"packages\": packages,\n        },\n    )\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.Program.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.Program.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.ScopeKind","title":"ScopeKind","text":"<p>               Bases: <code>Enum</code></p> <p>Definition for different kind of scopes.</p>"},{"location":"api/#astx.SignedInteger","title":"SignedInteger","text":"<pre><code>SignedInteger(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Integer</code></p> <p>Signed integer number data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/#astx.SignedInteger.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.SignedInteger.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.SignedInteger.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.StatementType","title":"StatementType","text":"<pre><code>StatementType(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>AST</code></p> <p>AST main expression class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a structure that represents the node object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the AST instance.\"\"\"\n    self.kind = ASTKind.GenericKind\n    self.loc = loc\n    self.ref = \"\"\n    self.comment = \"\"\n    self.parent = parent\n    self._update_parent()\n</code></pre>"},{"location":"api/#astx.StatementType.get_struct","title":"get_struct  <code>abstractmethod</code>","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a structure that represents the node object.</p> Source code in <code>src/astx/base.py</code> <pre><code>@abstractmethod\ndef get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a structure that represents the node object.\"\"\"\n</code></pre>"},{"location":"api/#astx.StatementType.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.StatementType.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.String","title":"String","text":"<pre><code>String(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>AnyType</code></p> <p>Base class for strings.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/#astx.String.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.String.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.String.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.StructDeclStmt","title":"StructDeclStmt","text":"<pre><code>StructDeclStmt(name: str, attributes: Iterable[VariableDeclaration] | ASTNodes[VariableDeclaration] = [], decorators: Iterable[Expr] | ASTNodes[Expr] = [], methods: Iterable[Function] | ASTNodes[Function] = [], visibility: VisibilityKind = public, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>StatementType</code></p> <p>AST class for struct declaration.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/classes.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    attributes: Iterable[VariableDeclaration]\n    | ASTNodes[VariableDeclaration] = [],\n    decorators: Iterable[Expr] | ASTNodes[Expr] = [],\n    methods: Iterable[Function] | ASTNodes[Function] = [],\n    visibility: VisibilityKind = VisibilityKind.public,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize StructDeclStmt instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.name = name\n\n    if isinstance(attributes, ASTNodes):\n        self.attributes = attributes\n    else:\n        self.attributes = ASTNodes[VariableDeclaration]()\n        for a in attributes:\n            self.attributes.append(a)\n\n    if isinstance(decorators, ASTNodes):\n        self.decorators = decorators\n    else:\n        self.decorators = ASTNodes[Expr]()\n        for decorator in decorators:\n            self.decorators.append(decorator)\n\n    if isinstance(methods, ASTNodes):\n        self.methods = methods\n    else:\n        self.methods = ASTNodes[Function]()\n        for m in methods:\n            self.methods.append(m)\n\n    self.visibility = visibility\n    self.kind = ASTKind.StructDeclStmtKind\n</code></pre>"},{"location":"api/#astx.StructDeclStmt.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/classes.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    vis = dict(zip((\"public\", \"private\", \"protected\"), (\"+\", \"-\", \"#\")))\n    key = f\"STRUCT-DECL[{vis[self.visibility.name]}{self.name}]\"\n\n    decors_dict: ReprStruct = {}\n    if self.decorators:\n        decors_dict = {\n            \"decorators\": self.decorators.get_struct(simplified)\n        }\n\n    attrs_dict: ReprStruct = {}\n    if self.attributes:\n        attrs_dict = {\"attributes\": self.attributes.get_struct(simplified)}\n\n    methods_dict: ReprStruct = {}\n    if self.methods:\n        methods_dict = {\"methods\": self.methods.get_struct(simplified)}\n\n    value: DictDataTypesStruct = {\n        **cast(DictDataTypesStruct, decors_dict),\n        **cast(DictDataTypesStruct, attrs_dict),\n        **cast(DictDataTypesStruct, methods_dict),\n    }\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.StructDeclStmt.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.StructDeclStmt.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.StructDefStmt","title":"StructDefStmt","text":"<pre><code>StructDefStmt(name: str, attributes: Iterable[VariableDeclaration] | ASTNodes[VariableDeclaration] = [], decorators: Iterable[Expr] | ASTNodes[Expr] = [], methods: Iterable[Function] | ASTNodes[Function] = [], visibility: VisibilityKind = public, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>StructDeclStmt</code></p> <p>AST class for struct definition.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/classes.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    attributes: Iterable[VariableDeclaration]\n    | ASTNodes[VariableDeclaration] = [],\n    decorators: Iterable[Expr] | ASTNodes[Expr] = [],\n    methods: Iterable[Function] | ASTNodes[Function] = [],\n    visibility: VisibilityKind = VisibilityKind.public,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize StructDefStmt instance.\"\"\"\n    super().__init__(\n        name=name,\n        attributes=attributes,\n        decorators=decorators,\n        methods=methods,\n        visibility=visibility,\n        loc=loc,\n        parent=parent,\n    )\n    self.kind = ASTKind.StructDefStmtKind\n</code></pre>"},{"location":"api/#astx.StructDefStmt.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/classes.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    vis = dict(zip((\"public\", \"private\", \"protected\"), (\"+\", \"-\", \"#\")))\n    key = f\"STRUCT-DEF[{vis[self.visibility.name]}{self.name}]\"\n\n    decors_dict: ReprStruct = {}\n    if self.decorators:\n        decors_dict = {\n            \"decorators\": self.decorators.get_struct(simplified)\n        }\n\n    attrs_dict: ReprStruct = {}\n    if self.attributes:\n        attrs_dict = {\"attributes\": self.attributes.get_struct(simplified)}\n\n    methods_dict: ReprStruct = {}\n    if self.methods:\n        methods_dict = {\"methods\": self.methods.get_struct(simplified)}\n\n    value: DictDataTypesStruct = {\n        **cast(DictDataTypesStruct, decors_dict),\n        **cast(DictDataTypesStruct, attrs_dict),\n        **cast(DictDataTypesStruct, methods_dict),\n    }\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.StructDefStmt.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.StructDefStmt.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.SubscriptExpr","title":"SubscriptExpr","text":"<pre><code>SubscriptExpr(value: Expr, index: Optional[Expr] = None, lower: Optional[Expr] = None, upper: Optional[Expr] = None, step: Optional[Expr] = None, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Expr</code></p> <p>AST class for subscript expressions.</p> <p>Parameters:</p> <ul> <li> <code>value</code>               (<code>Expr</code>)           \u2013            <p>The expression representing the object being indexed (e.g.,</p> </li> <li> <code>an</code>           \u2013            </li> <li> <code>index</code>               (<code>Optional[Expr]</code>, default:                   <code>None</code> )           \u2013            <p>The index of the variable.</p> </li> <li> <code>lower</code>               (<code>Optional[Expr]</code>, default:                   <code>None</code> )           \u2013            <p>The lower bound of the slice (inclusive).</p> </li> <li> <code>upper</code>               (<code>Optional[Expr]</code>, default:                   <code>None</code> )           \u2013            <p>The upper bound of the slice (exclusive).</p> </li> <li> <code>step</code>               (<code>Optional[Expr]</code>, default:                   <code>None</code> )           \u2013            <p>The step size for the slice.</p> </li> <li> <code>loc</code>               (<code>SourceLocation</code>, default:                   <code>NO_SOURCE_LOCATION</code> )           \u2013            <p>The source location of the expression.</p> </li> <li> <code>parent</code>               (<code>Optional[ASTNodes]</code>, default:                   <code>None</code> )           \u2013            <p>The parent AST node.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/subscript.py</code> <pre><code>def __init__(\n    self,\n    value: Expr,\n    index: Optional[Expr] = None,\n    lower: Optional[Expr] = None,\n    upper: Optional[Expr] = None,\n    step: Optional[Expr] = None,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"\n    Initialize the SubscriptExpr instance.\n\n    Parameters\n    ----------\n    value: Expr\n        The expression representing the object being indexed (e.g.,\n    an array or list).\n    index (optional): Expr\n        The index of the variable.\n    lower (optional): Expr\n        The lower bound of the slice (inclusive).\n    upper (optional): Expr\n        The upper bound of the slice (exclusive).\n    step (optional): Expr\n        The step size for the slice.\n    loc: SourceLocation\n        The source location of the expression.\n    parent (optional): ASTNodes\n        The parent AST node.\n    \"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.value: Expr = value if value is not None else LiteralNone()\n    self.index: Expr = index if index is not None else LiteralNone()\n    self.lower: Expr = lower if lower is not None else LiteralNone()\n    self.upper: Expr = upper if upper is not None else LiteralNone()\n    self.step: Expr = step if step is not None else LiteralNone()\n    self.kind = ASTKind.SubscriptExprKind\n</code></pre>"},{"location":"api/#astx.SubscriptExpr.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/subscript.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    key = \"SubscriptExpr\"\n    value = self._get_struct_wrapper(simplified)\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.SubscriptExpr.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.SubscriptExpr.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.SwitchStmt","title":"SwitchStmt","text":"<pre><code>SwitchStmt(value: Expr, cases: list[CaseStmt] | ASTNodes[CaseStmt], loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>StatementType</code></p> <p>AST class for Switch statements based on Rust's match syntax.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/flows.py</code> <pre><code>def __init__(\n    self,\n    value: Expr,\n    cases: list[CaseStmt] | ASTNodes[CaseStmt],\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the SwitchStmt instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.value = value\n\n    if isinstance(cases, ASTNodes):\n        self.cases = cases\n    else:\n        self.cases = ASTNodes[CaseStmt]()\n        for case in cases:\n            self.cases.append(case)\n\n    self.kind = ASTKind.SwitchStmtKind\n</code></pre>"},{"location":"api/#astx.SwitchStmt.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/flows.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    key = \"SWITCH-STMT\"\n    case_dict = {}\n    for d in range(len(self.cases)):\n        case_dict[f\"case_{d}\"] = self.cases[d].get_struct(simplified)\n\n    value: DictDataTypesStruct = {\n        \"value\": self.value.get_struct(simplified),\n        **cast(DictDataTypesStruct, {\"cases\": case_dict}),\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.SwitchStmt.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.SwitchStmt.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.Target","title":"Target","text":"<pre><code>Target(datalayout: str, triple: str)\n</code></pre> <p>               Bases: <code>Expr</code></p> <p>Define the Architecture target for the program.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/packages.py</code> <pre><code>def __init__(self, datalayout: str, triple: str) -&gt; None:\n    \"\"\"Initialize the AST instance.\"\"\"\n    super().__init__()\n    self.datalayout = datalayout\n    self.triple = triple\n</code></pre>"},{"location":"api/#astx.Target.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/packages.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    key = \"TARGET\"\n    value = f\"{self.datalayout}, {self.triple}\"\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.Target.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.Target.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.ThrowStmt","title":"ThrowStmt","text":"<pre><code>ThrowStmt(exception: Optional[Expr] = None, parent: Optional[ASTNodes] = None, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>StatementType</code></p> <p>AST class for throw statements.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/exceptions.py</code> <pre><code>def __init__(\n    self,\n    exception: Optional[Expr] = None,\n    parent: Optional[ASTNodes] = None,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n) -&gt; None:\n    \"\"\"Initialize the instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.exception = exception\n    self.kind = ASTKind.ThrowStmtKind\n</code></pre>"},{"location":"api/#astx.ThrowStmt.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/exceptions.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    key = \"THROW-STMT\"\n    value = self.exception.get_struct(simplified) if self.exception else \"\"\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.ThrowStmt.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.ThrowStmt.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.Time","title":"Time","text":"<pre><code>Time(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Temporal</code></p> <p>Time data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/#astx.Time.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.Time.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.Time.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.Timestamp","title":"Timestamp","text":"<pre><code>Timestamp(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Temporal</code></p> <p>Timestamp data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/#astx.Timestamp.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.Timestamp.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.Timestamp.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.TypeCastExpr","title":"TypeCastExpr","text":"<pre><code>TypeCastExpr(expr: Expr, target_type: DataType, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Expr</code></p> <p>AST class for type casting expressions.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the TypeCast expression.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/types/casting.py</code> <pre><code>def __init__(\n    self,\n    expr: Expr,\n    target_type: DataType,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc=loc, parent=parent)\n    self.expr = expr\n    self.target_type = target_type\n    self.kind = ASTKind.TypeCastExprKind\n</code></pre>"},{"location":"api/#astx.TypeCastExpr.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the TypeCast expression.</p> Source code in <code>src/astx/types/casting.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the TypeCast expression.\"\"\"\n    key = \"TypeCastExpr\"\n    value: ReprStruct = {\n        \"expression\": self.expr.get_struct(simplified),\n        \"target_type\": self.target_type.get_struct(simplified),\n    }\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.TypeCastExpr.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.TypeCastExpr.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.UInt128","title":"UInt128","text":"<pre><code>UInt128(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>UnsignedInteger</code></p> <p>UInt128 data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/#astx.UInt128.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.UInt128.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.UInt128.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.UInt16","title":"UInt16","text":"<pre><code>UInt16(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>UnsignedInteger</code></p> <p>UInt16 data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/#astx.UInt16.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.UInt16.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.UInt16.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.UInt32","title":"UInt32","text":"<pre><code>UInt32(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>UnsignedInteger</code></p> <p>UInt32 data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/#astx.UInt32.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.UInt32.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.UInt32.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.UInt64","title":"UInt64","text":"<pre><code>UInt64(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>UnsignedInteger</code></p> <p>UInt64 data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/#astx.UInt64.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.UInt64.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.UInt64.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.UInt8","title":"UInt8","text":"<pre><code>UInt8(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>UnsignedInteger</code></p> <p>UInt8 data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/#astx.UInt8.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.UInt8.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.UInt8.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.UTF8Char","title":"UTF8Char","text":"<pre><code>UTF8Char(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>AnyType</code></p> <p>Class for UTF-8 encoded characters.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/#astx.UTF8Char.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.UTF8Char.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.UTF8Char.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.UTF8String","title":"UTF8String","text":"<pre><code>UTF8String(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>AnyType</code></p> <p>Class for UTF-8 encoded strings.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/#astx.UTF8String.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.UTF8String.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.UTF8String.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.UnaryOp","title":"UnaryOp","text":"<pre><code>UnaryOp(op_code: str, operand: DataType, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>DataTypeOps</code></p> <p>AST class for the unary operator.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/types/operators.py</code> <pre><code>def __init__(\n    self,\n    op_code: str,\n    operand: DataType,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the UnaryOp instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.op_code = op_code\n    self.operand = operand\n    self.kind = ASTKind.UnaryOpKind\n</code></pre>"},{"location":"api/#astx.UnaryOp.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/types/operators.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    key = f\"UNARY[{self.op_code}]\"\n    value = self.operand.get_struct(simplified)\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.UnaryOp.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.UnaryOp.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.Undefined","title":"Undefined","text":"<pre><code>Undefined(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Expr</code></p> <p>Undefined expression class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the AST instance.\"\"\"\n    self.kind = ASTKind.GenericKind\n    self.loc = loc\n    self.ref = \"\"\n    self.comment = \"\"\n    self.parent = parent\n    self._update_parent()\n</code></pre>"},{"location":"api/#astx.Undefined.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    value = \"UNDEFINED\"\n    key = \"UNDEFINED\"\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.Undefined.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.Undefined.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.UnsignedInteger","title":"UnsignedInteger","text":"<pre><code>UnsignedInteger(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Integer</code></p> <p>Unsigned integer number data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/#astx.UnsignedInteger.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.UnsignedInteger.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.UnsignedInteger.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.Variable","title":"Variable","text":"<pre><code>Variable(name: str, type_: DataType = AnyType(), loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>DataTypeOps</code></p> <p>AST class for the variable usage.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/variables.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    type_: DataType = AnyType(),\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the Variable instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.name = name\n    self.type_ = type_\n</code></pre>"},{"location":"api/#astx.Variable.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/variables.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    key = f\"Variable[{self.name}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.Variable.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.Variable.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.VariableAssignment","title":"VariableAssignment","text":"<pre><code>VariableAssignment(name: str, value: Expr, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>StatementType</code></p> <p>AST class for variable declaration.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/operators.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    value: Expr,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the VarExprAST instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.loc = loc\n    self.name = name\n    self.value = value\n    self.kind = ASTKind.VariableAssignmentKind\n</code></pre>"},{"location":"api/#astx.VariableAssignment.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/operators.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    key = str(self)\n    value = self.value.get_struct(simplified)\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.VariableAssignment.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.VariableAssignment.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.VariableDeclaration","title":"VariableDeclaration","text":"<pre><code>VariableDeclaration(name: str, type_: DataType, mutability: MutabilityKind = constant, visibility: VisibilityKind = public, scope: ScopeKind = local, value: Expr = UNDEFINED, parent: Optional[ASTNodes] = None, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>StatementType</code></p> <p>AST class for variable declaration.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/variables.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    type_: DataType,\n    mutability: MutabilityKind = MutabilityKind.constant,\n    visibility: VisibilityKind = VisibilityKind.public,\n    scope: ScopeKind = ScopeKind.local,\n    value: Expr = UNDEFINED,\n    parent: Optional[ASTNodes] = None,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n) -&gt; None:\n    \"\"\"Initialize the VarExprAST instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.mutability = mutability\n    self.scope = scope\n    self.visibility = visibility\n    self.name = name\n    self.type_ = type_\n    self.value = value\n    self.kind = ASTKind.VarDeclKind\n</code></pre>"},{"location":"api/#astx.VariableDeclaration.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/variables.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    key = str(self)\n    value = self.value.get_struct(simplified)\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.VariableDeclaration.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.VariableDeclaration.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.VisibilityKind","title":"VisibilityKind","text":"<p>               Bases: <code>Enum</code></p> <p>Definition of different kind of visibility.</p>"},{"location":"api/#astx.WalrusOp","title":"WalrusOp","text":"<pre><code>WalrusOp(lhs: Variable, rhs: DataType, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>DataType</code></p> <p>AST class for the Walrus (assignment expression) operator.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/operators.py</code> <pre><code>def __init__(\n    self,\n    lhs: Variable,\n    rhs: DataType,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n) -&gt; None:\n    \"\"\"Initialize the WalrusOp instance.\"\"\"\n    super().__init__(loc=loc)\n    self.lhs = lhs\n    self.rhs = rhs\n    self.kind = ASTKind.WalrusOpKind\n</code></pre>"},{"location":"api/#astx.WalrusOp.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure that represents the object.</p> Source code in <code>src/astx/operators.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure that represents the object.\"\"\"\n    key = \"WALRUS[:=]\"\n    lhs = {\"lhs\": self.lhs.get_struct(simplified)}\n    rhs = {\"rhs\": self.rhs.get_struct(simplified)}\n\n    content: ReprStruct = {**lhs, **rhs}\n    return self._prepare_struct(key, content, simplified)\n</code></pre>"},{"location":"api/#astx.WalrusOp.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.WalrusOp.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.WhileExpr","title":"WhileExpr","text":"<pre><code>WhileExpr(condition: Expr, body: Block, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Expr</code></p> <p>AST class for <code>while</code> expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/flows.py</code> <pre><code>def __init__(\n    self,\n    condition: Expr,\n    body: Block,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the WhileExpr instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.condition = condition\n    self.body = body\n    self.kind = ASTKind.WhileExprKind\n</code></pre>"},{"location":"api/#astx.WhileExpr.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/flows.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    while_condition = self.condition.get_struct(simplified)\n    while_body = self.body.get_struct(simplified)\n\n    key = \"WHILE-EXPR\"\n    value: ReprStruct = {\n        **cast(DictDataTypesStruct, while_condition),\n        **cast(DictDataTypesStruct, while_body),\n    }\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.WhileExpr.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.WhileExpr.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.WhileStmt","title":"WhileStmt","text":"<pre><code>WhileStmt(condition: Expr, body: Block, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>StatementType</code></p> <p>AST class for <code>while</code> statement.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/flows.py</code> <pre><code>def __init__(\n    self,\n    condition: Expr,\n    body: Block,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the WhileStmt instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.condition = condition\n    self.body = body\n    self.kind = ASTKind.WhileStmtKind\n</code></pre>"},{"location":"api/#astx.WhileStmt.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/flows.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    while_condition = self.condition.get_struct(simplified)\n    while_body = self.body.get_struct(simplified)\n\n    key = \"WHILE-STMT\"\n    value: ReprStruct = {\n        **cast(DictDataTypesStruct, while_condition),\n        **cast(DictDataTypesStruct, while_body),\n    }\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.WhileStmt.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.WhileStmt.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.XnorOp","title":"XnorOp","text":"<pre><code>XnorOp(lhs: DataType, rhs: DataType, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>BoolBinaryOp</code></p> <p>AST class for logical XNOR operation.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/types/operators.py</code> <pre><code>def __init__(\n    self,\n    lhs: DataType,\n    rhs: DataType,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Instantiate AST class for logical XNOR operation.\"\"\"\n    super().__init__(\n        op_code=self.op_code,\n        lhs=lhs,\n        rhs=rhs,\n        loc=loc,\n        parent=parent,\n    )\n</code></pre>"},{"location":"api/#astx.XnorOp.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure that represents the object.</p> Source code in <code>src/astx/types/operators.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure that represents the object.\"\"\"\n    key = f\"BOOL_BINARY_OP[{self.__class__.__name__}]\"\n    value: ReprStruct = {\n        \"lhs\": self.lhs.get_struct(simplified),\n        \"rhs\": self.rhs.get_struct(simplified),\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.XnorOp.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.XnorOp.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.XorOp","title":"XorOp","text":"<pre><code>XorOp(lhs: DataType, rhs: DataType, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>BoolBinaryOp</code></p> <p>AST class for logical XOR operation.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/types/operators.py</code> <pre><code>def __init__(\n    self,\n    lhs: DataType,\n    rhs: DataType,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Instantiate AST class for logical XOR operation.\"\"\"\n    super().__init__(\n        op_code=self.op_code,\n        lhs=lhs,\n        rhs=rhs,\n        loc=loc,\n        parent=parent,\n    )\n</code></pre>"},{"location":"api/#astx.XorOp.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure that represents the object.</p> Source code in <code>src/astx/types/operators.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure that represents the object.\"\"\"\n    key = f\"BOOL_BINARY_OP[{self.__class__.__name__}]\"\n    value: ReprStruct = {\n        \"lhs\": self.lhs.get_struct(simplified),\n        \"rhs\": self.rhs.get_struct(simplified),\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.XorOp.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.XorOp.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.YieldExpr","title":"YieldExpr","text":"<pre><code>YieldExpr(value: Optional[Expr], loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Expr</code></p> <p>AST class for YieldExpr.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/flows.py</code> <pre><code>def __init__(\n    self,\n    value: Optional[Expr],\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the YieldExpr instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.value = value\n    self.kind = ASTKind.YieldExprKind\n</code></pre>"},{"location":"api/#astx.YieldExpr.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/flows.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    key = \"YIELD-EXPR\"\n    value = {} if self.value is None else self.value.get_struct(simplified)\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/#astx.YieldExpr.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/#astx.YieldExpr.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/#astx.get_version","title":"get_version","text":"<pre><code>get_version() -&gt; str\n</code></pre> <p>Return the program version.</p> Source code in <code>src/astx/__init__.py</code> <pre><code>def get_version() -&gt; str:\n    \"\"\"Return the program version.\"\"\"\n    try:\n        return importlib_metadata.version(__name__)\n    except importlib_metadata.PackageNotFoundError:  # pragma: no cover\n        return \"0.18.0\"  # semantic-release\n</code></pre>"},{"location":"api/SUMMARY/","title":"SUMMARY","text":"<ul> <li> astx<ul> <li> base</li> <li> blocks</li> <li> callables</li> <li> classes</li> <li> exceptions</li> <li> flows</li> <li> literals<ul> <li> base</li> <li> boolean</li> <li> numeric</li> <li> string</li> <li> temporal</li> </ul> </li> <li> mixes</li> <li> modifiers</li> <li> operators</li> <li> packages</li> <li> subscript</li> <li> symbol_table</li> <li> tools<ul> <li> transpilers<ul> <li> python</li> </ul> </li> <li> typing</li> </ul> </li> <li> types<ul> <li> base</li> <li> boolean</li> <li> casting</li> <li> numeric</li> <li> operators</li> <li> string</li> <li> temporal</li> <li> ttypes</li> </ul> </li> <li> variables</li> <li> viz</li> </ul> </li> </ul>"},{"location":"api/base/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> base","text":""},{"location":"api/base/#astx.base","title":"base","text":"<p>AST classes and functions.</p> <p>Classes:</p> <ul> <li> <code>ExprType</code>           \u2013            <p>ExprType expression class.</p> </li> </ul>"},{"location":"api/base/#astx.base.AST","title":"AST","text":"<pre><code>AST(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>AST main expression class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a structure that represents the node object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the AST instance.\"\"\"\n    self.kind = ASTKind.GenericKind\n    self.loc = loc\n    self.ref = \"\"\n    self.comment = \"\"\n    self.parent = parent\n    self._update_parent()\n</code></pre>"},{"location":"api/base/#astx.base.AST.get_struct","title":"get_struct  <code>abstractmethod</code>","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a structure that represents the node object.</p> Source code in <code>src/astx/base.py</code> <pre><code>@abstractmethod\ndef get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a structure that represents the node object.\"\"\"\n</code></pre>"},{"location":"api/base/#astx.base.AST.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/base/#astx.base.AST.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/base/#astx.base.ASTKind","title":"ASTKind","text":"<p>               Bases: <code>Enum</code></p> <p>The expression kind class used for downcasting.</p>"},{"location":"api/base/#astx.base.ASTMeta","title":"ASTMeta","text":"<p>               Bases: <code>type</code></p>"},{"location":"api/base/#astx.base.ASTNodes","title":"ASTNodes","text":"<pre><code>ASTNodes(name: str = 'entry', loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Generic[ASTType]</code>, <code>AST</code></p> <p>AST with a list of nodes, supporting type-specific elements.</p> <p>Methods:</p> <ul> <li> <code>append</code>             \u2013              <p>Append a new node to the stack.</p> </li> <li> <code>get_struct</code>             \u2013              <p>Return a string that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    name: str = \"entry\",\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the AST instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.name = name\n    self.nodes: list[ASTType] = []\n    self.position: int = 0\n</code></pre>"},{"location":"api/base/#astx.base.ASTNodes.append","title":"append","text":"<pre><code>append(value: ASTType) -&gt; None\n</code></pre> <p>Append a new node to the stack.</p> Source code in <code>src/astx/base.py</code> <pre><code>def append(self, value: ASTType) -&gt; None:\n    \"\"\"Append a new node to the stack.\"\"\"\n    self.nodes.append(value)\n</code></pre>"},{"location":"api/base/#astx.base.ASTNodes.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a string that represents the object.\"\"\"\n    args_nodes = []\n\n    for node in self.nodes:\n        args_nodes.append(node.get_struct(simplified))\n\n    key = str(self)\n    value = cast(ReprStruct, args_nodes)\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/base/#astx.base.ASTNodes.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/base/#astx.base.ASTNodes.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/base/#astx.base.DataType","title":"DataType","text":"<pre><code>DataType(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>ExprType</code></p> <p>AST main expression class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/base/#astx.base.DataType.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/base/#astx.base.DataType.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/base/#astx.base.DataType.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/base/#astx.base.Expr","title":"Expr","text":"<pre><code>Expr(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>AST</code></p> <p>AST main expression class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a structure that represents the node object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the AST instance.\"\"\"\n    self.kind = ASTKind.GenericKind\n    self.loc = loc\n    self.ref = \"\"\n    self.comment = \"\"\n    self.parent = parent\n    self._update_parent()\n</code></pre>"},{"location":"api/base/#astx.base.Expr.get_struct","title":"get_struct  <code>abstractmethod</code>","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a structure that represents the node object.</p> Source code in <code>src/astx/base.py</code> <pre><code>@abstractmethod\ndef get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a structure that represents the node object.\"\"\"\n</code></pre>"},{"location":"api/base/#astx.base.Expr.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/base/#astx.base.Expr.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/base/#astx.base.ExprType","title":"ExprType","text":"<pre><code>ExprType(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Expr</code></p> <p>ExprType expression class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a structure that represents the node object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the AST instance.\"\"\"\n    self.kind = ASTKind.GenericKind\n    self.loc = loc\n    self.ref = \"\"\n    self.comment = \"\"\n    self.parent = parent\n    self._update_parent()\n</code></pre>"},{"location":"api/base/#astx.base.ExprType.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a structure that represents the node object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a structure that represents the node object.\"\"\"\n    return {\"Type\": self.__class__.__name__}\n</code></pre>"},{"location":"api/base/#astx.base.ExprType.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/base/#astx.base.ExprType.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/base/#astx.base.Identifier","title":"Identifier","text":"<pre><code>Identifier(value: str, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Expr</code></p> <p>AST class for identifiers.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a structure that represents the Identifier object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    value: str,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the Identifier instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.value = value\n</code></pre>"},{"location":"api/base/#astx.base.Identifier.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a structure that represents the Identifier object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a structure that represents the Identifier object.\"\"\"\n    key = f\"IDENTIFIER[{self.value}]\"\n    return self._prepare_struct(key, self.value, simplified)\n</code></pre>"},{"location":"api/base/#astx.base.Identifier.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/base/#astx.base.Identifier.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/base/#astx.base.OperatorType","title":"OperatorType","text":"<pre><code>OperatorType(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>DataType</code></p> <p>AST main expression class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/base/#astx.base.OperatorType.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/base/#astx.base.OperatorType.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/base/#astx.base.OperatorType.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/base/#astx.base.ParenthesizedExpr","title":"ParenthesizedExpr","text":"<pre><code>ParenthesizedExpr(value: Expr, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Expr</code></p> <p>AST class for explicitly grouped expressions (parentheses retained).</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    value: Expr,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the ParenthesizedExpr instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.value = value\n    self.kind = ASTKind.ParenthesizedExprKind\n</code></pre>"},{"location":"api/base/#astx.base.ParenthesizedExpr.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    key = \"GROUP\"\n    value = self.value.get_struct(simplified)\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/base/#astx.base.ParenthesizedExpr.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/base/#astx.base.ParenthesizedExpr.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/base/#astx.base.StatementType","title":"StatementType","text":"<pre><code>StatementType(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>AST</code></p> <p>AST main expression class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a structure that represents the node object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the AST instance.\"\"\"\n    self.kind = ASTKind.GenericKind\n    self.loc = loc\n    self.ref = \"\"\n    self.comment = \"\"\n    self.parent = parent\n    self._update_parent()\n</code></pre>"},{"location":"api/base/#astx.base.StatementType.get_struct","title":"get_struct  <code>abstractmethod</code>","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a structure that represents the node object.</p> Source code in <code>src/astx/base.py</code> <pre><code>@abstractmethod\ndef get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a structure that represents the node object.\"\"\"\n</code></pre>"},{"location":"api/base/#astx.base.StatementType.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/base/#astx.base.StatementType.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/base/#astx.base.Undefined","title":"Undefined","text":"<pre><code>Undefined(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Expr</code></p> <p>Undefined expression class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the AST instance.\"\"\"\n    self.kind = ASTKind.GenericKind\n    self.loc = loc\n    self.ref = \"\"\n    self.comment = \"\"\n    self.parent = parent\n    self._update_parent()\n</code></pre>"},{"location":"api/base/#astx.base.Undefined.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    value = \"UNDEFINED\"\n    key = \"UNDEFINED\"\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/base/#astx.base.Undefined.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/base/#astx.base.Undefined.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/base/#astx.base.is_using_jupyter_notebook","title":"is_using_jupyter_notebook","text":"<pre><code>is_using_jupyter_notebook() -&gt; bool\n</code></pre> <p>Check if it is executed in a jupyter notebook.</p> Source code in <code>src/astx/base.py</code> <pre><code>def is_using_jupyter_notebook() -&gt; bool:\n    \"\"\"Check if it is executed in a jupyter notebook.\"\"\"\n    try:\n        from IPython import get_ipython  # type: ignore\n\n        if \"IPKernelApp\" in get_ipython().config:  # type: ignore\n            return True\n    except Exception:\n        pass\n    return False\n</code></pre>"},{"location":"api/blocks/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> blocks","text":""},{"location":"api/blocks/#astx.blocks","title":"blocks","text":"<p>Module for different kind of ASTx blocks.</p> <p>Classes:</p> <ul> <li> <code>Block</code>           \u2013            <p>The AST tree.</p> </li> </ul>"},{"location":"api/blocks/#astx.blocks.Block","title":"Block","text":"<pre><code>Block(name: str = 'entry', loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>ASTNodes[ASTType]</code></p> <p>The AST tree.</p> <p>Methods:</p> <ul> <li> <code>append</code>             \u2013              <p>Append a new node to the stack.</p> </li> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    name: str = \"entry\",\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the AST instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.name = name\n    self.nodes: list[ASTType] = []\n    self.position: int = 0\n</code></pre>"},{"location":"api/blocks/#astx.blocks.Block.append","title":"append","text":"<pre><code>append(value: ASTType) -&gt; None\n</code></pre> <p>Append a new node to the stack.</p> Source code in <code>src/astx/base.py</code> <pre><code>def append(self, value: ASTType) -&gt; None:\n    \"\"\"Append a new node to the stack.\"\"\"\n    self.nodes.append(value)\n</code></pre>"},{"location":"api/blocks/#astx.blocks.Block.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/blocks.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    block_nodes = []\n\n    for node in self.nodes:\n        block_nodes.append(node.get_struct(simplified))\n\n    key = f\"BLOCK[{self.name}]\"\n    value = cast(ReprStruct, block_nodes)\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/blocks/#astx.blocks.Block.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/blocks/#astx.blocks.Block.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/callables/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> callables","text":""},{"location":"api/callables/#astx.callables","title":"callables","text":"<p>Module for callable ASTx.</p> <p>Classes:</p> <ul> <li> <code>Argument</code>           \u2013            <p>AST class for argument definition.</p> </li> <li> <code>Arguments</code>           \u2013            <p>AST class for argument definition.</p> </li> <li> <code>Function</code>           \u2013            <p>AST class for function definition.</p> </li> <li> <code>FunctionCall</code>           \u2013            <p>AST class for function call.</p> </li> <li> <code>FunctionPrototype</code>           \u2013            <p>AST class for function prototype declaration.</p> </li> <li> <code>FunctionReturn</code>           \u2013            <p>AST class for function <code>return</code> statement.</p> </li> <li> <code>LambdaExpr</code>           \u2013            <p>AST class for lambda expressions.</p> </li> </ul>"},{"location":"api/callables/#astx.callables.Argument","title":"Argument","text":"<pre><code>Argument(name: str, type_: DataType, mutability: MutabilityKind = constant, default: Expr = UNDEFINED, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Variable</code></p> <p>AST class for argument definition.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/callables.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    type_: DataType,\n    mutability: MutabilityKind = MutabilityKind.constant,\n    default: Expr = UNDEFINED,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the VarExprAST instance.\"\"\"\n    super().__init__(name=name, loc=loc, parent=parent)\n    self.mutability = mutability\n    self.type_ = type_\n    self.default = default\n    self.kind = ASTKind.ArgumentKind\n</code></pre>"},{"location":"api/callables/#astx.callables.Argument.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/callables.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    key = f\"Argument[{self.name}, {self.type_}] = {self.default}\"\n    value = self.default.get_struct()\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/callables/#astx.callables.Argument.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/callables/#astx.callables.Argument.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/callables/#astx.callables.Arguments","title":"Arguments","text":"<pre><code>Arguments(*args: Argument, **kwargs: Any)\n</code></pre> <p>               Bases: <code>ASTNodes[Argument]</code></p> <p>AST class for argument definition.</p> <p>Methods:</p> <ul> <li> <code>append</code>             \u2013              <p>Append a new node to the stack.</p> </li> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/callables.py</code> <pre><code>def __init__(self, *args: Argument, **kwargs: Any) -&gt; None:\n    super().__init__(**kwargs)\n    for arg in args:\n        self.append(arg)\n</code></pre>"},{"location":"api/callables/#astx.callables.Arguments.append","title":"append","text":"<pre><code>append(value: ASTType) -&gt; None\n</code></pre> <p>Append a new node to the stack.</p> Source code in <code>src/astx/base.py</code> <pre><code>def append(self, value: ASTType) -&gt; None:\n    \"\"\"Append a new node to the stack.\"\"\"\n    self.nodes.append(value)\n</code></pre>"},{"location":"api/callables/#astx.callables.Arguments.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/callables.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    args_nodes = []\n\n    for node in self.nodes:\n        args_nodes.append(node.get_struct(simplified))\n\n    key = str(self)\n    value = cast(ReprStruct, args_nodes)\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/callables/#astx.callables.Arguments.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/callables/#astx.callables.Arguments.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/callables/#astx.callables.Function","title":"Function","text":"<pre><code>Function(prototype: FunctionPrototype, body: Block, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>StatementType</code></p> <p>AST class for function definition.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Get the AST structure that represent the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Return the function prototype name.</p> </li> </ul> Source code in <code>src/astx/callables.py</code> <pre><code>def __init__(\n    self,\n    prototype: FunctionPrototype,\n    body: Block,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the Function instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.prototype = prototype\n    self.body = body\n    self.kind = ASTKind.FunctionKind\n</code></pre>"},{"location":"api/callables/#astx.callables.Function.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Return the function prototype name.</p>"},{"location":"api/callables/#astx.callables.Function.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Get the AST structure that represent the object.</p> Source code in <code>src/astx/callables.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Get the AST structure that represent the object.\"\"\"\n    fn_args = self.prototype.args.get_struct(simplified)\n    fn_body = self.body.get_struct(simplified)\n\n    key = f\"FUNCTION[{self.prototype.name}]\"\n    args_struct = {\"args\": fn_args}\n    body_struct = {\"body\": fn_body}\n\n    value: ReprStruct = {**args_struct, **body_struct}\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/callables/#astx.callables.Function.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/callables/#astx.callables.Function.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/callables/#astx.callables.FunctionCall","title":"FunctionCall","text":"<pre><code>FunctionCall(fn: Function, args: Iterable[DataType], type_: DataType = AnyType(), loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>DataType</code></p> <p>AST class for function call.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/callables.py</code> <pre><code>def __init__(\n    self,\n    fn: Function,\n    args: Iterable[DataType],\n    type_: DataType = AnyType(),\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the Call instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.fn = fn\n    self.args = args\n    self.kind = ASTKind.CallKind\n    self.type_ = type_\n</code></pre>"},{"location":"api/callables/#astx.callables.FunctionCall.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/callables.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    call_params = []\n\n    for node in self.args:\n        call_params.append(node.get_struct(simplified))\n\n    key = f\"FUNCTION-CALL[{self.fn.name}]\"\n    value = cast(\n        ReprStruct,\n        {\n            f\"Parameters ({len(call_params)})\": {\n                f\"param({idx})\": param\n                for idx, param in enumerate(call_params)\n            }\n        },\n    )\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/callables/#astx.callables.FunctionCall.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/callables/#astx.callables.FunctionCall.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/callables/#astx.callables.FunctionPrototype","title":"FunctionPrototype","text":"<pre><code>FunctionPrototype(name: str, args: Arguments, return_type: AnyType, scope: ScopeKind = global_, visibility: VisibilityKind = public, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>StatementType</code></p> <p>AST class for function prototype declaration.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Get the AST structure that represent the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/callables.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    args: Arguments,\n    return_type: AnyType,\n    scope: ScopeKind = ScopeKind.global_,\n    visibility: VisibilityKind = VisibilityKind.public,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the FunctionPrototype instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.name = name\n    self.args = args\n    self.return_type = return_type\n    self.loc = loc\n    self.kind = ASTKind.PrototypeKind\n    self.scope = scope\n    self.visibility = visibility\n</code></pre>"},{"location":"api/callables/#astx.callables.FunctionPrototype.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Get the AST structure that represent the object.</p> Source code in <code>src/astx/callables.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Get the AST structure that represent the object.\"\"\"\n    raise Exception(\"Visitor method not necessary\")\n</code></pre>"},{"location":"api/callables/#astx.callables.FunctionPrototype.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/callables/#astx.callables.FunctionPrototype.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/callables/#astx.callables.FunctionReturn","title":"FunctionReturn","text":"<pre><code>FunctionReturn(value: DataType, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>StatementType</code></p> <p>AST class for function <code>return</code> statement.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/callables.py</code> <pre><code>def __init__(\n    self,\n    value: DataType,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the Return instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.value = value\n    self.kind = ASTKind.ReturnKind\n</code></pre>"},{"location":"api/callables/#astx.callables.FunctionReturn.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/callables.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    key = \"RETURN\"\n    value = self.value.get_struct(simplified)\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/callables/#astx.callables.FunctionReturn.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/callables/#astx.callables.FunctionReturn.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/callables/#astx.callables.LambdaExpr","title":"LambdaExpr","text":"<pre><code>LambdaExpr(body: Expr, params: Arguments = Arguments(), loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Expr</code></p> <p>AST class for lambda expressions.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the lambda expression.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/callables.py</code> <pre><code>def __init__(\n    self,\n    body: Expr,\n    params: Arguments = Arguments(),\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc=loc, parent=parent)\n    self.params = params\n    self.body = body\n    self.kind = ASTKind.LambdaExprKind\n</code></pre>"},{"location":"api/callables/#astx.callables.LambdaExpr.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the lambda expression.</p> Source code in <code>src/astx/callables.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the lambda expression.\"\"\"\n    key = \"LambdaExpr\"\n    value: ReprStruct = {\n        \"params\": self.params.get_struct(simplified),\n        \"body\": self.body.get_struct(simplified),\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/callables/#astx.callables.LambdaExpr.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/callables/#astx.callables.LambdaExpr.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/classes/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> classes","text":""},{"location":"api/classes/#astx.classes","title":"classes","text":"<p>Module for classes definitions/declarations.</p> <p>Classes:</p> <ul> <li> <code>ClassDeclStmt</code>           \u2013            <p>AST class for class declaration.</p> </li> <li> <code>ClassDefStmt</code>           \u2013            <p>AST class for class definition, including attributes and methods.</p> </li> <li> <code>EnumDeclStmt</code>           \u2013            <p>AST class for enum declaration.</p> </li> <li> <code>StructDeclStmt</code>           \u2013            <p>AST class for struct declaration.</p> </li> <li> <code>StructDefStmt</code>           \u2013            <p>AST class for struct definition.</p> </li> </ul>"},{"location":"api/classes/#astx.classes.ClassDeclStmt","title":"ClassDeclStmt","text":"<pre><code>ClassDeclStmt(name: str, bases: Iterable[Expr] | ASTNodes[Expr] = [], decorators: Iterable[Expr] | ASTNodes[Expr] = [], visibility: VisibilityKind = public, is_abstract: bool = False, metaclass: Optional[Expr] = None, attributes: Iterable[VariableDeclaration] | ASTNodes[VariableDeclaration] = [], methods: Iterable[Function] | ASTNodes[Function] = [], loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>StatementType</code></p> <p>AST class for class declaration.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/classes.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    bases: Iterable[Expr] | ASTNodes[Expr] = [],\n    decorators: Iterable[Expr] | ASTNodes[Expr] = [],\n    visibility: VisibilityKind = VisibilityKind.public,\n    is_abstract: bool = False,\n    metaclass: Optional[Expr] = None,\n    attributes: Iterable[VariableDeclaration]\n    | ASTNodes[VariableDeclaration] = [],\n    methods: Iterable[Function] | ASTNodes[Function] = [],\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize ClassDeclStmt instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.name = name\n\n    if isinstance(bases, ASTNodes):\n        self.bases = bases\n    else:\n        self.bases = ASTNodes()\n        for base in bases:\n            self.bases.append(base)\n\n    if isinstance(decorators, ASTNodes):\n        self.decorators = decorators\n    else:\n        self.decorators = ASTNodes[Expr]()\n        for decorator in decorators:\n            self.decorators.append(decorator)\n\n    if isinstance(attributes, ASTNodes):\n        self.attributes = attributes\n    else:\n        self.attributes = ASTNodes[VariableDeclaration]()\n        for a in attributes:\n            self.attributes.append(a)\n\n    if isinstance(methods, ASTNodes):\n        self.methods = methods\n    else:\n        self.methods = ASTNodes[Function]()\n        for m in methods:\n            self.methods.append(m)\n\n    self.visibility = visibility\n    self.is_abstract = is_abstract\n    self.metaclass = metaclass\n    self.kind = ASTKind.ClassDeclStmtKind\n</code></pre>"},{"location":"api/classes/#astx.classes.ClassDeclStmt.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/classes.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    vis = dict(zip((\"public\", \"private\", \"protected\"), (\"+\", \"-\", \"#\")))\n    abstract = \", abstract\" if self.is_abstract else \"\"\n\n    key = f\"CLASS-DECL[{vis[self.visibility.name]}{self.name}{abstract}]\"\n    value = self._get_struct_wrapper(simplified)\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/classes/#astx.classes.ClassDeclStmt.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/classes/#astx.classes.ClassDeclStmt.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/classes/#astx.classes.ClassDefStmt","title":"ClassDefStmt","text":"<pre><code>ClassDefStmt(name: str, bases: Iterable[Expr] | ASTNodes[Expr] = [], decorators: Iterable[Expr] | ASTNodes[Expr] = [], body: Block = CLASS_BODY_DEFAULT, visibility: VisibilityKind = public, is_abstract: bool = False, metaclass: Optional[Expr] = None, attributes: Iterable[VariableDeclaration] | ASTNodes[VariableDeclaration] = [], methods: Iterable[Function] | ASTNodes[Function] = [], loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>ClassDeclStmt</code></p> <p>AST class for class definition, including attributes and methods.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/classes.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    bases: Iterable[Expr] | ASTNodes[Expr] = [],\n    decorators: Iterable[Expr] | ASTNodes[Expr] = [],\n    body: Block = CLASS_BODY_DEFAULT,\n    visibility: VisibilityKind = VisibilityKind.public,\n    is_abstract: bool = False,\n    metaclass: Optional[Expr] = None,\n    attributes: Iterable[VariableDeclaration]\n    | ASTNodes[VariableDeclaration] = [],\n    methods: Iterable[Function] | ASTNodes[Function] = [],\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize ClassDefStmt instance.\"\"\"\n    super().__init__(\n        name=name,\n        bases=bases,\n        decorators=decorators,\n        visibility=visibility,\n        is_abstract=is_abstract,\n        metaclass=metaclass,\n        attributes=attributes,\n        methods=methods,\n        loc=loc,\n        parent=parent,\n    )\n\n    if body != CLASS_BODY_DEFAULT:\n        self.body = body\n    else:\n        self.body = copy.deepcopy(body)\n        self.body.name = f\"{name}_body\"\n    self.kind = ASTKind.ClassDefStmtKind\n</code></pre>"},{"location":"api/classes/#astx.classes.ClassDefStmt.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/classes.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    vis = dict(zip((\"public\", \"private\", \"protected\"), (\"+\", \"-\", \"#\")))\n    abstract = \", abstract\" if self.is_abstract else \"\"\n\n    key = f\"CLASS-DEF[{vis[self.visibility.name]}{self.name}{abstract}]\"\n    value = self._get_struct_wrapper(simplified)\n\n    if self.body != CLASS_BODY_DEFAULT:\n        value[\"body\"] = self.body.get_struct(simplified)\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/classes/#astx.classes.ClassDefStmt.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/classes/#astx.classes.ClassDefStmt.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/classes/#astx.classes.EnumDeclStmt","title":"EnumDeclStmt","text":"<pre><code>EnumDeclStmt(name: str, attributes: Iterable[VariableDeclaration] | ASTNodes[VariableDeclaration] = [], visibility: VisibilityKind = public, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>StatementType</code></p> <p>AST class for enum declaration.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/classes.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    attributes: Iterable[VariableDeclaration]\n    | ASTNodes[VariableDeclaration] = [],\n    visibility: VisibilityKind = VisibilityKind.public,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize EnumDeclStmt instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.name = name\n\n    if isinstance(attributes, ASTNodes):\n        self.attributes = attributes\n    else:\n        self.attributes = ASTNodes[VariableDeclaration]()\n        for a in attributes:\n            self.attributes.append(a)\n\n    self.visibility = visibility\n    self.kind = ASTKind.EnumDeclStmtKind\n</code></pre>"},{"location":"api/classes/#astx.classes.EnumDeclStmt.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/classes.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    vis = dict(zip((\"public\", \"private\", \"protected\"), (\"+\", \"-\", \"#\")))\n    key = f\"ENUM-DECL[{vis[self.visibility.name]}{self.name}]\"\n\n    attrs_dict: ReprStruct = {}\n    if self.attributes:\n        attrs_dict = {\"attributes\": self.attributes.get_struct(simplified)}\n\n    value = {\n        **cast(DictDataTypesStruct, attrs_dict),\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/classes/#astx.classes.EnumDeclStmt.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/classes/#astx.classes.EnumDeclStmt.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/classes/#astx.classes.StructDeclStmt","title":"StructDeclStmt","text":"<pre><code>StructDeclStmt(name: str, attributes: Iterable[VariableDeclaration] | ASTNodes[VariableDeclaration] = [], decorators: Iterable[Expr] | ASTNodes[Expr] = [], methods: Iterable[Function] | ASTNodes[Function] = [], visibility: VisibilityKind = public, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>StatementType</code></p> <p>AST class for struct declaration.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/classes.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    attributes: Iterable[VariableDeclaration]\n    | ASTNodes[VariableDeclaration] = [],\n    decorators: Iterable[Expr] | ASTNodes[Expr] = [],\n    methods: Iterable[Function] | ASTNodes[Function] = [],\n    visibility: VisibilityKind = VisibilityKind.public,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize StructDeclStmt instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.name = name\n\n    if isinstance(attributes, ASTNodes):\n        self.attributes = attributes\n    else:\n        self.attributes = ASTNodes[VariableDeclaration]()\n        for a in attributes:\n            self.attributes.append(a)\n\n    if isinstance(decorators, ASTNodes):\n        self.decorators = decorators\n    else:\n        self.decorators = ASTNodes[Expr]()\n        for decorator in decorators:\n            self.decorators.append(decorator)\n\n    if isinstance(methods, ASTNodes):\n        self.methods = methods\n    else:\n        self.methods = ASTNodes[Function]()\n        for m in methods:\n            self.methods.append(m)\n\n    self.visibility = visibility\n    self.kind = ASTKind.StructDeclStmtKind\n</code></pre>"},{"location":"api/classes/#astx.classes.StructDeclStmt.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/classes.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    vis = dict(zip((\"public\", \"private\", \"protected\"), (\"+\", \"-\", \"#\")))\n    key = f\"STRUCT-DECL[{vis[self.visibility.name]}{self.name}]\"\n\n    decors_dict: ReprStruct = {}\n    if self.decorators:\n        decors_dict = {\n            \"decorators\": self.decorators.get_struct(simplified)\n        }\n\n    attrs_dict: ReprStruct = {}\n    if self.attributes:\n        attrs_dict = {\"attributes\": self.attributes.get_struct(simplified)}\n\n    methods_dict: ReprStruct = {}\n    if self.methods:\n        methods_dict = {\"methods\": self.methods.get_struct(simplified)}\n\n    value: DictDataTypesStruct = {\n        **cast(DictDataTypesStruct, decors_dict),\n        **cast(DictDataTypesStruct, attrs_dict),\n        **cast(DictDataTypesStruct, methods_dict),\n    }\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/classes/#astx.classes.StructDeclStmt.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/classes/#astx.classes.StructDeclStmt.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/classes/#astx.classes.StructDefStmt","title":"StructDefStmt","text":"<pre><code>StructDefStmt(name: str, attributes: Iterable[VariableDeclaration] | ASTNodes[VariableDeclaration] = [], decorators: Iterable[Expr] | ASTNodes[Expr] = [], methods: Iterable[Function] | ASTNodes[Function] = [], visibility: VisibilityKind = public, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>StructDeclStmt</code></p> <p>AST class for struct definition.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/classes.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    attributes: Iterable[VariableDeclaration]\n    | ASTNodes[VariableDeclaration] = [],\n    decorators: Iterable[Expr] | ASTNodes[Expr] = [],\n    methods: Iterable[Function] | ASTNodes[Function] = [],\n    visibility: VisibilityKind = VisibilityKind.public,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize StructDefStmt instance.\"\"\"\n    super().__init__(\n        name=name,\n        attributes=attributes,\n        decorators=decorators,\n        methods=methods,\n        visibility=visibility,\n        loc=loc,\n        parent=parent,\n    )\n    self.kind = ASTKind.StructDefStmtKind\n</code></pre>"},{"location":"api/classes/#astx.classes.StructDefStmt.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/classes.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    vis = dict(zip((\"public\", \"private\", \"protected\"), (\"+\", \"-\", \"#\")))\n    key = f\"STRUCT-DEF[{vis[self.visibility.name]}{self.name}]\"\n\n    decors_dict: ReprStruct = {}\n    if self.decorators:\n        decors_dict = {\n            \"decorators\": self.decorators.get_struct(simplified)\n        }\n\n    attrs_dict: ReprStruct = {}\n    if self.attributes:\n        attrs_dict = {\"attributes\": self.attributes.get_struct(simplified)}\n\n    methods_dict: ReprStruct = {}\n    if self.methods:\n        methods_dict = {\"methods\": self.methods.get_struct(simplified)}\n\n    value: DictDataTypesStruct = {\n        **cast(DictDataTypesStruct, decors_dict),\n        **cast(DictDataTypesStruct, attrs_dict),\n        **cast(DictDataTypesStruct, methods_dict),\n    }\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/classes/#astx.classes.StructDefStmt.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/classes/#astx.classes.StructDefStmt.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/exceptions/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> exceptions","text":""},{"location":"api/exceptions/#astx.exceptions","title":"exceptions","text":"<p>Module for Exceptions.</p> <p>Classes:</p> <ul> <li> <code>CatchHandlerStmt</code>           \u2013            <p>AST class for catch statements.</p> </li> <li> <code>ExceptionHandlerStmt</code>           \u2013            <p>AST class for try statements.</p> </li> <li> <code>FinallyHandlerStmt</code>           \u2013            <p>AST class for finally statements.</p> </li> <li> <code>ThrowStmt</code>           \u2013            <p>AST class for throw statements.</p> </li> </ul>"},{"location":"api/exceptions/#astx.exceptions.CatchHandlerStmt","title":"CatchHandlerStmt","text":"<pre><code>CatchHandlerStmt(body: Block[AST], name: Optional[Identifier] = None, types: Optional[Iterable[Identifier] | ASTNodes[Identifier]] = None, parent: Optional[ASTNodes] = None, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>StatementType</code></p> <p>AST class for catch statements.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/exceptions.py</code> <pre><code>def __init__(\n    self,\n    body: Block[AST],\n    name: Optional[Identifier] = None,\n    types: Optional[Iterable[Identifier] | ASTNodes[Identifier]] = None,\n    parent: Optional[ASTNodes] = None,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n) -&gt; None:\n    \"\"\"Initialize the instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.body = body\n    self.name = name\n\n    if types:\n        if isinstance(types, ASTNodes):\n            self.types = types\n        else:\n            self.types = ASTNodes[Identifier]()\n            for t in types:\n                self.types.append(t)\n    else:\n        self.types = None\n\n    self.kind = ASTKind.CatchHandlerStmtKind\n</code></pre>"},{"location":"api/exceptions/#astx.exceptions.CatchHandlerStmt.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/exceptions.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    key = \"CATCH-HANDLER-STMT\"\n    body_dict = {\"body\": self.body.get_struct(simplified)}\n    name_dict = (\n        {\"name\": self.name.get_struct(simplified)} if self.name else {}\n    )\n    types_dict = (\n        {\"types\": self.types.get_struct(simplified)} if self.types else {}\n    )\n\n    value: DictDataTypesStruct = {\n        **cast(DictDataTypesStruct, body_dict),\n        **cast(DictDataTypesStruct, name_dict),\n        **cast(DictDataTypesStruct, types_dict),\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/exceptions/#astx.exceptions.CatchHandlerStmt.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/exceptions/#astx.exceptions.CatchHandlerStmt.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/exceptions/#astx.exceptions.ExceptionHandlerStmt","title":"ExceptionHandlerStmt","text":"<pre><code>ExceptionHandlerStmt(body: Block[AST], handlers: Iterable[CatchHandlerStmt] | ASTNodes[CatchHandlerStmt], finally_handler: Optional[FinallyHandlerStmt] = None, parent: Optional[ASTNodes] = None, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>StatementType</code></p> <p>AST class for try statements.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/exceptions.py</code> <pre><code>def __init__(\n    self,\n    body: Block[AST],\n    handlers: Iterable[CatchHandlerStmt] | ASTNodes[CatchHandlerStmt],\n    finally_handler: Optional[FinallyHandlerStmt] = None,\n    parent: Optional[ASTNodes] = None,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n) -&gt; None:\n    \"\"\"Initialize the instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.body = body\n\n    if isinstance(handlers, ASTNodes):\n        self.handlers = handlers\n    else:\n        self.handlers = ASTNodes[CatchHandlerStmt]()\n        for h in handlers:\n            self.handlers.append(h)\n\n    self.finally_handler = finally_handler\n\n    self.kind = ASTKind.ExceptionHandlerStmtKind\n</code></pre>"},{"location":"api/exceptions/#astx.exceptions.ExceptionHandlerStmt.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/exceptions.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    key = \"EXCEPTION-HANDLER-STMT\"\n\n    body_dict = {\"body\": self.body.get_struct(simplified)}\n    handlers_dict = {\"handlers\": self.handlers.get_struct(simplified)}\n    finally_dict = (\n        {\"finally_handler\": self.finally_handler.get_struct(simplified)}\n        if self.finally_handler\n        else {}\n    )\n\n    value: DictDataTypesStruct = {\n        **cast(DictDataTypesStruct, body_dict),\n        **cast(DictDataTypesStruct, handlers_dict),\n        **cast(DictDataTypesStruct, finally_dict),\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/exceptions/#astx.exceptions.ExceptionHandlerStmt.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/exceptions/#astx.exceptions.ExceptionHandlerStmt.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/exceptions/#astx.exceptions.FinallyHandlerStmt","title":"FinallyHandlerStmt","text":"<pre><code>FinallyHandlerStmt(body: Block[AST], parent: Optional[ASTNodes] = None, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>StatementType</code></p> <p>AST class for finally statements.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/exceptions.py</code> <pre><code>def __init__(\n    self,\n    body: Block[AST],\n    parent: Optional[ASTNodes] = None,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n) -&gt; None:\n    \"\"\"Initialize the instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.body = body\n    self.kind = ASTKind.FinallyHandlerStmtKind\n</code></pre>"},{"location":"api/exceptions/#astx.exceptions.FinallyHandlerStmt.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/exceptions.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    key = \"FINALLY-STMT\"\n    value: DictDataTypesStruct = {\"body\": self.body.get_struct(simplified)}\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/exceptions/#astx.exceptions.FinallyHandlerStmt.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/exceptions/#astx.exceptions.FinallyHandlerStmt.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/exceptions/#astx.exceptions.ThrowStmt","title":"ThrowStmt","text":"<pre><code>ThrowStmt(exception: Optional[Expr] = None, parent: Optional[ASTNodes] = None, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>StatementType</code></p> <p>AST class for throw statements.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/exceptions.py</code> <pre><code>def __init__(\n    self,\n    exception: Optional[Expr] = None,\n    parent: Optional[ASTNodes] = None,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n) -&gt; None:\n    \"\"\"Initialize the instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.exception = exception\n    self.kind = ASTKind.ThrowStmtKind\n</code></pre>"},{"location":"api/exceptions/#astx.exceptions.ThrowStmt.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/exceptions.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    key = \"THROW-STMT\"\n    value = self.exception.get_struct(simplified) if self.exception else \"\"\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/exceptions/#astx.exceptions.ThrowStmt.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/exceptions/#astx.exceptions.ThrowStmt.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/flows/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> flows","text":""},{"location":"api/flows/#astx.flows","title":"flows","text":"<p>Module for controle flow AST.</p> <p>Classes:</p> <ul> <li> <code>CaseStmt</code>           \u2013            <p>AST class for a case in a Switch statement.</p> </li> <li> <code>ForCountLoopExpr</code>           \u2013            <p>AST class for a simple Count-Controlled <code>For</code> Loop expression.</p> </li> <li> <code>ForCountLoopStmt</code>           \u2013            <p>AST class for a simple Count-Controlled <code>For</code> Loop statement.</p> </li> <li> <code>ForRangeLoopExpr</code>           \u2013            <p>AST class for <code>For</code> Range Expression.</p> </li> <li> <code>ForRangeLoopStmt</code>           \u2013            <p>AST class for <code>For</code> Range Statement.</p> </li> <li> <code>GotoStmt</code>           \u2013            <p>AST class for function <code>Goto</code> statement.</p> </li> <li> <code>IfExpr</code>           \u2013            <p>AST class for <code>if</code> expression.</p> </li> <li> <code>IfStmt</code>           \u2013            <p>AST class for <code>if</code> statement.</p> </li> <li> <code>SwitchStmt</code>           \u2013            <p>AST class for Switch statements based on Rust's match syntax.</p> </li> <li> <code>WhileExpr</code>           \u2013            <p>AST class for <code>while</code> expression.</p> </li> <li> <code>WhileStmt</code>           \u2013            <p>AST class for <code>while</code> statement.</p> </li> <li> <code>YieldExpr</code>           \u2013            <p>AST class for YieldExpr.</p> </li> </ul>"},{"location":"api/flows/#astx.flows.CaseStmt","title":"CaseStmt","text":"<pre><code>CaseStmt(body: Block, condition: Optional[Expr] = None, default: bool = False, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>StatementType</code></p> <p>AST class for a case in a Switch statement.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/flows.py</code> <pre><code>def __init__(\n    self,\n    body: Block,\n    condition: Optional[Expr] = None,\n    default: bool = False,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the CaseStmt instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.condition = condition\n    self.body = body\n    self.default = default\n    self.kind = ASTKind.CaseStmtKind\n\n    if self.default is False and self.condition is None:\n        raise ValueError(\n            \"Condition must be provided for non-default branches.\"\n        )\n\n    if self.default is True and self.condition is not None:\n        raise ValueError(\n            \"Condition must NOT be provided for default branches.\"\n        )\n</code></pre>"},{"location":"api/flows/#astx.flows.CaseStmt.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/flows.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    default_case = \"default\" if self.condition is None else \"\"\n    default_only = \"[default]\" if self.condition is None else \"\"\n    id_str = f\"{id(self)}\" if simplified else \"\"\n\n    key = (\n        f\"CASE-STMT[{id_str}{default_case}]\"\n        if simplified and self.condition is not None\n        else f\"CASE-STMT[{id_str}, {default_case}]\"\n        if simplified\n        else f\"CASE-STMT{default_only}\"\n    )\n\n    condition_dict = (\n        {}\n        if self.condition is None\n        else {\"condition\": self.condition.get_struct(simplified)}\n    )\n    value = {\n        **cast(DictDataTypesStruct, condition_dict),\n        \"body\": self.body.get_struct(simplified),\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/flows/#astx.flows.CaseStmt.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/flows/#astx.flows.CaseStmt.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/flows/#astx.flows.ForCountLoopExpr","title":"ForCountLoopExpr","text":"<pre><code>ForCountLoopExpr(initializer: InlineVariableDeclaration, condition: Expr, update: Expr, body: Block, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Expr</code></p> <p>AST class for a simple Count-Controlled <code>For</code> Loop expression.</p> <p>This is a very basic <code>for</code> loop, used by languages like C or C++.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/flows.py</code> <pre><code>def __init__(\n    self,\n    initializer: InlineVariableDeclaration,\n    condition: Expr,\n    update: Expr,\n    body: Block,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the ForLoopCountExpr instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.initializer = initializer\n    self.condition = condition\n    self.update = update\n    self.body = body\n    self.kind = ASTKind.ForCountLoopExprKind\n</code></pre>"},{"location":"api/flows/#astx.flows.ForCountLoopExpr.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/flows.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    for_init = {\"initialization\": self.initializer.get_struct(simplified)}\n    for_cond = {\"condition\": self.condition.get_struct(simplified)}\n    for_update = {\"update\": self.update.get_struct(simplified)}\n    for_body = self.body.get_struct(simplified)\n\n    key = \"FOR-COUNT-EXPR\"\n    value: ReprStruct = {\n        **cast(DictDataTypesStruct, for_init),\n        **cast(DictDataTypesStruct, for_cond),\n        **cast(DictDataTypesStruct, for_update),\n        **cast(DictDataTypesStruct, for_body),\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/flows/#astx.flows.ForCountLoopExpr.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/flows/#astx.flows.ForCountLoopExpr.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/flows/#astx.flows.ForCountLoopStmt","title":"ForCountLoopStmt","text":"<pre><code>ForCountLoopStmt(initializer: InlineVariableDeclaration, condition: Expr, update: Expr, body: Block, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>StatementType</code></p> <p>AST class for a simple Count-Controlled <code>For</code> Loop statement.</p> <p>This is a very basic <code>for</code> loop, used by languages like C or C++.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/flows.py</code> <pre><code>def __init__(\n    self,\n    initializer: InlineVariableDeclaration,\n    condition: Expr,\n    update: Expr,\n    body: Block,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the ForCountLoopStmt instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.initializer = initializer\n    self.condition = condition\n    self.update = update\n    self.body = body\n    self.kind = ASTKind.ForCountLoopStmtKind\n</code></pre>"},{"location":"api/flows/#astx.flows.ForCountLoopStmt.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/flows.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    for_init = {\"initialization\": self.initializer.get_struct(simplified)}\n    for_cond = {\"condition\": self.condition.get_struct(simplified)}\n    for_update = {\"update\": self.update.get_struct(simplified)}\n    for_body = self.body.get_struct(simplified)\n\n    key = \"FOR-COUNT-STMT\"\n    value: ReprStruct = {\n        **cast(DictDataTypesStruct, for_init),\n        **cast(DictDataTypesStruct, for_cond),\n        **cast(DictDataTypesStruct, for_update),\n        **cast(DictDataTypesStruct, for_body),\n    }\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/flows/#astx.flows.ForCountLoopStmt.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/flows/#astx.flows.ForCountLoopStmt.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/flows/#astx.flows.ForRangeLoopExpr","title":"ForRangeLoopExpr","text":"<pre><code>ForRangeLoopExpr(variable: InlineVariableDeclaration, start: Expr, end: Expr, step: Expr, body: Block, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Expr</code></p> <p>AST class for <code>For</code> Range Expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/flows.py</code> <pre><code>def __init__(\n    self,\n    variable: InlineVariableDeclaration,\n    start: Expr,\n    end: Expr,\n    step: Expr,\n    body: Block,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the ForRangeLoopExpr instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.variable = variable\n    self.start = start\n    self.end = end\n    self.step = step\n    self.body = body\n    self.kind = ASTKind.ForRangeLoopExprKind\n</code></pre>"},{"location":"api/flows/#astx.flows.ForRangeLoopExpr.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/flows.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    for_var = {\"var\": self.variable.get_struct(simplified)}\n    for_start = {\"start\": self.start.get_struct(simplified)}\n    for_end = {\"end\": self.end.get_struct(simplified)}\n    for_step = {\"step\": self.step.get_struct(simplified)}\n    for_body = self.body.get_struct(simplified)\n\n    key = \"FOR-RANGE-LOOP-EXPR\"\n    value: ReprStruct = {\n        **cast(DictDataTypesStruct, for_var),\n        **cast(DictDataTypesStruct, for_start),\n        **cast(DictDataTypesStruct, for_end),\n        **cast(DictDataTypesStruct, for_step),\n        **cast(DictDataTypesStruct, for_body),\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/flows/#astx.flows.ForRangeLoopExpr.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/flows/#astx.flows.ForRangeLoopExpr.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/flows/#astx.flows.ForRangeLoopStmt","title":"ForRangeLoopStmt","text":"<pre><code>ForRangeLoopStmt(variable: InlineVariableDeclaration, start: Expr, end: Expr, step: Expr, body: Block, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>StatementType</code></p> <p>AST class for <code>For</code> Range Statement.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/flows.py</code> <pre><code>def __init__(\n    self,\n    variable: InlineVariableDeclaration,\n    start: Expr,\n    end: Expr,\n    step: Expr,\n    body: Block,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the ForRangeLoopStmt instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.variable = variable\n    self.start = start\n    self.end = end\n    self.step = step\n    self.body = body\n    self.kind = ASTKind.ForRangeLoopStmtKind\n</code></pre>"},{"location":"api/flows/#astx.flows.ForRangeLoopStmt.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/flows.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    for_start = {\"start\": self.start.get_struct(simplified)}\n    for_end = {\"end\": self.end.get_struct(simplified)}\n    for_step = {\"step\": self.step.get_struct(simplified)}\n    for_body = self.body.get_struct(simplified)\n\n    key = \"FOR-RANGE-LOOP-STMT\"\n    value: ReprStruct = {\n        **cast(DictDataTypesStruct, for_start),\n        **cast(DictDataTypesStruct, for_end),\n        **cast(DictDataTypesStruct, for_step),\n        **cast(DictDataTypesStruct, for_body),\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/flows/#astx.flows.ForRangeLoopStmt.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/flows/#astx.flows.ForRangeLoopStmt.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/flows/#astx.flows.GotoStmt","title":"GotoStmt","text":"<pre><code>GotoStmt(label: Identifier, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>StatementType</code></p> <p>AST class for function <code>Goto</code> statement.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/flows.py</code> <pre><code>def __init__(\n    self,\n    label: Identifier,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the Return instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.label = label\n    self.kind = ASTKind.GotoStmtKind\n</code></pre>"},{"location":"api/flows/#astx.flows.GotoStmt.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/flows.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    key = f\"GOTO-STMT[{self.label.value}]\"\n    value: DictDataTypesStruct = {}\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/flows/#astx.flows.GotoStmt.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/flows/#astx.flows.GotoStmt.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/flows/#astx.flows.IfExpr","title":"IfExpr","text":"<pre><code>IfExpr(condition: Expr, then: Block, else_: Optional[Block] = None, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Expr</code></p> <p>AST class for <code>if</code> expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/flows.py</code> <pre><code>def __init__(\n    self,\n    condition: Expr,\n    then: Block,\n    else_: Optional[Block] = None,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the IfExpr instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.loc = loc\n    self.condition = condition\n    self.then = then\n    self.else_ = else_\n    self.kind = ASTKind.IfExprKind\n</code></pre>"},{"location":"api/flows/#astx.flows.IfExpr.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/flows.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    if_condition = {\"condition\": self.condition.get_struct(simplified)}\n    if_then = {\"then-block\": self.then.get_struct(simplified)}\n    if_else: ReprStruct = {}\n\n    if self.else_ is not None:\n        if_else = {\"else-block\": self.else_.get_struct(simplified)}\n\n    key = \"IF-EXPR\"\n    value: ReprStruct = {\n        **cast(DictDataTypesStruct, if_condition),\n        **cast(DictDataTypesStruct, if_then),\n        **cast(DictDataTypesStruct, if_else),\n    }\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/flows/#astx.flows.IfExpr.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/flows/#astx.flows.IfExpr.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/flows/#astx.flows.IfStmt","title":"IfStmt","text":"<pre><code>IfStmt(condition: Expr, then: Block, else_: Optional[Block] = None, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>StatementType</code></p> <p>AST class for <code>if</code> statement.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/flows.py</code> <pre><code>def __init__(\n    self,\n    condition: Expr,\n    then: Block,\n    else_: Optional[Block] = None,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the IfStmt instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.loc = loc\n    self.condition = condition\n    self.then = then\n    self.else_ = else_\n    self.kind = ASTKind.IfStmtKind\n</code></pre>"},{"location":"api/flows/#astx.flows.IfStmt.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/flows.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    if_condition = {\"condition\": self.condition.get_struct(simplified)}\n    if_then = {\"then-block\": self.then.get_struct(simplified)}\n    if_else: ReprStruct = {}\n\n    if self.else_ is not None:\n        if_else = {\"else-block\": self.else_.get_struct(simplified)}\n\n    key = \"IF-STMT\"\n    value: ReprStruct = {\n        **cast(DictDataTypesStruct, if_condition),\n        **cast(DictDataTypesStruct, if_then),\n        **cast(DictDataTypesStruct, if_else),\n    }\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/flows/#astx.flows.IfStmt.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/flows/#astx.flows.IfStmt.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/flows/#astx.flows.SwitchStmt","title":"SwitchStmt","text":"<pre><code>SwitchStmt(value: Expr, cases: list[CaseStmt] | ASTNodes[CaseStmt], loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>StatementType</code></p> <p>AST class for Switch statements based on Rust's match syntax.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/flows.py</code> <pre><code>def __init__(\n    self,\n    value: Expr,\n    cases: list[CaseStmt] | ASTNodes[CaseStmt],\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the SwitchStmt instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.value = value\n\n    if isinstance(cases, ASTNodes):\n        self.cases = cases\n    else:\n        self.cases = ASTNodes[CaseStmt]()\n        for case in cases:\n            self.cases.append(case)\n\n    self.kind = ASTKind.SwitchStmtKind\n</code></pre>"},{"location":"api/flows/#astx.flows.SwitchStmt.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/flows.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    key = \"SWITCH-STMT\"\n    case_dict = {}\n    for d in range(len(self.cases)):\n        case_dict[f\"case_{d}\"] = self.cases[d].get_struct(simplified)\n\n    value: DictDataTypesStruct = {\n        \"value\": self.value.get_struct(simplified),\n        **cast(DictDataTypesStruct, {\"cases\": case_dict}),\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/flows/#astx.flows.SwitchStmt.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/flows/#astx.flows.SwitchStmt.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/flows/#astx.flows.WhileExpr","title":"WhileExpr","text":"<pre><code>WhileExpr(condition: Expr, body: Block, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Expr</code></p> <p>AST class for <code>while</code> expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/flows.py</code> <pre><code>def __init__(\n    self,\n    condition: Expr,\n    body: Block,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the WhileExpr instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.condition = condition\n    self.body = body\n    self.kind = ASTKind.WhileExprKind\n</code></pre>"},{"location":"api/flows/#astx.flows.WhileExpr.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/flows.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    while_condition = self.condition.get_struct(simplified)\n    while_body = self.body.get_struct(simplified)\n\n    key = \"WHILE-EXPR\"\n    value: ReprStruct = {\n        **cast(DictDataTypesStruct, while_condition),\n        **cast(DictDataTypesStruct, while_body),\n    }\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/flows/#astx.flows.WhileExpr.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/flows/#astx.flows.WhileExpr.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/flows/#astx.flows.WhileStmt","title":"WhileStmt","text":"<pre><code>WhileStmt(condition: Expr, body: Block, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>StatementType</code></p> <p>AST class for <code>while</code> statement.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/flows.py</code> <pre><code>def __init__(\n    self,\n    condition: Expr,\n    body: Block,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the WhileStmt instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.condition = condition\n    self.body = body\n    self.kind = ASTKind.WhileStmtKind\n</code></pre>"},{"location":"api/flows/#astx.flows.WhileStmt.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/flows.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    while_condition = self.condition.get_struct(simplified)\n    while_body = self.body.get_struct(simplified)\n\n    key = \"WHILE-STMT\"\n    value: ReprStruct = {\n        **cast(DictDataTypesStruct, while_condition),\n        **cast(DictDataTypesStruct, while_body),\n    }\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/flows/#astx.flows.WhileStmt.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/flows/#astx.flows.WhileStmt.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/flows/#astx.flows.YieldExpr","title":"YieldExpr","text":"<pre><code>YieldExpr(value: Optional[Expr], loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Expr</code></p> <p>AST class for YieldExpr.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/flows.py</code> <pre><code>def __init__(\n    self,\n    value: Optional[Expr],\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the YieldExpr instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.value = value\n    self.kind = ASTKind.YieldExprKind\n</code></pre>"},{"location":"api/flows/#astx.flows.YieldExpr.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/flows.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    key = \"YIELD-EXPR\"\n    value = {} if self.value is None else self.value.get_struct(simplified)\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/flows/#astx.flows.YieldExpr.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/flows/#astx.flows.YieldExpr.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/mixes/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> mixes","text":""},{"location":"api/mixes/#astx.mixes","title":"mixes","text":"<p>Module for mixing ASTx types from different modules.</p>"},{"location":"api/modifiers/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> modifiers","text":""},{"location":"api/modifiers/#astx.modifiers","title":"modifiers","text":"<p>Modifications for ASTx, such as visibility, scope, etc.</p> <p>Classes:</p> <ul> <li> <code>MutabilityKind</code>           \u2013            <p>Definition for different kind of mutability.</p> </li> <li> <code>ScopeKind</code>           \u2013            <p>Definition for different kind of scopes.</p> </li> <li> <code>VisibilityKind</code>           \u2013            <p>Definition of different kind of visibility.</p> </li> </ul>"},{"location":"api/modifiers/#astx.modifiers.MutabilityKind","title":"MutabilityKind","text":"<p>               Bases: <code>Enum</code></p> <p>Definition for different kind of mutability.</p>"},{"location":"api/modifiers/#astx.modifiers.ScopeKind","title":"ScopeKind","text":"<p>               Bases: <code>Enum</code></p> <p>Definition for different kind of scopes.</p>"},{"location":"api/modifiers/#astx.modifiers.VisibilityKind","title":"VisibilityKind","text":"<p>               Bases: <code>Enum</code></p> <p>Definition of different kind of visibility.</p>"},{"location":"api/operators/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> operators","text":""},{"location":"api/operators/#astx.operators","title":"operators","text":"<p>ASTx classes for the operators.</p> <p>Classes:</p> <ul> <li> <code>AssignmentExpr</code>           \u2013            <p>AST class for assignment expressions.</p> </li> <li> <code>VariableAssignment</code>           \u2013            <p>AST class for variable declaration.</p> </li> <li> <code>WalrusOp</code>           \u2013            <p>AST class for the Walrus (assignment expression) operator.</p> </li> </ul>"},{"location":"api/operators/#astx.operators.AssignmentExpr","title":"AssignmentExpr","text":"<pre><code>AssignmentExpr(targets: Iterable[Expr] | ASTNodes[Expr], value: Expr, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Expr</code></p> <p>AST class for assignment expressions.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/operators.py</code> <pre><code>def __init__(\n    self,\n    targets: Iterable[Expr] | ASTNodes[Expr],\n    value: Expr,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc=loc, parent=parent)\n\n    if isinstance(targets, ASTNodes):\n        self.targets = targets\n    else:\n        self.targets = ASTNodes()\n        for target in targets:\n            self.targets.append(target)\n\n    self.value = value\n    self.kind = ASTKind.AssignmentExprKind\n</code></pre>"},{"location":"api/operators/#astx.operators.AssignmentExpr.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/operators.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    key = \"ASSIGNMENT-EXPR\"\n    targets_dict = {\"targets\": self.targets.get_struct(simplified)}\n    value_dict = {\"value\": self.value.get_struct(simplified)}\n\n    value = {\n        **cast(DictDataTypesStruct, targets_dict),\n        **cast(DictDataTypesStruct, value_dict),\n    }\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/operators/#astx.operators.AssignmentExpr.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/operators/#astx.operators.AssignmentExpr.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/operators/#astx.operators.VariableAssignment","title":"VariableAssignment","text":"<pre><code>VariableAssignment(name: str, value: Expr, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>StatementType</code></p> <p>AST class for variable declaration.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/operators.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    value: Expr,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the VarExprAST instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.loc = loc\n    self.name = name\n    self.value = value\n    self.kind = ASTKind.VariableAssignmentKind\n</code></pre>"},{"location":"api/operators/#astx.operators.VariableAssignment.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/operators.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    key = str(self)\n    value = self.value.get_struct(simplified)\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/operators/#astx.operators.VariableAssignment.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/operators/#astx.operators.VariableAssignment.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/operators/#astx.operators.WalrusOp","title":"WalrusOp","text":"<pre><code>WalrusOp(lhs: Variable, rhs: DataType, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>DataType</code></p> <p>AST class for the Walrus (assignment expression) operator.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/operators.py</code> <pre><code>def __init__(\n    self,\n    lhs: Variable,\n    rhs: DataType,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n) -&gt; None:\n    \"\"\"Initialize the WalrusOp instance.\"\"\"\n    super().__init__(loc=loc)\n    self.lhs = lhs\n    self.rhs = rhs\n    self.kind = ASTKind.WalrusOpKind\n</code></pre>"},{"location":"api/operators/#astx.operators.WalrusOp.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure that represents the object.</p> Source code in <code>src/astx/operators.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure that represents the object.\"\"\"\n    key = \"WALRUS[:=]\"\n    lhs = {\"lhs\": self.lhs.get_struct(simplified)}\n    rhs = {\"rhs\": self.rhs.get_struct(simplified)}\n\n    content: ReprStruct = {**lhs, **rhs}\n    return self._prepare_struct(key, content, simplified)\n</code></pre>"},{"location":"api/operators/#astx.operators.WalrusOp.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/operators/#astx.operators.WalrusOp.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/packages/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> packages","text":""},{"location":"api/packages/#astx.packages","title":"packages","text":"<p>Define ASTx for more broader scope.</p> <p>Classes:</p> <ul> <li> <code>AliasExpr</code>           \u2013            <p>Represents an alias in an import statement.</p> </li> <li> <code>ImportExpr</code>           \u2013            <p>Represents an import operation as an expression.</p> </li> <li> <code>ImportFromExpr</code>           \u2013            <p>Represents a 'from ... import ...' operation as an expression.</p> </li> <li> <code>ImportFromStmt</code>           \u2013            <p>Represents an import-from statement.</p> </li> <li> <code>ImportStmt</code>           \u2013            <p>Represents an import statement.</p> </li> <li> <code>Module</code>           \u2013            <p>AST main expression class.</p> </li> <li> <code>Package</code>           \u2013            <p>AST class for Package.</p> </li> <li> <code>Program</code>           \u2013            <p>AST class for Program.</p> </li> <li> <code>Target</code>           \u2013            <p>Define the Architecture target for the program.</p> </li> </ul>"},{"location":"api/packages/#astx.packages.AliasExpr","title":"AliasExpr","text":"<pre><code>AliasExpr(name: str, asname: str = '', loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Expr</code></p> <p>Represents an alias in an import statement.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the alias.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/packages.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    asname: str = \"\",\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc=loc, parent=parent)\n    self.name = name\n    self.asname = asname\n    self.kind = ASTKind.AliasExprKind\n</code></pre>"},{"location":"api/packages/#astx.packages.AliasExpr.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the alias.</p> Source code in <code>src/astx/packages.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the alias.\"\"\"\n    str_asname = f\", {self.asname}\" if self.asname else \"\"\n    str_name_asname = f\"[{self.name}{str_asname}]\"\n    key = f\"Alias {str_name_asname}\"\n    value = \"\"\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/packages/#astx.packages.AliasExpr.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/packages/#astx.packages.AliasExpr.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/packages/#astx.packages.ImportExpr","title":"ImportExpr","text":"<pre><code>ImportExpr(names: list[AliasExpr], loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Expr</code></p> <p>Represents an import operation as an expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the import expression.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/packages.py</code> <pre><code>def __init__(\n    self,\n    names: list[AliasExpr],\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc=loc, parent=parent)\n    self.names = names\n    self.kind = ASTKind.ImportExprKind\n</code></pre>"},{"location":"api/packages/#astx.packages.ImportExpr.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the import expression.</p> Source code in <code>src/astx/packages.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the import expression.\"\"\"\n    key = \"ImportExpr\"\n    value = cast(\n        ReprStruct, [name.get_struct(simplified) for name in self.names]\n    )\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/packages/#astx.packages.ImportExpr.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/packages/#astx.packages.ImportExpr.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/packages/#astx.packages.ImportFromExpr","title":"ImportFromExpr","text":"<pre><code>ImportFromExpr(names: list[AliasExpr], module: str = '', level: int = 0, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Expr</code></p> <p>Represents a 'from ... import ...' operation as an expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the import-from expression.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/packages.py</code> <pre><code>def __init__(\n    self,\n    names: list[AliasExpr],\n    module: str = \"\",\n    level: int = 0,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc=loc, parent=parent)\n    self.names = names\n    self.module = module\n    self.level = level\n    self.kind = ASTKind.ImportFromExprKind\n</code></pre>"},{"location":"api/packages/#astx.packages.ImportFromExpr.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the import-from expression.</p> Source code in <code>src/astx/packages.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the import-from expression.\"\"\"\n    level_dots = \".\" * self.level\n    module_str = (\n        f\"{level_dots}{self.module}\" if self.module else level_dots\n    )\n\n    key = f\"ImportFromExpr [{module_str}]\"\n    value = cast(\n        ReprStruct, [name.get_struct(simplified) for name in self.names]\n    )\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/packages/#astx.packages.ImportFromExpr.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/packages/#astx.packages.ImportFromExpr.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/packages/#astx.packages.ImportFromStmt","title":"ImportFromStmt","text":"<pre><code>ImportFromStmt(names: list[AliasExpr], module: str = '', level: int = 0, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>StatementType</code></p> <p>Represents an import-from statement.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the import-from statement.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/packages.py</code> <pre><code>def __init__(\n    self,\n    names: list[AliasExpr],\n    module: str = \"\",\n    level: int = 0,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc=loc, parent=parent)\n    self.module = module\n    self.names = names\n    self.level = level\n    self.kind = ASTKind.ImportFromStmtKind\n</code></pre>"},{"location":"api/packages/#astx.packages.ImportFromStmt.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the import-from statement.</p> Source code in <code>src/astx/packages.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the import-from statement.\"\"\"\n    level_dots = \".\" * self.level\n    module_str = (\n        f\"{level_dots}{self.module}\" if self.module else level_dots\n    )\n\n    key = f\"ImportFromStmt [{module_str}]\"\n    value = cast(\n        ReprStruct, [name.get_struct(simplified) for name in self.names]\n    )\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/packages/#astx.packages.ImportFromStmt.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/packages/#astx.packages.ImportFromStmt.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/packages/#astx.packages.ImportStmt","title":"ImportStmt","text":"<pre><code>ImportStmt(names: list[AliasExpr], loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>StatementType</code></p> <p>Represents an import statement.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the import statement.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/packages.py</code> <pre><code>def __init__(\n    self,\n    names: list[AliasExpr],\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc=loc, parent=parent)\n    self.names = names\n    self.kind = ASTKind.ImportStmtKind\n</code></pre>"},{"location":"api/packages/#astx.packages.ImportStmt.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the import statement.</p> Source code in <code>src/astx/packages.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the import statement.\"\"\"\n    key = \"ImportStmt\"\n    value = cast(\n        ReprStruct, [name.get_struct(simplified) for name in self.names]\n    )\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/packages/#astx.packages.ImportStmt.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/packages/#astx.packages.ImportStmt.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/packages/#astx.packages.Module","title":"Module","text":"<pre><code>Module(name: str = 'main', loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Block</code></p> <p>AST main expression class.</p> <p>Methods:</p> <ul> <li> <code>append</code>             \u2013              <p>Append a new node to the stack.</p> </li> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>block</code>               (<code>list[AST]</code>)           \u2013            <p>Define an alias for self.nodes.</p> </li> </ul> Source code in <code>src/astx/packages.py</code> <pre><code>def __init__(\n    self,\n    name: str = \"main\",\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n) -&gt; None:\n    \"\"\"Initialize the AST instance.\"\"\"\n    super().__init__(name=name, loc=loc)\n    self.kind = ASTKind.ModuleKind\n</code></pre>"},{"location":"api/packages/#astx.packages.Module.block","title":"block  <code>property</code>","text":"<pre><code>block: list[AST]\n</code></pre> <p>Define an alias for self.nodes.</p>"},{"location":"api/packages/#astx.packages.Module.append","title":"append","text":"<pre><code>append(value: ASTType) -&gt; None\n</code></pre> <p>Append a new node to the stack.</p> Source code in <code>src/astx/base.py</code> <pre><code>def append(self, value: ASTType) -&gt; None:\n    \"\"\"Append a new node to the stack.\"\"\"\n    self.nodes.append(value)\n</code></pre>"},{"location":"api/packages/#astx.packages.Module.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/packages.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    block_node = []\n\n    for node in self.nodes:\n        block_node.append(node.get_struct(simplified))\n\n    key = f\"MODULE[{self.name}]\"\n    value = cast(ReprStruct, block_node)\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/packages/#astx.packages.Module.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/packages/#astx.packages.Module.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/packages/#astx.packages.Package","title":"Package","text":"<pre><code>Package(name: str = 'main', modules: list[Module] = [], packages: list[Package] = [], loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>ASTNodes</code></p> <p>AST class for Package.</p> <p>Methods:</p> <ul> <li> <code>append</code>             \u2013              <p>Append a new node to the stack.</p> </li> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/packages.py</code> <pre><code>def __init__(\n    self,\n    name: str = \"main\",\n    modules: list[Module] = [],\n    packages: list[Package] = [],\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n) -&gt; None:\n    \"\"\"Initialize the AST instance.\"\"\"\n    super().__init__(loc=loc)\n    self.name = name\n    self.modules = copy.deepcopy(modules)\n    self.packages = copy.deepcopy(packages)\n</code></pre>"},{"location":"api/packages/#astx.packages.Package.append","title":"append","text":"<pre><code>append(value: ASTType) -&gt; None\n</code></pre> <p>Append a new node to the stack.</p> Source code in <code>src/astx/base.py</code> <pre><code>def append(self, value: ASTType) -&gt; None:\n    \"\"\"Append a new node to the stack.\"\"\"\n    self.nodes.append(value)\n</code></pre>"},{"location":"api/packages/#astx.packages.Package.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/packages.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    packages = []\n    modules = []\n\n    for package in self.packages:\n        packages.append(package.get_struct(simplified))\n\n    for module in self.modules:\n        modules.append(module.get_struct(simplified))\n\n    key = str(self)\n    value = cast(\n        ReprStruct,\n        {\n            \"modules\": modules,\n            \"packages\": packages,\n        },\n    )\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/packages/#astx.packages.Package.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/packages/#astx.packages.Package.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/packages/#astx.packages.Program","title":"Program","text":"<pre><code>Program(name: str = 'main', target: Target = Target('', ''), modules: list[Module] = [], packages: list[Package] = [], loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Package</code></p> <p>AST class for Program.</p> <p>Methods:</p> <ul> <li> <code>append</code>             \u2013              <p>Append a new node to the stack.</p> </li> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/packages.py</code> <pre><code>def __init__(\n    self,\n    name: str = \"main\",\n    target: Target = Target(\"\", \"\"),\n    modules: list[Module] = [],\n    packages: list[Package] = [],\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n) -&gt; None:\n    \"\"\"Initialize the AST instance.\"\"\"\n    super().__init__(\n        name=name, modules=modules, packages=packages, loc=loc\n    )\n    self.target = copy.deepcopy(target)\n</code></pre>"},{"location":"api/packages/#astx.packages.Program.append","title":"append","text":"<pre><code>append(value: ASTType) -&gt; None\n</code></pre> <p>Append a new node to the stack.</p> Source code in <code>src/astx/base.py</code> <pre><code>def append(self, value: ASTType) -&gt; None:\n    \"\"\"Append a new node to the stack.\"\"\"\n    self.nodes.append(value)\n</code></pre>"},{"location":"api/packages/#astx.packages.Program.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/packages.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    packages = []\n    modules = []\n\n    for package in self.packages:\n        packages.append(package.get_struct(simplified))\n\n    for module in self.modules:\n        modules.append(module.get_struct(simplified))\n\n    key = str(self)\n    value = cast(\n        ReprStruct,\n        {\n            \"modules\": modules,\n            \"packages\": packages,\n        },\n    )\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/packages/#astx.packages.Program.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/packages/#astx.packages.Program.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/packages/#astx.packages.Target","title":"Target","text":"<pre><code>Target(datalayout: str, triple: str)\n</code></pre> <p>               Bases: <code>Expr</code></p> <p>Define the Architecture target for the program.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/packages.py</code> <pre><code>def __init__(self, datalayout: str, triple: str) -&gt; None:\n    \"\"\"Initialize the AST instance.\"\"\"\n    super().__init__()\n    self.datalayout = datalayout\n    self.triple = triple\n</code></pre>"},{"location":"api/packages/#astx.packages.Target.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/packages.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    key = \"TARGET\"\n    value = f\"{self.datalayout}, {self.triple}\"\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/packages/#astx.packages.Target.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/packages/#astx.packages.Target.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/subscript/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> subscript","text":""},{"location":"api/subscript/#astx.subscript","title":"subscript","text":"<p>Module for subscripts definitions/declarations.</p> <p>Classes:</p> <ul> <li> <code>SubscriptExpr</code>           \u2013            <p>AST class for subscript expressions.</p> </li> </ul>"},{"location":"api/subscript/#astx.subscript.SubscriptExpr","title":"SubscriptExpr","text":"<pre><code>SubscriptExpr(value: Expr, index: Optional[Expr] = None, lower: Optional[Expr] = None, upper: Optional[Expr] = None, step: Optional[Expr] = None, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Expr</code></p> <p>AST class for subscript expressions.</p> <p>Parameters:</p> <ul> <li> <code>value</code>               (<code>Expr</code>)           \u2013            <p>The expression representing the object being indexed (e.g.,</p> </li> <li> <code>an</code>           \u2013            </li> <li> <code>index</code>               (<code>Optional[Expr]</code>, default:                   <code>None</code> )           \u2013            <p>The index of the variable.</p> </li> <li> <code>lower</code>               (<code>Optional[Expr]</code>, default:                   <code>None</code> )           \u2013            <p>The lower bound of the slice (inclusive).</p> </li> <li> <code>upper</code>               (<code>Optional[Expr]</code>, default:                   <code>None</code> )           \u2013            <p>The upper bound of the slice (exclusive).</p> </li> <li> <code>step</code>               (<code>Optional[Expr]</code>, default:                   <code>None</code> )           \u2013            <p>The step size for the slice.</p> </li> <li> <code>loc</code>               (<code>SourceLocation</code>, default:                   <code>NO_SOURCE_LOCATION</code> )           \u2013            <p>The source location of the expression.</p> </li> <li> <code>parent</code>               (<code>Optional[ASTNodes]</code>, default:                   <code>None</code> )           \u2013            <p>The parent AST node.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/subscript.py</code> <pre><code>def __init__(\n    self,\n    value: Expr,\n    index: Optional[Expr] = None,\n    lower: Optional[Expr] = None,\n    upper: Optional[Expr] = None,\n    step: Optional[Expr] = None,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"\n    Initialize the SubscriptExpr instance.\n\n    Parameters\n    ----------\n    value: Expr\n        The expression representing the object being indexed (e.g.,\n    an array or list).\n    index (optional): Expr\n        The index of the variable.\n    lower (optional): Expr\n        The lower bound of the slice (inclusive).\n    upper (optional): Expr\n        The upper bound of the slice (exclusive).\n    step (optional): Expr\n        The step size for the slice.\n    loc: SourceLocation\n        The source location of the expression.\n    parent (optional): ASTNodes\n        The parent AST node.\n    \"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.value: Expr = value if value is not None else LiteralNone()\n    self.index: Expr = index if index is not None else LiteralNone()\n    self.lower: Expr = lower if lower is not None else LiteralNone()\n    self.upper: Expr = upper if upper is not None else LiteralNone()\n    self.step: Expr = step if step is not None else LiteralNone()\n    self.kind = ASTKind.SubscriptExprKind\n</code></pre>"},{"location":"api/subscript/#astx.subscript.SubscriptExpr.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/subscript.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    key = \"SubscriptExpr\"\n    value = self._get_struct_wrapper(simplified)\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/subscript/#astx.subscript.SubscriptExpr.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/subscript/#astx.subscript.SubscriptExpr.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/symbol_table/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> symbol_table","text":""},{"location":"api/symbol_table/#astx.symbol_table","title":"symbol_table","text":"<p>Symbol Table module for ASTx.</p> <p>The <code>SymbolTable</code> class offered here allows the definition of scopes, so the variable or function would be available in specifics scopes.</p> <p>Classes:</p> <ul> <li> <code>Scope</code>           \u2013            <p>Organize the ASTx objects according to the scope.</p> </li> <li> <code>ScopeNode</code>           \u2013            <p>Scope node organize the scope in different levels in the stack.</p> </li> <li> <code>ScopeNodeBase</code>           \u2013            <p>ScopeNodeBase is the base used for the nodes (levels) in the scope.</p> </li> <li> <code>SymbolTable</code>           \u2013            <p>Symbol Table for ASTx.</p> </li> </ul>"},{"location":"api/symbol_table/#astx.symbol_table.Scope","title":"Scope","text":"<pre><code>Scope(scope_node_class: Type[ScopeNodeBase] = ScopeNode)\n</code></pre> <p>Organize the ASTx objects according to the scope.</p> <p>Methods:</p> <ul> <li> <code>add</code>             \u2013              <p>Add a new node in the scope.</p> </li> <li> <code>destroy</code>             \u2013              <p>Destroy the current scope.</p> </li> <li> <code>get_first</code>             \u2013              <p>Get the first node in the scope.</p> </li> <li> <code>get_last</code>             \u2013              <p>Get the latest node in the scope.</p> </li> <li> <code>set_default_parent</code>             \u2013              <p>Set default parent for the current scope.</p> </li> </ul> Source code in <code>src/astx/symbol_table.py</code> <pre><code>def __init__(\n    self,\n    scope_node_class: Type[ScopeNodeBase] = ScopeNode,\n) -&gt; None:\n    \"\"\"Initialize the scope.\"\"\"\n    self.nodes: dict[int, ScopeNodeBase] = {}\n    self.current = None\n    self.previous = None\n    self.scope_node_class = scope_node_class\n\n    self.add(\"root\")\n\n    self.scope_node_class.default_parent = self.current\n</code></pre>"},{"location":"api/symbol_table/#astx.symbol_table.Scope.add","title":"add","text":"<pre><code>add(name: str, parent: Optional[ScopeNodeBase] = None, change_current: bool = True) -&gt; ScopeNodeBase\n</code></pre> <p>Add a new node in the scope.</p> Source code in <code>src/astx/symbol_table.py</code> <pre><code>def add(\n    self,\n    name: str,\n    parent: Optional[ScopeNodeBase] = None,\n    change_current: bool = True,\n) -&gt; ScopeNodeBase:\n    \"\"\"Add a new node in the scope.\"\"\"\n    node = self.scope_node_class(name, parent)\n\n    # The use of id(node) as keys in the nodes dictionary is generally\n    # fine, but be aware that this approach may lead to potential issues\n    # if the id() of a node is reused after its destruction. It's #\n    # unlikely to happen in the current code, but it's something to be\n    # aware of.\n    self.nodes[id(node)] = node\n\n    if len(self.nodes) == 1 or change_current:\n        self.previous = self.current\n        self.current = self.nodes[id(node)]\n\n    return node\n</code></pre>"},{"location":"api/symbol_table/#astx.symbol_table.Scope.destroy","title":"destroy","text":"<pre><code>destroy(node: ScopeNodeBase) -&gt; None\n</code></pre> <p>Destroy the current scope.</p> Source code in <code>src/astx/symbol_table.py</code> <pre><code>def destroy(self, node: ScopeNodeBase) -&gt; None:\n    \"\"\"Destroy the current scope.\"\"\"\n    del self.nodes[id(node)]\n    self.current = self.previous\n    self.previous = None\n</code></pre>"},{"location":"api/symbol_table/#astx.symbol_table.Scope.get_first","title":"get_first","text":"<pre><code>get_first() -&gt; ScopeNodeBase\n</code></pre> <p>Get the first node in the scope.</p> Source code in <code>src/astx/symbol_table.py</code> <pre><code>def get_first(self) -&gt; ScopeNodeBase:\n    \"\"\"Get the first node in the scope.\"\"\"\n    node_id = next(iter(self.nodes.keys()))\n    return self.nodes[node_id]\n</code></pre>"},{"location":"api/symbol_table/#astx.symbol_table.Scope.get_last","title":"get_last","text":"<pre><code>get_last() -&gt; ScopeNodeBase\n</code></pre> <p>Get the latest node in the scope.</p> Source code in <code>src/astx/symbol_table.py</code> <pre><code>def get_last(self) -&gt; ScopeNodeBase:\n    \"\"\"Get the latest node in the scope.\"\"\"\n    node_id = list(self.nodes.keys())[-1]\n    return self.nodes[node_id]\n</code></pre>"},{"location":"api/symbol_table/#astx.symbol_table.Scope.set_default_parent","title":"set_default_parent","text":"<pre><code>set_default_parent(node: ScopeNodeBase) -&gt; None\n</code></pre> <p>Set default parent for the current scope.</p> Source code in <code>src/astx/symbol_table.py</code> <pre><code>def set_default_parent(self, node: ScopeNodeBase) -&gt; None:\n    \"\"\"Set default parent for the current scope.\"\"\"\n    self.scope_node_class.default_parent = node\n</code></pre>"},{"location":"api/symbol_table/#astx.symbol_table.ScopeNode","title":"ScopeNode","text":"<pre><code>ScopeNode(name: str, parent: Optional[ScopeNodeBase] = None)\n</code></pre> <p>               Bases: <code>ScopeNodeBase</code></p> <p>Scope node organize the scope in different levels in the stack.</p> Source code in <code>src/astx/symbol_table.py</code> <pre><code>def __init__(\n    self, name: str, parent: Optional[ScopeNodeBase] = None\n) -&gt; None:\n    \"\"\"Initialize ScopeNodeBase.\"\"\"\n    self.parent: Optional[ScopeNodeBase] = (\n        parent or ScopeNodeBase.default_parent\n    )\n    self.name: str = name\n    self.named_expr: dict[str, NamedExpr] = {}\n</code></pre>"},{"location":"api/symbol_table/#astx.symbol_table.ScopeNodeBase","title":"ScopeNodeBase","text":"<pre><code>ScopeNodeBase(name: str, parent: Optional[ScopeNodeBase] = None)\n</code></pre> <p>ScopeNodeBase is the base used for the nodes (levels) in the scope.</p> Source code in <code>src/astx/symbol_table.py</code> <pre><code>def __init__(\n    self, name: str, parent: Optional[ScopeNodeBase] = None\n) -&gt; None:\n    \"\"\"Initialize ScopeNodeBase.\"\"\"\n    self.parent: Optional[ScopeNodeBase] = (\n        parent or ScopeNodeBase.default_parent\n    )\n    self.name: str = name\n    self.named_expr: dict[str, NamedExpr] = {}\n</code></pre>"},{"location":"api/symbol_table/#astx.symbol_table.SymbolTable","title":"SymbolTable","text":"<pre><code>SymbolTable()\n</code></pre> <p>Symbol Table for ASTx.</p> <p>Methods:</p> <ul> <li> <code>define</code>             \u2013              <p>Define a new named expression inside the scoped stack.</p> </li> <li> <code>lookup</code>             \u2013              <p>Get a named expression from the scope stack.</p> </li> <li> <code>update</code>             \u2013              <p>Update the expression on the SymbolTable.</p> </li> </ul> Source code in <code>src/astx/symbol_table.py</code> <pre><code>def __init__(self) -&gt; None:\n    self.scopes = Scope()\n</code></pre>"},{"location":"api/symbol_table/#astx.symbol_table.SymbolTable.define","title":"define","text":"<pre><code>define(expr: NamedExpr) -&gt; None\n</code></pre> <p>Define a new named expression inside the scoped stack.</p> Source code in <code>src/astx/symbol_table.py</code> <pre><code>def define(self, expr: NamedExpr) -&gt; None:\n    \"\"\"Define a new named expression inside the scoped stack.\"\"\"\n    if not self.scopes.current:\n        raise Exception(\"SymbolTable: No scope active.\")\n    self.scopes.current.named_expr[expr.name] = expr\n</code></pre>"},{"location":"api/symbol_table/#astx.symbol_table.SymbolTable.lookup","title":"lookup","text":"<pre><code>lookup(name: str) -&gt; NamedExpr\n</code></pre> <p>Get a named expression from the scope stack.</p> Source code in <code>src/astx/symbol_table.py</code> <pre><code>def lookup(self, name: str) -&gt; NamedExpr:\n    \"\"\"Get a named expression from the scope stack.\"\"\"\n    scope = self.scopes.current\n    while scope is not None:\n        if name in scope.named_expr:\n            return scope.named_expr[name]\n        scope = scope.parent\n    raise NameError(f\"Name '{name}' is not defined\")\n</code></pre>"},{"location":"api/symbol_table/#astx.symbol_table.SymbolTable.update","title":"update","text":"<pre><code>update(expr: NamedExpr) -&gt; None\n</code></pre> <p>Update the expression on the SymbolTable.</p> <p>It is useful mainly for updating the comment of the expression.</p> Source code in <code>src/astx/symbol_table.py</code> <pre><code>def update(self, expr: NamedExpr) -&gt; None:\n    \"\"\"\n    Update the expression on the SymbolTable.\n\n    It is useful mainly for updating the comment of the expression.\n    \"\"\"\n    if not self.scopes.current:\n        raise Exception(\"SymbolTable: No scope active.\")\n    if expr.name not in self.scopes.current.named_expr:\n        raise Exception(\"This name doesn't exist in the SymbolTable.\")\n    self.scopes.current.named_expr[expr.name] = expr\n</code></pre>"},{"location":"api/variables/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> variables","text":""},{"location":"api/variables/#astx.variables","title":"variables","text":"<p>Module for Variables.</p> <p>Classes:</p> <ul> <li> <code>InlineVariableDeclaration</code>           \u2013            <p>AST class for inline variable declaration expression.</p> </li> <li> <code>Variable</code>           \u2013            <p>AST class for the variable usage.</p> </li> <li> <code>VariableDeclaration</code>           \u2013            <p>AST class for variable declaration.</p> </li> </ul>"},{"location":"api/variables/#astx.variables.InlineVariableDeclaration","title":"InlineVariableDeclaration","text":"<pre><code>InlineVariableDeclaration(name: str, type_: DataType, mutability: MutabilityKind = constant, visibility: VisibilityKind = public, scope: ScopeKind = local, value: Expr = UNDEFINED, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Expr</code></p> <p>AST class for inline variable declaration expression.</p> <p>Can be used in expressions like for loops.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/variables.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    type_: DataType,\n    mutability: MutabilityKind = MutabilityKind.constant,\n    visibility: VisibilityKind = VisibilityKind.public,\n    scope: ScopeKind = ScopeKind.local,\n    value: Expr = UNDEFINED,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the VarExprAST instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.mutability = mutability\n    self.scope = scope\n    self.visibility = visibility\n    self.name = name\n    self.type_ = type_\n    self.value = value\n    self.kind = ASTKind.VarDeclKind\n</code></pre>"},{"location":"api/variables/#astx.variables.InlineVariableDeclaration.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/variables.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    key = str(self)\n    value = self.value.get_struct(simplified)\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/variables/#astx.variables.InlineVariableDeclaration.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/variables/#astx.variables.InlineVariableDeclaration.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/variables/#astx.variables.Variable","title":"Variable","text":"<pre><code>Variable(name: str, type_: DataType = AnyType(), loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>DataTypeOps</code></p> <p>AST class for the variable usage.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/variables.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    type_: DataType = AnyType(),\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the Variable instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.name = name\n    self.type_ = type_\n</code></pre>"},{"location":"api/variables/#astx.variables.Variable.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/variables.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    key = f\"Variable[{self.name}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/variables/#astx.variables.Variable.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/variables/#astx.variables.Variable.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/variables/#astx.variables.VariableDeclaration","title":"VariableDeclaration","text":"<pre><code>VariableDeclaration(name: str, type_: DataType, mutability: MutabilityKind = constant, visibility: VisibilityKind = public, scope: ScopeKind = local, value: Expr = UNDEFINED, parent: Optional[ASTNodes] = None, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>StatementType</code></p> <p>AST class for variable declaration.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/variables.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    type_: DataType,\n    mutability: MutabilityKind = MutabilityKind.constant,\n    visibility: VisibilityKind = VisibilityKind.public,\n    scope: ScopeKind = ScopeKind.local,\n    value: Expr = UNDEFINED,\n    parent: Optional[ASTNodes] = None,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n) -&gt; None:\n    \"\"\"Initialize the VarExprAST instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.mutability = mutability\n    self.scope = scope\n    self.visibility = visibility\n    self.name = name\n    self.type_ = type_\n    self.value = value\n    self.kind = ASTKind.VarDeclKind\n</code></pre>"},{"location":"api/variables/#astx.variables.VariableDeclaration.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/variables.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    key = str(self)\n    value = self.value.get_struct(simplified)\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/variables/#astx.variables.VariableDeclaration.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/variables/#astx.variables.VariableDeclaration.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/viz/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> viz","text":""},{"location":"api/viz/#astx.viz","title":"viz","text":"<p>AST graphic representation Module.</p> <p>This module provides utilities for converting an Abstract Syntax Tree (AST), represented as a nested Python dictionary, to a Graphviz dot graph which can be displayed inline in a Jupyter notebook, or as an ascii representation directly in the console.</p> <p>Functions:</p> <ul> <li> <code>get_hash_labels</code>             \u2013              <p>Get hash and labels from Digraph for ascii AST representation.</p> </li> <li> <code>graph_to_ascii</code>             \u2013              <p>Wrap function for graph_to_ascii.</p> </li> <li> <code>graph_to_ascii_overload</code>             \u2013              <p>Overload asciinet.graph_to_ascii function.</p> </li> <li> <code>make_node_box</code>             \u2013              <p>Make ascii representation for one-node ASTs.</p> </li> <li> <code>traverse_ast_ascii</code>             \u2013              <p>Traverse the AST and build a Graphviz graph for ascii representation.</p> </li> <li> <code>traverse_ast_to_graphviz</code>             \u2013              <p>Traverse the AST and build a Graphviz graph for png representation.</p> </li> <li> <code>visualize</code>             \u2013              <p>Visualize the abstract syntax tree (AST) using graphviz.</p> </li> </ul>"},{"location":"api/viz/#astx.viz.get_hash_labels","title":"get_hash_labels","text":"<pre><code>get_hash_labels(graph: Digraph) -&gt; tuple[list[str], list[tuple[str, str]], list[tuple[str, str]]]\n</code></pre> <p>Get hash and labels from Digraph for ascii AST representation.</p> <p>Parameters:</p> <ul> <li> <code>graph</code>               (<code>Digraph</code>)           \u2013            <p>The Graphviz graph object.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list</code>           \u2013            <p>Hash for ascii representation nodes.</p> </li> <li> <code>list</code>           \u2013            <p>Hash for ascii representation edges.</p> </li> <li> <code>list</code>           \u2013            <p>Mapping between nodes hash and labels.</p> </li> </ul> Source code in <code>src/astx/viz.py</code> <pre><code>def get_hash_labels(\n    graph: Digraph,\n) -&gt; tuple[list[str], list[tuple[str, str]], list[tuple[str, str]]]:\n    \"\"\"\n    Get hash and labels from Digraph for ascii AST representation.\n\n    Parameters\n    ----------\n    graph : Digraph\n        The Graphviz graph object.\n\n    Returns\n    -------\n    list\n        Hash for ascii representation nodes.\n    list\n        Hash for ascii representation edges.\n    list\n        Mapping between nodes hash and labels.\n    \"\"\"\n    dot_lines = graph.source.splitlines()\n    nodes_modhash = []\n    edges_modhash = []\n    sources_hash = []\n    targets_hash = []\n    modhash_label_mapping = []\n    hash_modhash_mapping = []\n\n    for dot_line in dot_lines:\n        line = dot_line.strip().strip(\";\")\n        if \"label\" in line:\n            node_label = re.findall(r\"(?&lt;=label=).*(?= )\", line)[0].replace(\n                '\"', \"\"\n            )\n\n            # all labels must be at least 7 characters long\n            node_label = node_label.center(7, \" \")\n            len_label = len(node_label)\n\n            # each node modhash will have the same length as the node label\n            # and will consist of parts of the hash from both the parent\n            # (if it exists) and child nodes, separated by underscore.\n            node_hash = line.split(\"[\")[0].strip().replace('\"', \"\")\n            if \"_\" not in node_hash:  # if it's the first node\n                if len_label &lt;= len(node_hash):\n                    x = len_label\n                    node_modhash = node_hash[:x]\n                else:\n                    node_modhash = node_hash + \" \" * (\n                        len_label - len(node_hash)\n                    )\n            else:  # if it's connected before and after\n                hash1, hash2 = node_hash.split(\"_\")\n                len_hash2 = len(hash2)\n                len_hash1 = len(hash1)\n                min_chars_hash1 = 3\n\n                standard_label_len = (min_chars_hash1 + len_hash2) + 1\n                long_label_len = len_hash1 + len_hash2 + 1\n                # short label:\n                # modhash will have 3 chars of hash1 and some part of hash2\n                if len_label &lt;= standard_label_len:\n                    nchars_hash2 = len_label - (min_chars_hash1 + 1)\n                    node_modhash = (\n                        f\"{hash1[:min_chars_hash1]}_{hash2[:nchars_hash2]}\"\n                    )\n                # medium label:\n                # modhash will have more than 3 chars of hash1 and all of hash2\n                elif (len_label &gt; standard_label_len) &amp; (\n                    len_label &lt;= long_label_len\n                ):\n                    nchars_hash1 = (\n                        len_label - standard_label_len + min_chars_hash1\n                    )\n                    node_modhash = f\"{hash1[:nchars_hash1]}_{hash2}\"\n                # long label:\n                # modhash will have all of hash1, all of hash2,\n                # plus some additional chars\n                else:\n                    nchars = len_label - long_label_len\n                    add_chars = \"x\" * nchars\n                    node_modhash = f\"{hash1}_{hash2}{add_chars}\"\n\n            nodes_modhash.append(node_modhash)\n            hash_modhash_mapping.append((node_hash, node_modhash))\n            modhash_label_mapping.append((node_modhash, node_label))\n\n        elif \"-&gt;\" in line:\n            source_hash, target_hash = line.split(\"-&gt;\")\n            sources_hash.append(source_hash.strip().replace('\"', \"\"))\n            targets_hash.append(target_hash.strip().replace('\"', \"\"))\n\n    for source_hash, target_hash in zip(sources_hash, targets_hash):\n        source_modhash = next(\n            modhash\n            for hash_, modhash in hash_modhash_mapping\n            if source_hash == hash_\n        )\n        target_modhash = next(\n            modhash\n            for hash_, modhash in hash_modhash_mapping\n            if target_hash == hash_\n        )\n\n        edges_modhash.append((source_modhash, target_modhash))\n\n    return nodes_modhash, edges_modhash, modhash_label_mapping\n</code></pre>"},{"location":"api/viz/#astx.viz.graph_to_ascii","title":"graph_to_ascii","text":"<pre><code>graph_to_ascii(graph: Digraph, timeout: int = 10) -&gt; str\n</code></pre> <p>Wrap function for graph_to_ascii.</p> <p>Create an ascii representation of the abstract syntax tree (AST).</p> <p>Parameters:</p> <ul> <li> <code>graph</code>               (<code>Digraph</code>)           \u2013            <p>The Graphviz graph object.</p> </li> <li> <code>timeout</code>               (<code>int</code>, default:                   <code>10</code> )           \u2013            <p>Time limit in seconds for requests.post. Default is 10 seconds.</p> </li> </ul> Source code in <code>src/astx/viz.py</code> <pre><code>def graph_to_ascii(graph: Digraph, timeout: int = 10) -&gt; str:\n    \"\"\"\n    Wrap function for graph_to_ascii.\n\n    Create an ascii representation of the abstract syntax tree (AST).\n\n    Parameters\n    ----------\n    graph : Digraph\n        The Graphviz graph object.\n    timeout : int\n        Time limit in seconds for requests.post. Default is 10 seconds.\n    \"\"\"\n    if not isinstance(graph, Digraph):\n        raise ValueError(\n            f\"Graph must be a graphviz.Digraph (`{type(graph)}` was given.)\"\n        )\n\n    result = _asciigraph.graph_to_ascii(graph, timeout=timeout)\n    return f\"\\n{result}\\n\"\n</code></pre>"},{"location":"api/viz/#astx.viz.graph_to_ascii_overload","title":"graph_to_ascii_overload","text":"<pre><code>graph_to_ascii_overload(self: _AsciiGraphProxy, graph: Digraph, timeout: int = 10) -&gt; str\n</code></pre> <p>Overload asciinet.graph_to_ascii function.</p> <p>Create an ascii representation of the abstract syntax tree (AST). This function is suitable for usage with ASTs with multiple nodes with the same label.</p> <p>Parameters:</p> <ul> <li> <code>graph</code>               (<code>Digraph</code>)           \u2013            <p>The Graphviz graph object.</p> </li> <li> <code>timeout</code>               (<code>int</code>, default:                   <code>10</code> )           \u2013            <p>Time limit in seconds for requests.post. Default is 10 seconds.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The ascii graph representation as a string.</p> </li> </ul> Source code in <code>src/astx/viz.py</code> <pre><code>def graph_to_ascii_overload(\n    self: _AsciiGraphProxy, graph: Digraph, timeout: int = 10\n) -&gt; str:\n    \"\"\"\n    Overload asciinet.graph_to_ascii function.\n\n    Create an ascii representation of the abstract syntax tree (AST).\n    This function is suitable for usage with ASTs with multiple nodes\n    with the same label.\n\n    Parameters\n    ----------\n    graph : Digraph\n        The Graphviz graph object.\n    timeout : int\n        Time limit in seconds for requests.post. Default is 10 seconds.\n\n    Returns\n    -------\n    str\n        The ascii graph representation as a string.\n\n    \"\"\"\n    try:\n        nodes_modhash, edges_modhash, modhash_label_mapping = get_hash_labels(\n            graph\n        )\n\n        # assuming there won't be more than one node with no edges\n        if not edges_modhash:\n            node = make_node_box(modhash_label_mapping)\n            return node\n\n        # Prepare the graph ascii repr\n        graph_repr = dumps({\"vertices\": nodes_modhash, \"edges\": edges_modhash})\n        response = requests.post(self._url, data=graph_repr, timeout=timeout)\n        success = 200\n        if response.status_code == success:\n            graph_str = loads(response.content)\n        else:\n            raise ValueError(\n                \"Internal error: \\n{0}\".format(response.content.decode())\n            )\n\n        # substitute modhash by labels in the ascii representation\n        graph_list = list(graph_str)\n        for modhash, label in modhash_label_mapping:\n            start = graph_str.index(modhash)\n            end = graph_str.index(modhash) + (len(modhash))\n            graph_list[start:end] = label\n\n        graph = \"\".join(graph_list)\n        return graph  # type: ignore[no-any-return]\n\n    except (ConnectionError, Timeout):\n        self._restart()\n        raise ValueError(\"Could not convert graph to ASCII\")\n</code></pre>"},{"location":"api/viz/#astx.viz.make_node_box","title":"make_node_box","text":"<pre><code>make_node_box(modhash_label_mapping: list[tuple[str, str]]) -&gt; str\n</code></pre> <p>Make ascii representation for one-node ASTs.</p> <p>Parameters:</p> <ul> <li> <code>modhash_label_mapping</code>               (<code>list</code>)           \u2013            <p>Mapping between node hash and label.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The ascii graph representation as a string.</p> </li> </ul> Source code in <code>src/astx/viz.py</code> <pre><code>def make_node_box(modhash_label_mapping: list[tuple[str, str]]) -&gt; str:\n    \"\"\"\n    Make ascii representation for one-node ASTs.\n\n    Parameters\n    ----------\n    modhash_label_mapping : list\n        Mapping between node hash and label.\n\n    Returns\n    -------\n    str\n        The ascii graph representation as a string.\n\n    \"\"\"\n    label = modhash_label_mapping[0][1]\n    box_width = len(label) + 2\n    space_before_box = \" \" * 4\n    box_upper = space_before_box + \"\u250c\" + \"\u2500\" * box_width + \"\u2510\"\n    box_middle = space_before_box + \"\u2502 \" + label + \" \u2502\"\n    box_lower = space_before_box + \"\u2514\" + \"\u2500\" * box_width + \"\u2518\"\n    box = [box_upper, box_middle, box_lower]\n    node = \"\\n\".join(box)\n    return node\n</code></pre>"},{"location":"api/viz/#astx.viz.traverse_ast_ascii","title":"traverse_ast_ascii","text":"<pre><code>traverse_ast_ascii(ast: ReprStruct, graph: Optional[Digraph] = None, parent: Optional[str] = None, shape: str = 'box') -&gt; Digraph\n</code></pre> <p>Traverse the AST and build a Graphviz graph for ascii representation.</p> <p>Parameters:</p> <ul> <li> <code>ast</code>               (<code>dict</code>)           \u2013            <p>The AST as a nested dictionary (full structure version).</p> </li> <li> <code>graph</code>               (<code>Digraph</code>, default:                   <code>None</code> )           \u2013            <p>The Graphviz graph object.</p> </li> <li> <code>parent</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The identifier of the parent node in the graph, by default it is an empty string</p> </li> <li> <code>shape</code>               (<code>str</code>, default:                   <code>'box'</code> )           \u2013            <p>The shape used for the nodes in the graph. Default \"box\".</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Digraph</code>           \u2013            <p>Graphviz (dot) graph representation.</p> </li> </ul> Source code in <code>src/astx/viz.py</code> <pre><code>def traverse_ast_ascii(\n    ast: ReprStruct,\n    graph: Optional[Digraph] = None,\n    parent: Optional[str] = None,\n    shape: str = \"box\",\n) -&gt; Digraph:\n    \"\"\"\n    Traverse the AST and build a Graphviz graph for ascii representation.\n\n    Parameters\n    ----------\n    ast : dict\n        The AST as a nested dictionary (full structure version).\n    graph : Digraph\n        The Graphviz graph object.\n    parent : str, optional\n        The identifier of the parent node in the graph, by default\n        it is an empty string\n    shape: str, options: ellipse, box, circle, diamond\n        The shape used for the nodes in the graph. Default \"box\".\n\n    Returns\n    -------\n    Digraph\n        Graphviz (dot) graph representation.\n    \"\"\"\n    if not graph:\n        graph = Digraph()\n        graph.attr(rankdir=\"TB\")\n\n    if isinstance(ast, list):\n        for item in ast:\n            traverse_ast_ascii(cast(ReprStruct, item), graph, parent, shape)\n    elif isinstance(ast, dict):\n        for key, value in ast.items():\n            if not parent:\n                node_name = f\"{hash(key)}\"\n            else:\n                if parent.find(\"_\"):\n                    node_name = f\"{parent[parent.find('_') + 1 :]}_{hash(key)}\"\n                else:\n                    node_name = f\"{parent}_{hash(key)}\"\n                graph.edge(parent, node_name)\n\n            graph.node(node_name, label=key, shape=shape)\n            traverse_ast_ascii(\n                cast(ReprStruct, value), graph, node_name, shape\n            )\n    return graph\n</code></pre>"},{"location":"api/viz/#astx.viz.traverse_ast_to_graphviz","title":"traverse_ast_to_graphviz","text":"<pre><code>traverse_ast_to_graphviz(ast: ReprStruct, graph: Optional[Digraph] = None, parent: Optional[str] = None, shape: str = 'box', edge_label: str = '') -&gt; Digraph\n</code></pre> <p>Traverse the AST and build a Graphviz graph for png representation.</p> <p>Parameters:</p> <ul> <li> <code>ast</code>               (<code>dict</code>)           \u2013            <p>The AST as a nested dictionary (full structure version).</p> </li> <li> <code>graph</code>               (<code>Digraph</code>, default:                   <code>None</code> )           \u2013            <p>The Graphviz graph object.</p> </li> <li> <code>parent</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The identifier of the parent node in the graph, by default it is an empty string</p> </li> <li> <code>shape</code>               (<code>str</code>, default:                   <code>'box'</code> )           \u2013            <p>The shape used for the nodes in the graph. Default \"box\".</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Digraph</code>           \u2013            <p>Graphviz (dot) graph representation.</p> </li> </ul> Source code in <code>src/astx/viz.py</code> <pre><code>def traverse_ast_to_graphviz(\n    ast: ReprStruct,\n    graph: Optional[Digraph] = None,\n    parent: Optional[str] = None,\n    shape: str = \"box\",\n    edge_label: str = \"\",\n) -&gt; Digraph:\n    \"\"\"\n    Traverse the AST and build a Graphviz graph for png representation.\n\n    Parameters\n    ----------\n    ast : dict\n        The AST as a nested dictionary (full structure version).\n    graph : Digraph\n        The Graphviz graph object.\n    parent : str, optional\n        The identifier of the parent node in the graph, by default\n        it is an empty string\n    shape: str, options: ellipse, box, circle, diamond\n        The shape used for the nodes in the graph. Default \"box\".\n\n    Returns\n    -------\n    Digraph\n        Graphviz (dot) graph representation.\n    \"\"\"\n    if not graph:\n        graph = Digraph()\n        graph.attr(rankdir=\"TB\")\n\n    if not isinstance(ast, dict):\n        return graph.unflatten(stagger=3)\n\n    for key, full_value in ast.items():\n        if not isinstance(full_value, dict):\n            continue\n\n        content = full_value.get(\"content\", \"\")\n        metadata = cast(DictDataTypesStruct, full_value.get(\"metadata\", {}))\n        ref = \"\"\n\n        if not metadata:\n            # if the node doesn't have a metadata, it is a edge\n            traverse_ast_to_graphviz(\n                full_value,\n                graph,\n                parent,\n                shape=shape,\n                edge_label=key,\n            )\n            continue\n\n        ref = cast(str, metadata.get(\"ref\", \"\"))\n\n        node_name = f\"{hash(key)}_{hash(str(ref))}_{hash(str(content))}\"\n        graph.node(node_name, key, shape=shape)\n\n        if parent:\n            graph_params = {\"label\": edge_label} if edge_label else {}\n            graph.edge(parent, node_name, **graph_params)\n\n        if isinstance(content, dict):\n            traverse_ast_to_graphviz(content, graph, node_name, shape=shape)\n            continue\n        elif not isinstance(content, list):\n            continue\n\n        for item in content:\n            if isinstance(item, dict):\n                traverse_ast_to_graphviz(item, graph, node_name, shape=shape)\n    return graph\n</code></pre>"},{"location":"api/viz/#astx.viz.visualize","title":"visualize","text":"<pre><code>visualize(ast: ReprStruct, shape: str = 'box') -&gt; None\n</code></pre> <p>Visualize the abstract syntax tree (AST) using graphviz.</p> <p>Parameters:</p> <ul> <li> <code>ast</code>               (<code>ReprStruct</code>)           \u2013            <pre><code>The AST as a nested dictionary\n</code></pre> </li> <li> <code>shape</code>               (<code>str</code>, default:                   <code>'box'</code> )           \u2013            <p>The shape used for the nodes in the graph. Default \"box\".</p> </li> </ul> Source code in <code>src/astx/viz.py</code> <pre><code>def visualize(ast: ReprStruct, shape: str = \"box\") -&gt; None:\n    \"\"\"\n    Visualize the abstract syntax tree (AST) using graphviz.\n\n    Parameters\n    ----------\n    ast: dict\n            The AST as a nested dictionary\n    shape: str, options: ellipse, box, circle, diamond.\n        The shape used for the nodes in the graph. Default \"box\".\n    \"\"\"\n    graph = traverse_ast_to_graphviz(ast, shape=shape)\n    image = Image(  # type: ignore[no-untyped-call]\n        graph.unflatten(stagger=3).pipe(format=\"png\")\n    )\n    display(image)  # type: ignore[no-untyped-call]\n</code></pre>"},{"location":"api/literals/","title":"Index","text":""},{"location":"api/literals/#astx.literals","title":"literals","text":"<p>AST nodes for literals.</p> <p>Modules:</p> <ul> <li> <code>base</code>           \u2013            <p>ASTx Data Types module.</p> </li> <li> <code>boolean</code>           \u2013            <p>ASTx Data Types module.</p> </li> <li> <code>numeric</code>           \u2013            <p>ASTx Data Types module.</p> </li> <li> <code>string</code>           \u2013            <p>ASTx Data Types module.</p> </li> <li> <code>temporal</code>           \u2013            <p>ASTx Data Types module.</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>Literal</code>           \u2013            <p>Literal Data type.</p> </li> <li> <code>LiteralBoolean</code>           \u2013            <p>LiteralBoolean data type class.</p> </li> <li> <code>LiteralComplex</code>           \u2013            <p>Base class for literal complex numbers.</p> </li> <li> <code>LiteralComplex32</code>           \u2013            <p>LiteralComplex32 data type class.</p> </li> <li> <code>LiteralComplex64</code>           \u2013            <p>LiteralComplex64 data type class.</p> </li> <li> <code>LiteralDate</code>           \u2013            <p>LiteralDate data type class.</p> </li> <li> <code>LiteralDateTime</code>           \u2013            <p>LiteralDateTime data type class.</p> </li> <li> <code>LiteralFloat16</code>           \u2013            <p>LiteralFloat16 data type class.</p> </li> <li> <code>LiteralFloat32</code>           \u2013            <p>LiteralFloat32 data type class.</p> </li> <li> <code>LiteralFloat64</code>           \u2013            <p>LiteralFloat64 data type class.</p> </li> <li> <code>LiteralInt128</code>           \u2013            <p>LiteralInt128 data type class.</p> </li> <li> <code>LiteralInt16</code>           \u2013            <p>LiteralInt16 data type class.</p> </li> <li> <code>LiteralInt32</code>           \u2013            <p>LiteralInt32 data type class.</p> </li> <li> <code>LiteralInt64</code>           \u2013            <p>LiteralInt64 data type class.</p> </li> <li> <code>LiteralInt8</code>           \u2013            <p>LiteralInt8 data type class.</p> </li> <li> <code>LiteralNone</code>           \u2013            <p>LiteralNone data type.</p> </li> <li> <code>LiteralString</code>           \u2013            <p>LiteralString data type class.</p> </li> <li> <code>LiteralTime</code>           \u2013            <p>LiteralTime data type class.</p> </li> <li> <code>LiteralTimestamp</code>           \u2013            <p>LiteralTimestamp data type class.</p> </li> <li> <code>LiteralUInt128</code>           \u2013            <p>LiteralUInt128 data type class.</p> </li> <li> <code>LiteralUInt16</code>           \u2013            <p>LiteralUInt16 data type class.</p> </li> <li> <code>LiteralUInt32</code>           \u2013            <p>LiteralUInt32 data type class.</p> </li> <li> <code>LiteralUInt64</code>           \u2013            <p>LiteralUInt64 data type class.</p> </li> <li> <code>LiteralUInt8</code>           \u2013            <p>LiteralUInt8 data type class.</p> </li> <li> <code>LiteralUTF8Char</code>           \u2013            <p>Literal class for UTF-8 characters.</p> </li> <li> <code>LiteralUTF8String</code>           \u2013            <p>Literal class for UTF-8 strings.</p> </li> </ul>"},{"location":"api/literals/#astx.literals.Literal","title":"Literal","text":"<pre><code>Literal(*args, **kwargs)\n</code></pre> <p>               Bases: <code>DataTypeOps</code></p> <p>Literal Data type.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/base.py</code> <pre><code>def __init__(self, *args, **kwargs) -&gt; None:  # type: ignore\n    super().__init__(*args, **kwargs)\n    self.ref = uuid4().hex\n</code></pre>"},{"location":"api/literals/#astx.literals.Literal.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/#astx.literals.Literal.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/#astx.literals.Literal.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralBoolean","title":"LiteralBoolean","text":"<pre><code>LiteralBoolean(value: bool, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralBoolean data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/boolean.py</code> <pre><code>def __init__(\n    self, value: bool, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralBoolean.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = Boolean()\n    self.loc = loc\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralBoolean.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralBoolean.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralBoolean.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralComplex","title":"LiteralComplex","text":"<pre><code>LiteralComplex(real: float, imag: float, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>Base class for literal complex numbers.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the complex literal.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self,\n    real: float,\n    imag: float,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n) -&gt; None:\n    \"\"\"Initialize a generic complex number.\"\"\"\n    super().__init__(loc)\n    self.value = real, imag\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralComplex.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the complex literal.</p> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the complex literal.\"\"\"\n    key = f\"{self.__class__.__name__}: {self.value}\"\n    value: ReprStruct = {\n        \"real\": self.value[0],\n        \"imag\": self.value[1],\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralComplex.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralComplex.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralComplex32","title":"LiteralComplex32","text":"<pre><code>LiteralComplex32(real: float, imag: float, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>LiteralComplex</code></p> <p>LiteralComplex32 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the complex literal.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self,\n    real: float,\n    imag: float,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n) -&gt; None:\n    \"\"\"Initialize LiteralComplex32.\"\"\"\n    super().__init__(real, imag, loc)\n    self.type_ = Complex32()\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralComplex32.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the complex literal.</p> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the complex literal.\"\"\"\n    key = f\"{self.__class__.__name__}: {self.value}\"\n    value: ReprStruct = {\n        \"real\": self.value[0],\n        \"imag\": self.value[1],\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralComplex32.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralComplex32.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralComplex64","title":"LiteralComplex64","text":"<pre><code>LiteralComplex64(real: float, imag: float, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>LiteralComplex</code></p> <p>LiteralComplex64 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the complex literal.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self,\n    real: float,\n    imag: float,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n) -&gt; None:\n    \"\"\"Initialize LiteralComplex64.\"\"\"\n    super().__init__(real, imag, loc)\n    self.type_ = Complex64()\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralComplex64.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the complex literal.</p> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the complex literal.\"\"\"\n    key = f\"{self.__class__.__name__}: {self.value}\"\n    value: ReprStruct = {\n        \"real\": self.value[0],\n        \"imag\": self.value[1],\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralComplex64.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralComplex64.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralDate","title":"LiteralDate","text":"<pre><code>LiteralDate(value: str, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralDate data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the structure of the LiteralDate object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/temporal.py</code> <pre><code>def __init__(\n    self, value: str, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralDate.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = Date()\n    self.loc = loc\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralDate.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the structure of the LiteralDate object.</p> Source code in <code>src/astx/literals/temporal.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the structure of the LiteralDate object.\"\"\"\n    key = f\"LiteralDate: {self.value}\"\n    return self._prepare_struct(key, self.value, simplified)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralDate.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralDate.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralDateTime","title":"LiteralDateTime","text":"<pre><code>LiteralDateTime(value: str, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralDateTime data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the structure of the LiteralDateTime object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/temporal.py</code> <pre><code>def __init__(\n    self, value: str, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralDateTime.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = DateTime()\n    self.loc = loc\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralDateTime.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the structure of the LiteralDateTime object.</p> Source code in <code>src/astx/literals/temporal.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the structure of the LiteralDateTime object.\"\"\"\n    key = f\"LiteralDateTime: {self.value}\"\n    return self._prepare_struct(key, self.value, simplified)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralDateTime.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralDateTime.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralFloat16","title":"LiteralFloat16","text":"<pre><code>LiteralFloat16(value: float, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralFloat16 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self, value: float, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralFloat16.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = Float16()\n    self.loc = loc\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralFloat16.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralFloat16.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralFloat16.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralFloat32","title":"LiteralFloat32","text":"<pre><code>LiteralFloat32(value: float, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralFloat32 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self, value: float, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralFloat32.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = Float32()\n    self.loc = loc\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralFloat32.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralFloat32.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralFloat32.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralFloat64","title":"LiteralFloat64","text":"<pre><code>LiteralFloat64(value: float, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralFloat64 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self, value: float, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralFloat64.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = Float64()\n    self.loc = loc\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralFloat64.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralFloat64.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralFloat64.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralInt128","title":"LiteralInt128","text":"<pre><code>LiteralInt128(value: int, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralInt128 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self, value: int, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralInt128.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = Int128()\n    self.loc = loc\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralInt128.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralInt128.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralInt128.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralInt16","title":"LiteralInt16","text":"<pre><code>LiteralInt16(value: int, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralInt16 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self, value: int, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralInt16.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = Int16()\n    self.loc = loc\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralInt16.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralInt16.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralInt16.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralInt32","title":"LiteralInt32","text":"<pre><code>LiteralInt32(value: int, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralInt32 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self, value: int, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralInt32.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = Int32()\n    self.loc = loc\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralInt32.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralInt32.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralInt32.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralInt64","title":"LiteralInt64","text":"<pre><code>LiteralInt64(value: int, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralInt64 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self, value: int, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralInt64.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = Int64()\n    self.loc = loc\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralInt64.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralInt64.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralInt64.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralInt8","title":"LiteralInt8","text":"<pre><code>LiteralInt8(value: int, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralInt8 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self, value: int, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralInt8.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = Int8()\n    self.loc = loc\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralInt8.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralInt8.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralInt8.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralNone","title":"LiteralNone","text":"<pre><code>LiteralNone(loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralNone data type.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/base.py</code> <pre><code>def __init__(self, loc: SourceLocation = NO_SOURCE_LOCATION) -&gt; None:\n    \"\"\"Initialize LiteralNone.\"\"\"\n    super().__init__(loc)\n    self.value = None\n    self.type_ = NoneType()\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralNone.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralNone.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralNone.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralString","title":"LiteralString","text":"<pre><code>LiteralString(value: str, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralString data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/string.py</code> <pre><code>def __init__(\n    self, value: str, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralString.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = String()\n    self.loc = loc\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralString.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/literals/string.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    key = f\"LiteralString: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralString.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralString.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralTime","title":"LiteralTime","text":"<pre><code>LiteralTime(value: str, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralTime data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the structure of the LiteralTime object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/temporal.py</code> <pre><code>def __init__(\n    self, value: str, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralTime.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = Time()\n    self.loc = loc\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralTime.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the structure of the LiteralTime object.</p> Source code in <code>src/astx/literals/temporal.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the structure of the LiteralTime object.\"\"\"\n    key = f\"LiteralTime: {self.value}\"\n    return self._prepare_struct(key, self.value, simplified)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralTime.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralTime.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralTimestamp","title":"LiteralTimestamp","text":"<pre><code>LiteralTimestamp(value: str, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralTimestamp data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the structure of the LiteralTimestamp object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/temporal.py</code> <pre><code>def __init__(\n    self, value: str, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralTimestamp.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = Timestamp()\n    self.loc = loc\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralTimestamp.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the structure of the LiteralTimestamp object.</p> Source code in <code>src/astx/literals/temporal.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the structure of the LiteralTimestamp object.\"\"\"\n    key = f\"LiteralTimestamp: {self.value}\"\n    return self._prepare_struct(key, self.value, simplified)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralTimestamp.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralTimestamp.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralUInt128","title":"LiteralUInt128","text":"<pre><code>LiteralUInt128(value: int, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralUInt128 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self, value: int, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralUInt128.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = UInt128()\n    self.loc = loc\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralUInt128.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralUInt128.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralUInt128.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralUInt16","title":"LiteralUInt16","text":"<pre><code>LiteralUInt16(value: int, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralUInt16 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self, value: int, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralUInt16.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = UInt16()\n    self.loc = loc\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralUInt16.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralUInt16.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralUInt16.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralUInt32","title":"LiteralUInt32","text":"<pre><code>LiteralUInt32(value: int, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralUInt32 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self, value: int, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralUInt32.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = UInt32()\n    self.loc = loc\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralUInt32.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralUInt32.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralUInt32.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralUInt64","title":"LiteralUInt64","text":"<pre><code>LiteralUInt64(value: int, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralUInt64 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self, value: int, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralUInt64.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = UInt64()\n    self.loc = loc\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralUInt64.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralUInt64.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralUInt64.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralUInt8","title":"LiteralUInt8","text":"<pre><code>LiteralUInt8(value: int, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralUInt8 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self, value: int, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralUInt8.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = UInt8()\n    self.loc = loc\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralUInt8.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralUInt8.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralUInt8.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralUTF8Char","title":"LiteralUTF8Char","text":"<pre><code>LiteralUTF8Char(value: str, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>LiteralString</code></p> <p>Literal class for UTF-8 characters.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the structure of the object in a simplified.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/string.py</code> <pre><code>def __init__(\n    self, value: str, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    super().__init__(value=value, loc=loc)\n    self.type_ = UTF8Char()\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralUTF8Char.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the structure of the object in a simplified.</p> Source code in <code>src/astx/literals/string.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the structure of the object in a simplified.\"\"\"\n    key = f\"LiteralUTF8Char: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralUTF8Char.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralUTF8Char.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralUTF8String","title":"LiteralUTF8String","text":"<pre><code>LiteralUTF8String(value: str, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>LiteralString</code></p> <p>Literal class for UTF-8 strings.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the structure of the object in a simplified.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/string.py</code> <pre><code>def __init__(\n    self, value: str, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    super().__init__(value=value, loc=loc)\n    self.type_ = UTF8String()\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralUTF8String.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the structure of the object in a simplified.</p> Source code in <code>src/astx/literals/string.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the structure of the object in a simplified.\"\"\"\n    key = f\"LiteralUTF8String: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralUTF8String.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/#astx.literals.LiteralUTF8String.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/base/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> base","text":""},{"location":"api/literals/base/#astx.literals.base","title":"base","text":"<p>ASTx Data Types module.</p> <p>Classes:</p> <ul> <li> <code>Literal</code>           \u2013            <p>Literal Data type.</p> </li> <li> <code>LiteralNone</code>           \u2013            <p>LiteralNone data type.</p> </li> </ul>"},{"location":"api/literals/base/#astx.literals.base.Literal","title":"Literal","text":"<pre><code>Literal(*args, **kwargs)\n</code></pre> <p>               Bases: <code>DataTypeOps</code></p> <p>Literal Data type.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/base.py</code> <pre><code>def __init__(self, *args, **kwargs) -&gt; None:  # type: ignore\n    super().__init__(*args, **kwargs)\n    self.ref = uuid4().hex\n</code></pre>"},{"location":"api/literals/base/#astx.literals.base.Literal.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/base/#astx.literals.base.Literal.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/base/#astx.literals.base.Literal.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/base/#astx.literals.base.LiteralNone","title":"LiteralNone","text":"<pre><code>LiteralNone(loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralNone data type.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/base.py</code> <pre><code>def __init__(self, loc: SourceLocation = NO_SOURCE_LOCATION) -&gt; None:\n    \"\"\"Initialize LiteralNone.\"\"\"\n    super().__init__(loc)\n    self.value = None\n    self.type_ = NoneType()\n</code></pre>"},{"location":"api/literals/base/#astx.literals.base.LiteralNone.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/base/#astx.literals.base.LiteralNone.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/base/#astx.literals.base.LiteralNone.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/boolean/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> boolean","text":""},{"location":"api/literals/boolean/#astx.literals.boolean","title":"boolean","text":"<p>ASTx Data Types module.</p> <p>Classes:</p> <ul> <li> <code>LiteralBoolean</code>           \u2013            <p>LiteralBoolean data type class.</p> </li> </ul>"},{"location":"api/literals/boolean/#astx.literals.boolean.LiteralBoolean","title":"LiteralBoolean","text":"<pre><code>LiteralBoolean(value: bool, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralBoolean data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/boolean.py</code> <pre><code>def __init__(\n    self, value: bool, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralBoolean.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = Boolean()\n    self.loc = loc\n</code></pre>"},{"location":"api/literals/boolean/#astx.literals.boolean.LiteralBoolean.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/boolean/#astx.literals.boolean.LiteralBoolean.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/boolean/#astx.literals.boolean.LiteralBoolean.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/numeric/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> numeric","text":""},{"location":"api/literals/numeric/#astx.literals.numeric","title":"numeric","text":"<p>ASTx Data Types module.</p> <p>Classes:</p> <ul> <li> <code>LiteralComplex</code>           \u2013            <p>Base class for literal complex numbers.</p> </li> <li> <code>LiteralComplex32</code>           \u2013            <p>LiteralComplex32 data type class.</p> </li> <li> <code>LiteralComplex64</code>           \u2013            <p>LiteralComplex64 data type class.</p> </li> <li> <code>LiteralFloat16</code>           \u2013            <p>LiteralFloat16 data type class.</p> </li> <li> <code>LiteralFloat32</code>           \u2013            <p>LiteralFloat32 data type class.</p> </li> <li> <code>LiteralFloat64</code>           \u2013            <p>LiteralFloat64 data type class.</p> </li> <li> <code>LiteralInt128</code>           \u2013            <p>LiteralInt128 data type class.</p> </li> <li> <code>LiteralInt16</code>           \u2013            <p>LiteralInt16 data type class.</p> </li> <li> <code>LiteralInt32</code>           \u2013            <p>LiteralInt32 data type class.</p> </li> <li> <code>LiteralInt64</code>           \u2013            <p>LiteralInt64 data type class.</p> </li> <li> <code>LiteralInt8</code>           \u2013            <p>LiteralInt8 data type class.</p> </li> <li> <code>LiteralUInt128</code>           \u2013            <p>LiteralUInt128 data type class.</p> </li> <li> <code>LiteralUInt16</code>           \u2013            <p>LiteralUInt16 data type class.</p> </li> <li> <code>LiteralUInt32</code>           \u2013            <p>LiteralUInt32 data type class.</p> </li> <li> <code>LiteralUInt64</code>           \u2013            <p>LiteralUInt64 data type class.</p> </li> <li> <code>LiteralUInt8</code>           \u2013            <p>LiteralUInt8 data type class.</p> </li> </ul>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralComplex","title":"LiteralComplex","text":"<pre><code>LiteralComplex(real: float, imag: float, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>Base class for literal complex numbers.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the complex literal.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self,\n    real: float,\n    imag: float,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n) -&gt; None:\n    \"\"\"Initialize a generic complex number.\"\"\"\n    super().__init__(loc)\n    self.value = real, imag\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralComplex.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the complex literal.</p> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the complex literal.\"\"\"\n    key = f\"{self.__class__.__name__}: {self.value}\"\n    value: ReprStruct = {\n        \"real\": self.value[0],\n        \"imag\": self.value[1],\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralComplex.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralComplex.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralComplex32","title":"LiteralComplex32","text":"<pre><code>LiteralComplex32(real: float, imag: float, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>LiteralComplex</code></p> <p>LiteralComplex32 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the complex literal.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self,\n    real: float,\n    imag: float,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n) -&gt; None:\n    \"\"\"Initialize LiteralComplex32.\"\"\"\n    super().__init__(real, imag, loc)\n    self.type_ = Complex32()\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralComplex32.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the complex literal.</p> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the complex literal.\"\"\"\n    key = f\"{self.__class__.__name__}: {self.value}\"\n    value: ReprStruct = {\n        \"real\": self.value[0],\n        \"imag\": self.value[1],\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralComplex32.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralComplex32.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralComplex64","title":"LiteralComplex64","text":"<pre><code>LiteralComplex64(real: float, imag: float, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>LiteralComplex</code></p> <p>LiteralComplex64 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the complex literal.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self,\n    real: float,\n    imag: float,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n) -&gt; None:\n    \"\"\"Initialize LiteralComplex64.\"\"\"\n    super().__init__(real, imag, loc)\n    self.type_ = Complex64()\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralComplex64.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the complex literal.</p> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the complex literal.\"\"\"\n    key = f\"{self.__class__.__name__}: {self.value}\"\n    value: ReprStruct = {\n        \"real\": self.value[0],\n        \"imag\": self.value[1],\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralComplex64.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralComplex64.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralFloat16","title":"LiteralFloat16","text":"<pre><code>LiteralFloat16(value: float, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralFloat16 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self, value: float, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralFloat16.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = Float16()\n    self.loc = loc\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralFloat16.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralFloat16.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralFloat16.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralFloat32","title":"LiteralFloat32","text":"<pre><code>LiteralFloat32(value: float, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralFloat32 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self, value: float, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralFloat32.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = Float32()\n    self.loc = loc\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralFloat32.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralFloat32.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralFloat32.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralFloat64","title":"LiteralFloat64","text":"<pre><code>LiteralFloat64(value: float, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralFloat64 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self, value: float, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralFloat64.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = Float64()\n    self.loc = loc\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralFloat64.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralFloat64.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralFloat64.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralInt128","title":"LiteralInt128","text":"<pre><code>LiteralInt128(value: int, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralInt128 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self, value: int, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralInt128.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = Int128()\n    self.loc = loc\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralInt128.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralInt128.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralInt128.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralInt16","title":"LiteralInt16","text":"<pre><code>LiteralInt16(value: int, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralInt16 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self, value: int, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralInt16.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = Int16()\n    self.loc = loc\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralInt16.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralInt16.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralInt16.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralInt32","title":"LiteralInt32","text":"<pre><code>LiteralInt32(value: int, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralInt32 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self, value: int, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralInt32.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = Int32()\n    self.loc = loc\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralInt32.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralInt32.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralInt32.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralInt64","title":"LiteralInt64","text":"<pre><code>LiteralInt64(value: int, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralInt64 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self, value: int, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralInt64.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = Int64()\n    self.loc = loc\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralInt64.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralInt64.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralInt64.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralInt8","title":"LiteralInt8","text":"<pre><code>LiteralInt8(value: int, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralInt8 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self, value: int, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralInt8.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = Int8()\n    self.loc = loc\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralInt8.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralInt8.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralInt8.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralUInt128","title":"LiteralUInt128","text":"<pre><code>LiteralUInt128(value: int, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralUInt128 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self, value: int, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralUInt128.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = UInt128()\n    self.loc = loc\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralUInt128.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralUInt128.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralUInt128.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralUInt16","title":"LiteralUInt16","text":"<pre><code>LiteralUInt16(value: int, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralUInt16 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self, value: int, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralUInt16.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = UInt16()\n    self.loc = loc\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralUInt16.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralUInt16.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralUInt16.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralUInt32","title":"LiteralUInt32","text":"<pre><code>LiteralUInt32(value: int, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralUInt32 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self, value: int, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralUInt32.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = UInt32()\n    self.loc = loc\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralUInt32.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralUInt32.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralUInt32.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralUInt64","title":"LiteralUInt64","text":"<pre><code>LiteralUInt64(value: int, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralUInt64 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self, value: int, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralUInt64.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = UInt64()\n    self.loc = loc\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralUInt64.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralUInt64.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralUInt64.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralUInt8","title":"LiteralUInt8","text":"<pre><code>LiteralUInt8(value: int, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralUInt8 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST representation for the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/numeric.py</code> <pre><code>def __init__(\n    self, value: int, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralUInt8.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = UInt8()\n    self.loc = loc\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralUInt8.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST representation for the object.</p> Source code in <code>src/astx/literals/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST representation for the object.\"\"\"\n    key = f\"Literal[{self.type_}]: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralUInt8.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/numeric/#astx.literals.numeric.LiteralUInt8.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/string/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> string","text":""},{"location":"api/literals/string/#astx.literals.string","title":"string","text":"<p>ASTx Data Types module.</p> <p>Classes:</p> <ul> <li> <code>LiteralString</code>           \u2013            <p>LiteralString data type class.</p> </li> <li> <code>LiteralUTF8Char</code>           \u2013            <p>Literal class for UTF-8 characters.</p> </li> <li> <code>LiteralUTF8String</code>           \u2013            <p>Literal class for UTF-8 strings.</p> </li> </ul>"},{"location":"api/literals/string/#astx.literals.string.LiteralString","title":"LiteralString","text":"<pre><code>LiteralString(value: str, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralString data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/string.py</code> <pre><code>def __init__(\n    self, value: str, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralString.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = String()\n    self.loc = loc\n</code></pre>"},{"location":"api/literals/string/#astx.literals.string.LiteralString.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/literals/string.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    key = f\"LiteralString: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/string/#astx.literals.string.LiteralString.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/string/#astx.literals.string.LiteralString.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/string/#astx.literals.string.LiteralUTF8Char","title":"LiteralUTF8Char","text":"<pre><code>LiteralUTF8Char(value: str, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>LiteralString</code></p> <p>Literal class for UTF-8 characters.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the structure of the object in a simplified.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/string.py</code> <pre><code>def __init__(\n    self, value: str, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    super().__init__(value=value, loc=loc)\n    self.type_ = UTF8Char()\n</code></pre>"},{"location":"api/literals/string/#astx.literals.string.LiteralUTF8Char.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the structure of the object in a simplified.</p> Source code in <code>src/astx/literals/string.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the structure of the object in a simplified.\"\"\"\n    key = f\"LiteralUTF8Char: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/string/#astx.literals.string.LiteralUTF8Char.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/string/#astx.literals.string.LiteralUTF8Char.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/string/#astx.literals.string.LiteralUTF8String","title":"LiteralUTF8String","text":"<pre><code>LiteralUTF8String(value: str, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>LiteralString</code></p> <p>Literal class for UTF-8 strings.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the structure of the object in a simplified.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/string.py</code> <pre><code>def __init__(\n    self, value: str, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    super().__init__(value=value, loc=loc)\n    self.type_ = UTF8String()\n</code></pre>"},{"location":"api/literals/string/#astx.literals.string.LiteralUTF8String.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the structure of the object in a simplified.</p> Source code in <code>src/astx/literals/string.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the structure of the object in a simplified.\"\"\"\n    key = f\"LiteralUTF8String: {self.value}\"\n    value = self.value\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/literals/string/#astx.literals.string.LiteralUTF8String.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/string/#astx.literals.string.LiteralUTF8String.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/temporal/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> temporal","text":""},{"location":"api/literals/temporal/#astx.literals.temporal","title":"temporal","text":"<p>ASTx Data Types module.</p> <p>Classes:</p> <ul> <li> <code>LiteralDate</code>           \u2013            <p>LiteralDate data type class.</p> </li> <li> <code>LiteralDateTime</code>           \u2013            <p>LiteralDateTime data type class.</p> </li> <li> <code>LiteralTime</code>           \u2013            <p>LiteralTime data type class.</p> </li> <li> <code>LiteralTimestamp</code>           \u2013            <p>LiteralTimestamp data type class.</p> </li> </ul>"},{"location":"api/literals/temporal/#astx.literals.temporal.LiteralDate","title":"LiteralDate","text":"<pre><code>LiteralDate(value: str, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralDate data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the structure of the LiteralDate object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/temporal.py</code> <pre><code>def __init__(\n    self, value: str, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralDate.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = Date()\n    self.loc = loc\n</code></pre>"},{"location":"api/literals/temporal/#astx.literals.temporal.LiteralDate.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the structure of the LiteralDate object.</p> Source code in <code>src/astx/literals/temporal.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the structure of the LiteralDate object.\"\"\"\n    key = f\"LiteralDate: {self.value}\"\n    return self._prepare_struct(key, self.value, simplified)\n</code></pre>"},{"location":"api/literals/temporal/#astx.literals.temporal.LiteralDate.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/temporal/#astx.literals.temporal.LiteralDate.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/temporal/#astx.literals.temporal.LiteralDateTime","title":"LiteralDateTime","text":"<pre><code>LiteralDateTime(value: str, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralDateTime data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the structure of the LiteralDateTime object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/temporal.py</code> <pre><code>def __init__(\n    self, value: str, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralDateTime.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = DateTime()\n    self.loc = loc\n</code></pre>"},{"location":"api/literals/temporal/#astx.literals.temporal.LiteralDateTime.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the structure of the LiteralDateTime object.</p> Source code in <code>src/astx/literals/temporal.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the structure of the LiteralDateTime object.\"\"\"\n    key = f\"LiteralDateTime: {self.value}\"\n    return self._prepare_struct(key, self.value, simplified)\n</code></pre>"},{"location":"api/literals/temporal/#astx.literals.temporal.LiteralDateTime.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/temporal/#astx.literals.temporal.LiteralDateTime.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/temporal/#astx.literals.temporal.LiteralTime","title":"LiteralTime","text":"<pre><code>LiteralTime(value: str, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralTime data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the structure of the LiteralTime object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/temporal.py</code> <pre><code>def __init__(\n    self, value: str, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralTime.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = Time()\n    self.loc = loc\n</code></pre>"},{"location":"api/literals/temporal/#astx.literals.temporal.LiteralTime.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the structure of the LiteralTime object.</p> Source code in <code>src/astx/literals/temporal.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the structure of the LiteralTime object.\"\"\"\n    key = f\"LiteralTime: {self.value}\"\n    return self._prepare_struct(key, self.value, simplified)\n</code></pre>"},{"location":"api/literals/temporal/#astx.literals.temporal.LiteralTime.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/temporal/#astx.literals.temporal.LiteralTime.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/literals/temporal/#astx.literals.temporal.LiteralTimestamp","title":"LiteralTimestamp","text":"<pre><code>LiteralTimestamp(value: str, loc: SourceLocation = NO_SOURCE_LOCATION)\n</code></pre> <p>               Bases: <code>Literal</code></p> <p>LiteralTimestamp data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the structure of the LiteralTimestamp object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/literals/temporal.py</code> <pre><code>def __init__(\n    self, value: str, loc: SourceLocation = NO_SOURCE_LOCATION\n) -&gt; None:\n    \"\"\"Initialize LiteralTimestamp.\"\"\"\n    super().__init__(loc)\n    self.value = value\n    self.type_ = Timestamp()\n    self.loc = loc\n</code></pre>"},{"location":"api/literals/temporal/#astx.literals.temporal.LiteralTimestamp.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the structure of the LiteralTimestamp object.</p> Source code in <code>src/astx/literals/temporal.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the structure of the LiteralTimestamp object.\"\"\"\n    key = f\"LiteralTimestamp: {self.value}\"\n    return self._prepare_struct(key, self.value, simplified)\n</code></pre>"},{"location":"api/literals/temporal/#astx.literals.temporal.LiteralTimestamp.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/literals/temporal/#astx.literals.temporal.LiteralTimestamp.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/tools/","title":"Index","text":""},{"location":"api/tools/#astx.tools","title":"tools","text":"<p>Package for astx helper tools.</p> <p>Modules:</p> <ul> <li> <code>transpilers</code>           \u2013            <p>ASTx Transpilers.</p> </li> <li> <code>typing</code>           \u2013            <p>Tools for typing support helper.</p> </li> </ul>"},{"location":"api/tools/typing/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> typing","text":""},{"location":"api/tools/typing/#astx.tools.typing","title":"typing","text":"<p>Tools for typing support helper.</p>"},{"location":"api/tools/typing/#astx.tools.typing.copy_type","title":"copy_type","text":"<pre><code>copy_type(f: _T) -&gt; Callable[[Any], _T]\n</code></pre> <p>Copy types for args, kwargs from parent class.</p> Source code in <code>src/astx/tools/typing.py</code> <pre><code>@public\ndef copy_type(f: _T) -&gt; Callable[[Any], _T]:\n    \"\"\"Copy types for args, kwargs from parent class.\"\"\"\n    skip_unused(f)\n    return lambda x: x\n</code></pre>"},{"location":"api/tools/typing/#astx.tools.typing.skip_unused","title":"skip_unused","text":"<pre><code>skip_unused(*args: Any, **kwargs: Any) -&gt; None\n</code></pre> <p>Referencing variables to pacify static analyzers.</p> Source code in <code>src/astx/tools/typing.py</code> <pre><code>@public\ndef skip_unused(*args: Any, **kwargs: Any) -&gt; None:\n    \"\"\"Referencing variables to pacify static analyzers.\"\"\"\n    for arg in args:\n        pass\n    for key in kwargs:\n        pass\n</code></pre>"},{"location":"api/tools/transpilers/","title":"Index","text":""},{"location":"api/tools/transpilers/#astx.tools.transpilers","title":"transpilers","text":"<p>ASTx Transpilers.</p> <p>Modules:</p> <ul> <li> <code>python</code>           \u2013            <p>ASTx Python transpiler.</p> </li> </ul>"},{"location":"api/tools/transpilers/python/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> python","text":""},{"location":"api/tools/transpilers/python/#astx.tools.transpilers.python","title":"python","text":"<p>ASTx Python transpiler.</p> <p>Modules:</p> <ul> <li> <code>astx</code>           \u2013            <p>ASTx.</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>ASTxPythonTranspiler</code>           \u2013            <p>Transpiler that converts ASTx nodes to Python code.</p> </li> </ul>"},{"location":"api/tools/transpilers/python/#astx.tools.transpilers.python.ASTxPythonTranspiler","title":"ASTxPythonTranspiler","text":"<pre><code>ASTxPythonTranspiler()\n</code></pre> <p>Transpiler that converts ASTx nodes to Python code.</p> Notes <p>Please keep the visit method in alphabet order according to the node type. The visit method for astx.AST should be the first one.</p> <p>Methods:</p> <ul> <li> <code>visit</code>             \u2013              <p>Handle XnorOp nodes.</p> </li> </ul> Source code in <code>src/astx/tools/transpilers/python.py</code> <pre><code>def __init__(self) -&gt; None:\n    self.indent_level = 0\n    self.indent_str = \"    \"  # 4 spaces\n</code></pre>"},{"location":"api/tools/transpilers/python/#astx.tools.transpilers.python.ASTxPythonTranspiler.visit","title":"visit","text":"<pre><code>visit(node: XnorOp) -&gt; str\n</code></pre> <p>Handle XnorOp nodes.</p> Source code in <code>src/astx/tools/transpilers/python.py</code> <pre><code>@dispatch  # type: ignore[no-redef]\ndef visit(self, node: astx.XnorOp) -&gt; str:\n    \"\"\"Handle XnorOp nodes.\"\"\"\n    lhs = self.visit(node.lhs)\n    rhs = self.visit(node.rhs)\n    return f\"not ({lhs} ^ {rhs})\"\n</code></pre>"},{"location":"api/types/","title":"Index","text":""},{"location":"api/types/#astx.types","title":"types","text":"<p>Collection of ASTx nodes used for types.</p> <p>Modules:</p> <ul> <li> <code>base</code>           \u2013            <p>ASTx Data Types module.</p> </li> <li> <code>boolean</code>           \u2013            <p>ASTx Data Types module.</p> </li> <li> <code>casting</code>           \u2013            <p>AST types module.</p> </li> <li> <code>numeric</code>           \u2013            <p>ASTx Data Types module.</p> </li> <li> <code>operators</code>           \u2013            <p>ASTx Data Types module.</p> </li> <li> <code>string</code>           \u2013            <p>ASTx Data Types module.</p> </li> <li> <code>temporal</code>           \u2013            <p>ASTx Data Types module.</p> </li> <li> <code>ttypes</code>           \u2013            <p>Constant objects.</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>AndOp</code>           \u2013            <p>AST class for logical AND operation.</p> </li> <li> <code>AnyType</code>           \u2013            <p>Generic data type expression.</p> </li> <li> <code>BinaryOp</code>           \u2013            <p>AST class for the binary operator.</p> </li> <li> <code>BoolBinaryOp</code>           \u2013            <p>Base AST class for boolean binary operations.</p> </li> <li> <code>BoolUnaryOp</code>           \u2013            <p>Base AST class for boolean unary operations.</p> </li> <li> <code>Boolean</code>           \u2013            <p>Boolean data type expression.</p> </li> <li> <code>Complex</code>           \u2013            <p>Base class for complex numbers.</p> </li> <li> <code>Complex32</code>           \u2013            <p>Complex32 data type class.</p> </li> <li> <code>Complex64</code>           \u2013            <p>Complex64 data type class.</p> </li> <li> <code>DataTypeOps</code>           \u2013            <p>Overload some magic functions used for the main operations.</p> </li> <li> <code>Date</code>           \u2013            <p>Date data type expression.</p> </li> <li> <code>DateTime</code>           \u2013            <p>DateTime data type expression.</p> </li> <li> <code>Float16</code>           \u2013            <p>Float16 data type expression.</p> </li> <li> <code>Float32</code>           \u2013            <p>Float32 data type expression.</p> </li> <li> <code>Float64</code>           \u2013            <p>Float64 data type expression.</p> </li> <li> <code>Floating</code>           \u2013            <p>AST for the literal float number.</p> </li> <li> <code>Int16</code>           \u2013            <p>Int16 data type expression.</p> </li> <li> <code>Int32</code>           \u2013            <p>Int32 data type expression.</p> </li> <li> <code>Int64</code>           \u2013            <p>Int64 data type expression.</p> </li> <li> <code>Int8</code>           \u2013            <p>Int8 data type expression.</p> </li> <li> <code>Integer</code>           \u2013            <p>Integer number data type expression.</p> </li> <li> <code>NandOp</code>           \u2013            <p>AST class for logical NAND operation.</p> </li> <li> <code>NoneType</code>           \u2013            <p>NoneType data type expression.</p> </li> <li> <code>NorOp</code>           \u2013            <p>AST class for logical NOR operation.</p> </li> <li> <code>Number</code>           \u2013            <p>Number data type expression.</p> </li> <li> <code>OrOp</code>           \u2013            <p>AST class for logical OR operation.</p> </li> <li> <code>SignedInteger</code>           \u2013            <p>Signed integer number data type expression.</p> </li> <li> <code>String</code>           \u2013            <p>Base class for strings.</p> </li> <li> <code>Time</code>           \u2013            <p>Time data type expression.</p> </li> <li> <code>Timestamp</code>           \u2013            <p>Timestamp data type expression.</p> </li> <li> <code>TypeCastExpr</code>           \u2013            <p>AST class for type casting expressions.</p> </li> <li> <code>UInt128</code>           \u2013            <p>UInt128 data type expression.</p> </li> <li> <code>UInt16</code>           \u2013            <p>UInt16 data type expression.</p> </li> <li> <code>UInt32</code>           \u2013            <p>UInt32 data type expression.</p> </li> <li> <code>UInt64</code>           \u2013            <p>UInt64 data type expression.</p> </li> <li> <code>UInt8</code>           \u2013            <p>UInt8 data type expression.</p> </li> <li> <code>UTF8Char</code>           \u2013            <p>Class for UTF-8 encoded characters.</p> </li> <li> <code>UTF8String</code>           \u2013            <p>Class for UTF-8 encoded strings.</p> </li> <li> <code>UnaryOp</code>           \u2013            <p>AST class for the unary operator.</p> </li> <li> <code>UnsignedInteger</code>           \u2013            <p>Unsigned integer number data type expression.</p> </li> <li> <code>XnorOp</code>           \u2013            <p>AST class for logical XNOR operation.</p> </li> <li> <code>XorOp</code>           \u2013            <p>AST class for logical XOR operation.</p> </li> </ul>"},{"location":"api/types/#astx.types.AndOp","title":"AndOp","text":"<pre><code>AndOp(lhs: DataType, rhs: DataType, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>BoolBinaryOp</code></p> <p>AST class for logical AND operation.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/types/operators.py</code> <pre><code>def __init__(\n    self,\n    lhs: DataType,\n    rhs: DataType,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Instantiate AST class for logical AND operation.\"\"\"\n    super().__init__(\n        op_code=self.op_code,\n        lhs=lhs,\n        rhs=rhs,\n        loc=loc,\n        parent=parent,\n    )\n</code></pre>"},{"location":"api/types/#astx.types.AndOp.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure that represents the object.</p> Source code in <code>src/astx/types/operators.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure that represents the object.\"\"\"\n    key = f\"BOOL_BINARY_OP[{self.__class__.__name__}]\"\n    value: ReprStruct = {\n        \"lhs\": self.lhs.get_struct(simplified),\n        \"rhs\": self.rhs.get_struct(simplified),\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/#astx.types.AndOp.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/#astx.types.AndOp.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/#astx.types.AnyType","title":"AnyType","text":"<pre><code>AnyType(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>DataType</code></p> <p>Generic data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/#astx.types.AnyType.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/#astx.types.AnyType.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/#astx.types.AnyType.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/#astx.types.BinaryOp","title":"BinaryOp","text":"<pre><code>BinaryOp(op_code: str, lhs: DataType, rhs: DataType, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>DataTypeOps</code></p> <p>AST class for the binary operator.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/types/operators.py</code> <pre><code>def __init__(\n    self,\n    op_code: str,\n    lhs: DataType,\n    rhs: DataType,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the BinaryOp instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n\n    self.op_code = op_code\n    self.lhs = lhs\n    self.rhs = rhs\n    self.kind = ASTKind.BinaryOpKind\n\n    if not (\n        isinstance(lhs.type_, DataType) and isinstance(rhs.type_, DataType)\n    ):\n        raise Exception(\n            \"For now, binary operators are just allowed for `DataType`.\"\n            f\"LHS: {lhs.type_}, RHS: {rhs.type_}\"\n        )\n\n    if lhs.type_ == rhs.type_:\n        self.type_ = lhs.type_\n    else:\n        # type inference\n        self.type_ = max([lhs.type_, rhs.type_], key=lambda v: v.nbytes)\n</code></pre>"},{"location":"api/types/#astx.types.BinaryOp.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure that represents the object.</p> Source code in <code>src/astx/types/operators.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure that represents the object.\"\"\"\n    key = f\"BINARY[{self.op_code}]\"\n    lhs = {\"lhs\": self.lhs.get_struct(simplified)}\n    rhs = {\"rhs\": self.rhs.get_struct(simplified)}\n\n    content: ReprStruct = {**lhs, **rhs}\n    return self._prepare_struct(key, content, simplified)\n</code></pre>"},{"location":"api/types/#astx.types.BinaryOp.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/#astx.types.BinaryOp.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/#astx.types.BoolBinaryOp","title":"BoolBinaryOp","text":"<pre><code>BoolBinaryOp(op_code: str, lhs: DataType, rhs: DataType, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>BinaryOp</code></p> <p>Base AST class for boolean binary operations.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/types/operators.py</code> <pre><code>def __init__(\n    self,\n    op_code: str,\n    lhs: DataType,\n    rhs: DataType,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(\n        op_code=op_code,\n        lhs=lhs,\n        rhs=rhs,\n        loc=loc,\n        parent=parent,\n    )\n</code></pre>"},{"location":"api/types/#astx.types.BoolBinaryOp.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure that represents the object.</p> Source code in <code>src/astx/types/operators.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure that represents the object.\"\"\"\n    key = f\"BOOL_BINARY_OP[{self.__class__.__name__}]\"\n    value: ReprStruct = {\n        \"lhs\": self.lhs.get_struct(simplified),\n        \"rhs\": self.rhs.get_struct(simplified),\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/#astx.types.BoolBinaryOp.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/#astx.types.BoolBinaryOp.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/#astx.types.BoolUnaryOp","title":"BoolUnaryOp","text":"<pre><code>BoolUnaryOp(op_code: str, operand: DataType, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>UnaryOp</code></p> <p>Base AST class for boolean unary operations.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/types/operators.py</code> <pre><code>def __init__(\n    self,\n    op_code: str,\n    operand: DataType,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(\n        op_code=op_code,\n        operand=operand,\n        loc=loc,\n        parent=parent,\n    )\n</code></pre>"},{"location":"api/types/#astx.types.BoolUnaryOp.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure that represents the object.</p> Source code in <code>src/astx/types/operators.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure that represents the object.\"\"\"\n    key = f\"BOOL_UNARY_OP[{self.__class__.__name__}]\"\n    value: ReprStruct = {\"operand\": self.operand.get_struct(simplified)}\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/#astx.types.BoolUnaryOp.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/#astx.types.BoolUnaryOp.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/#astx.types.Boolean","title":"Boolean","text":"<pre><code>Boolean(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>AnyType</code></p> <p>Boolean data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/#astx.types.Boolean.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/#astx.types.Boolean.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/#astx.types.Boolean.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/#astx.types.Complex","title":"Complex","text":"<pre><code>Complex(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Number</code></p> <p>Base class for complex numbers.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/#astx.types.Complex.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/#astx.types.Complex.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/#astx.types.Complex.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/#astx.types.Complex32","title":"Complex32","text":"<pre><code>Complex32(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Complex</code></p> <p>Complex32 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/#astx.types.Complex32.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/#astx.types.Complex32.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/#astx.types.Complex32.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/#astx.types.Complex64","title":"Complex64","text":"<pre><code>Complex64(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Complex</code></p> <p>Complex64 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/#astx.types.Complex64.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/#astx.types.Complex64.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/#astx.types.Complex64.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/#astx.types.DataTypeOps","title":"DataTypeOps","text":"<pre><code>DataTypeOps(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>DataType</code></p> <p>Overload some magic functions used for the main operations.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/#astx.types.DataTypeOps.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/#astx.types.DataTypeOps.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/#astx.types.DataTypeOps.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/#astx.types.Date","title":"Date","text":"<pre><code>Date(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Temporal</code></p> <p>Date data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/#astx.types.Date.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/#astx.types.Date.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/#astx.types.Date.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/#astx.types.DateTime","title":"DateTime","text":"<pre><code>DateTime(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Temporal</code></p> <p>DateTime data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/#astx.types.DateTime.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/#astx.types.DateTime.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/#astx.types.DateTime.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/#astx.types.Float16","title":"Float16","text":"<pre><code>Float16(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Floating</code></p> <p>Float16 data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/#astx.types.Float16.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/#astx.types.Float16.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/#astx.types.Float16.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/#astx.types.Float32","title":"Float32","text":"<pre><code>Float32(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Floating</code></p> <p>Float32 data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/#astx.types.Float32.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/#astx.types.Float32.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/#astx.types.Float32.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/#astx.types.Float64","title":"Float64","text":"<pre><code>Float64(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Floating</code></p> <p>Float64 data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/#astx.types.Float64.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/#astx.types.Float64.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/#astx.types.Float64.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/#astx.types.Floating","title":"Floating","text":"<pre><code>Floating(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Number</code></p> <p>AST for the literal float number.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/#astx.types.Floating.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/#astx.types.Floating.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/#astx.types.Floating.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/#astx.types.Int16","title":"Int16","text":"<pre><code>Int16(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>SignedInteger</code></p> <p>Int16 data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/#astx.types.Int16.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/#astx.types.Int16.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/#astx.types.Int16.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/#astx.types.Int32","title":"Int32","text":"<pre><code>Int32(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>SignedInteger</code></p> <p>Int32 data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/#astx.types.Int32.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/#astx.types.Int32.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/#astx.types.Int32.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/#astx.types.Int64","title":"Int64","text":"<pre><code>Int64(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>SignedInteger</code></p> <p>Int64 data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/#astx.types.Int64.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/#astx.types.Int64.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/#astx.types.Int64.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/#astx.types.Int8","title":"Int8","text":"<pre><code>Int8(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>SignedInteger</code></p> <p>Int8 data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/#astx.types.Int8.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/#astx.types.Int8.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/#astx.types.Int8.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/#astx.types.Integer","title":"Integer","text":"<pre><code>Integer(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>AnyType</code></p> <p>Integer number data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/#astx.types.Integer.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/#astx.types.Integer.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/#astx.types.Integer.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/#astx.types.NandOp","title":"NandOp","text":"<pre><code>NandOp(lhs: DataType, rhs: DataType, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>BoolBinaryOp</code></p> <p>AST class for logical NAND operation.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/types/operators.py</code> <pre><code>def __init__(\n    self,\n    lhs: DataType,\n    rhs: DataType,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Instantiate AST class for logical NAND operation.\"\"\"\n    super().__init__(\n        op_code=self.op_code,\n        lhs=lhs,\n        rhs=rhs,\n        loc=loc,\n        parent=parent,\n    )\n</code></pre>"},{"location":"api/types/#astx.types.NandOp.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure that represents the object.</p> Source code in <code>src/astx/types/operators.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure that represents the object.\"\"\"\n    key = f\"BOOL_BINARY_OP[{self.__class__.__name__}]\"\n    value: ReprStruct = {\n        \"lhs\": self.lhs.get_struct(simplified),\n        \"rhs\": self.rhs.get_struct(simplified),\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/#astx.types.NandOp.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/#astx.types.NandOp.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/#astx.types.NoneType","title":"NoneType","text":"<pre><code>NoneType(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>DataType</code></p> <p>NoneType data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/#astx.types.NoneType.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/#astx.types.NoneType.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/#astx.types.NoneType.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/#astx.types.NorOp","title":"NorOp","text":"<pre><code>NorOp(lhs: DataType, rhs: DataType, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>BoolBinaryOp</code></p> <p>AST class for logical NOR operation.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/types/operators.py</code> <pre><code>def __init__(\n    self,\n    lhs: DataType,\n    rhs: DataType,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Instantiate AST class for logical NOR operation.\"\"\"\n    super().__init__(\n        op_code=self.op_code,\n        lhs=lhs,\n        rhs=rhs,\n        loc=loc,\n        parent=parent,\n    )\n</code></pre>"},{"location":"api/types/#astx.types.NorOp.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure that represents the object.</p> Source code in <code>src/astx/types/operators.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure that represents the object.\"\"\"\n    key = f\"BOOL_BINARY_OP[{self.__class__.__name__}]\"\n    value: ReprStruct = {\n        \"lhs\": self.lhs.get_struct(simplified),\n        \"rhs\": self.rhs.get_struct(simplified),\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/#astx.types.NorOp.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/#astx.types.NorOp.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/#astx.types.Number","title":"Number","text":"<pre><code>Number(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>AnyType</code></p> <p>Number data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/#astx.types.Number.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/#astx.types.Number.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/#astx.types.Number.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/#astx.types.OrOp","title":"OrOp","text":"<pre><code>OrOp(lhs: DataType, rhs: DataType, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>BoolBinaryOp</code></p> <p>AST class for logical OR operation.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/types/operators.py</code> <pre><code>def __init__(\n    self,\n    lhs: DataType,\n    rhs: DataType,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Instantiate AST class for logical OR operation.\"\"\"\n    super().__init__(\n        op_code=self.op_code,\n        lhs=lhs,\n        rhs=rhs,\n        loc=loc,\n        parent=parent,\n    )\n</code></pre>"},{"location":"api/types/#astx.types.OrOp.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure that represents the object.</p> Source code in <code>src/astx/types/operators.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure that represents the object.\"\"\"\n    key = f\"BOOL_BINARY_OP[{self.__class__.__name__}]\"\n    value: ReprStruct = {\n        \"lhs\": self.lhs.get_struct(simplified),\n        \"rhs\": self.rhs.get_struct(simplified),\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/#astx.types.OrOp.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/#astx.types.OrOp.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/#astx.types.SignedInteger","title":"SignedInteger","text":"<pre><code>SignedInteger(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Integer</code></p> <p>Signed integer number data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/#astx.types.SignedInteger.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/#astx.types.SignedInteger.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/#astx.types.SignedInteger.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/#astx.types.String","title":"String","text":"<pre><code>String(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>AnyType</code></p> <p>Base class for strings.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/#astx.types.String.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/#astx.types.String.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/#astx.types.String.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/#astx.types.Time","title":"Time","text":"<pre><code>Time(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Temporal</code></p> <p>Time data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/#astx.types.Time.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/#astx.types.Time.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/#astx.types.Time.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/#astx.types.Timestamp","title":"Timestamp","text":"<pre><code>Timestamp(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Temporal</code></p> <p>Timestamp data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/#astx.types.Timestamp.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/#astx.types.Timestamp.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/#astx.types.Timestamp.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/#astx.types.TypeCastExpr","title":"TypeCastExpr","text":"<pre><code>TypeCastExpr(expr: Expr, target_type: DataType, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Expr</code></p> <p>AST class for type casting expressions.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the TypeCast expression.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/types/casting.py</code> <pre><code>def __init__(\n    self,\n    expr: Expr,\n    target_type: DataType,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc=loc, parent=parent)\n    self.expr = expr\n    self.target_type = target_type\n    self.kind = ASTKind.TypeCastExprKind\n</code></pre>"},{"location":"api/types/#astx.types.TypeCastExpr.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the TypeCast expression.</p> Source code in <code>src/astx/types/casting.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the TypeCast expression.\"\"\"\n    key = \"TypeCastExpr\"\n    value: ReprStruct = {\n        \"expression\": self.expr.get_struct(simplified),\n        \"target_type\": self.target_type.get_struct(simplified),\n    }\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/#astx.types.TypeCastExpr.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/#astx.types.TypeCastExpr.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/#astx.types.UInt128","title":"UInt128","text":"<pre><code>UInt128(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>UnsignedInteger</code></p> <p>UInt128 data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/#astx.types.UInt128.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/#astx.types.UInt128.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/#astx.types.UInt128.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/#astx.types.UInt16","title":"UInt16","text":"<pre><code>UInt16(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>UnsignedInteger</code></p> <p>UInt16 data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/#astx.types.UInt16.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/#astx.types.UInt16.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/#astx.types.UInt16.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/#astx.types.UInt32","title":"UInt32","text":"<pre><code>UInt32(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>UnsignedInteger</code></p> <p>UInt32 data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/#astx.types.UInt32.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/#astx.types.UInt32.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/#astx.types.UInt32.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/#astx.types.UInt64","title":"UInt64","text":"<pre><code>UInt64(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>UnsignedInteger</code></p> <p>UInt64 data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/#astx.types.UInt64.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/#astx.types.UInt64.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/#astx.types.UInt64.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/#astx.types.UInt8","title":"UInt8","text":"<pre><code>UInt8(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>UnsignedInteger</code></p> <p>UInt8 data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/#astx.types.UInt8.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/#astx.types.UInt8.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/#astx.types.UInt8.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/#astx.types.UTF8Char","title":"UTF8Char","text":"<pre><code>UTF8Char(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>AnyType</code></p> <p>Class for UTF-8 encoded characters.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/#astx.types.UTF8Char.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/#astx.types.UTF8Char.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/#astx.types.UTF8Char.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/#astx.types.UTF8String","title":"UTF8String","text":"<pre><code>UTF8String(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>AnyType</code></p> <p>Class for UTF-8 encoded strings.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/#astx.types.UTF8String.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/#astx.types.UTF8String.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/#astx.types.UTF8String.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/#astx.types.UnaryOp","title":"UnaryOp","text":"<pre><code>UnaryOp(op_code: str, operand: DataType, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>DataTypeOps</code></p> <p>AST class for the unary operator.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/types/operators.py</code> <pre><code>def __init__(\n    self,\n    op_code: str,\n    operand: DataType,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the UnaryOp instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.op_code = op_code\n    self.operand = operand\n    self.kind = ASTKind.UnaryOpKind\n</code></pre>"},{"location":"api/types/#astx.types.UnaryOp.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/types/operators.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    key = f\"UNARY[{self.op_code}]\"\n    value = self.operand.get_struct(simplified)\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/#astx.types.UnaryOp.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/#astx.types.UnaryOp.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/#astx.types.UnsignedInteger","title":"UnsignedInteger","text":"<pre><code>UnsignedInteger(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Integer</code></p> <p>Unsigned integer number data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/#astx.types.UnsignedInteger.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/#astx.types.UnsignedInteger.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/#astx.types.UnsignedInteger.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/#astx.types.XnorOp","title":"XnorOp","text":"<pre><code>XnorOp(lhs: DataType, rhs: DataType, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>BoolBinaryOp</code></p> <p>AST class for logical XNOR operation.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/types/operators.py</code> <pre><code>def __init__(\n    self,\n    lhs: DataType,\n    rhs: DataType,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Instantiate AST class for logical XNOR operation.\"\"\"\n    super().__init__(\n        op_code=self.op_code,\n        lhs=lhs,\n        rhs=rhs,\n        loc=loc,\n        parent=parent,\n    )\n</code></pre>"},{"location":"api/types/#astx.types.XnorOp.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure that represents the object.</p> Source code in <code>src/astx/types/operators.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure that represents the object.\"\"\"\n    key = f\"BOOL_BINARY_OP[{self.__class__.__name__}]\"\n    value: ReprStruct = {\n        \"lhs\": self.lhs.get_struct(simplified),\n        \"rhs\": self.rhs.get_struct(simplified),\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/#astx.types.XnorOp.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/#astx.types.XnorOp.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/#astx.types.XorOp","title":"XorOp","text":"<pre><code>XorOp(lhs: DataType, rhs: DataType, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>BoolBinaryOp</code></p> <p>AST class for logical XOR operation.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/types/operators.py</code> <pre><code>def __init__(\n    self,\n    lhs: DataType,\n    rhs: DataType,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Instantiate AST class for logical XOR operation.\"\"\"\n    super().__init__(\n        op_code=self.op_code,\n        lhs=lhs,\n        rhs=rhs,\n        loc=loc,\n        parent=parent,\n    )\n</code></pre>"},{"location":"api/types/#astx.types.XorOp.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure that represents the object.</p> Source code in <code>src/astx/types/operators.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure that represents the object.\"\"\"\n    key = f\"BOOL_BINARY_OP[{self.__class__.__name__}]\"\n    value: ReprStruct = {\n        \"lhs\": self.lhs.get_struct(simplified),\n        \"rhs\": self.rhs.get_struct(simplified),\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/#astx.types.XorOp.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/#astx.types.XorOp.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/base/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> base","text":""},{"location":"api/types/base/#astx.types.base","title":"base","text":"<p>ASTx Data Types module.</p> <p>Classes:</p> <ul> <li> <code>AnyType</code>           \u2013            <p>Generic data type expression.</p> </li> <li> <code>NoneType</code>           \u2013            <p>NoneType data type expression.</p> </li> </ul>"},{"location":"api/types/base/#astx.types.base.AnyType","title":"AnyType","text":"<pre><code>AnyType(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>DataType</code></p> <p>Generic data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/base/#astx.types.base.AnyType.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/base/#astx.types.base.AnyType.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/base/#astx.types.base.AnyType.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/base/#astx.types.base.NoneType","title":"NoneType","text":"<pre><code>NoneType(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>DataType</code></p> <p>NoneType data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/base/#astx.types.base.NoneType.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/base/#astx.types.base.NoneType.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/base/#astx.types.base.NoneType.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/boolean/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> boolean","text":""},{"location":"api/types/boolean/#astx.types.boolean","title":"boolean","text":"<p>ASTx Data Types module.</p> <p>Classes:</p> <ul> <li> <code>Boolean</code>           \u2013            <p>Boolean data type expression.</p> </li> </ul>"},{"location":"api/types/boolean/#astx.types.boolean.Boolean","title":"Boolean","text":"<pre><code>Boolean(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>AnyType</code></p> <p>Boolean data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/boolean/#astx.types.boolean.Boolean.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/boolean/#astx.types.boolean.Boolean.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/boolean/#astx.types.boolean.Boolean.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/casting/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> casting","text":""},{"location":"api/types/casting/#astx.types.casting","title":"casting","text":"<p>AST types module.</p> <p>Classes:</p> <ul> <li> <code>TypeCastExpr</code>           \u2013            <p>AST class for type casting expressions.</p> </li> </ul>"},{"location":"api/types/casting/#astx.types.casting.TypeCastExpr","title":"TypeCastExpr","text":"<pre><code>TypeCastExpr(expr: Expr, target_type: DataType, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Expr</code></p> <p>AST class for type casting expressions.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the TypeCast expression.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/types/casting.py</code> <pre><code>def __init__(\n    self,\n    expr: Expr,\n    target_type: DataType,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc=loc, parent=parent)\n    self.expr = expr\n    self.target_type = target_type\n    self.kind = ASTKind.TypeCastExprKind\n</code></pre>"},{"location":"api/types/casting/#astx.types.casting.TypeCastExpr.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the TypeCast expression.</p> Source code in <code>src/astx/types/casting.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the TypeCast expression.\"\"\"\n    key = \"TypeCastExpr\"\n    value: ReprStruct = {\n        \"expression\": self.expr.get_struct(simplified),\n        \"target_type\": self.target_type.get_struct(simplified),\n    }\n\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/casting/#astx.types.casting.TypeCastExpr.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/casting/#astx.types.casting.TypeCastExpr.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/numeric/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> numeric","text":""},{"location":"api/types/numeric/#astx.types.numeric","title":"numeric","text":"<p>ASTx Data Types module.</p> <p>Classes:</p> <ul> <li> <code>Complex</code>           \u2013            <p>Base class for complex numbers.</p> </li> <li> <code>Complex32</code>           \u2013            <p>Complex32 data type class.</p> </li> <li> <code>Complex64</code>           \u2013            <p>Complex64 data type class.</p> </li> <li> <code>Float16</code>           \u2013            <p>Float16 data type expression.</p> </li> <li> <code>Float32</code>           \u2013            <p>Float32 data type expression.</p> </li> <li> <code>Float64</code>           \u2013            <p>Float64 data type expression.</p> </li> <li> <code>Floating</code>           \u2013            <p>AST for the literal float number.</p> </li> <li> <code>Int128</code>           \u2013            <p>Int128 data type expression.</p> </li> <li> <code>Int16</code>           \u2013            <p>Int16 data type expression.</p> </li> <li> <code>Int32</code>           \u2013            <p>Int32 data type expression.</p> </li> <li> <code>Int64</code>           \u2013            <p>Int64 data type expression.</p> </li> <li> <code>Int8</code>           \u2013            <p>Int8 data type expression.</p> </li> <li> <code>Integer</code>           \u2013            <p>Integer number data type expression.</p> </li> <li> <code>Number</code>           \u2013            <p>Number data type expression.</p> </li> <li> <code>SignedInteger</code>           \u2013            <p>Signed integer number data type expression.</p> </li> <li> <code>UInt128</code>           \u2013            <p>UInt128 data type expression.</p> </li> <li> <code>UInt16</code>           \u2013            <p>UInt16 data type expression.</p> </li> <li> <code>UInt32</code>           \u2013            <p>UInt32 data type expression.</p> </li> <li> <code>UInt64</code>           \u2013            <p>UInt64 data type expression.</p> </li> <li> <code>UInt8</code>           \u2013            <p>UInt8 data type expression.</p> </li> <li> <code>UnsignedInteger</code>           \u2013            <p>Unsigned integer number data type expression.</p> </li> </ul>"},{"location":"api/types/numeric/#astx.types.numeric.Complex","title":"Complex","text":"<pre><code>Complex(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Number</code></p> <p>Base class for complex numbers.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Complex.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Complex.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Complex.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Complex32","title":"Complex32","text":"<pre><code>Complex32(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Complex</code></p> <p>Complex32 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Complex32.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Complex32.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Complex32.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Complex64","title":"Complex64","text":"<pre><code>Complex64(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Complex</code></p> <p>Complex64 data type class.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Complex64.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Complex64.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Complex64.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Float16","title":"Float16","text":"<pre><code>Float16(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Floating</code></p> <p>Float16 data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Float16.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Float16.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Float16.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Float32","title":"Float32","text":"<pre><code>Float32(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Floating</code></p> <p>Float32 data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Float32.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Float32.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Float32.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Float64","title":"Float64","text":"<pre><code>Float64(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Floating</code></p> <p>Float64 data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Float64.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Float64.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Float64.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Floating","title":"Floating","text":"<pre><code>Floating(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Number</code></p> <p>AST for the literal float number.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Floating.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Floating.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Floating.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Int128","title":"Int128","text":"<pre><code>Int128(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>SignedInteger</code></p> <p>Int128 data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Int128.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Int128.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Int128.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Int16","title":"Int16","text":"<pre><code>Int16(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>SignedInteger</code></p> <p>Int16 data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Int16.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Int16.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Int16.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Int32","title":"Int32","text":"<pre><code>Int32(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>SignedInteger</code></p> <p>Int32 data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Int32.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Int32.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Int32.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Int64","title":"Int64","text":"<pre><code>Int64(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>SignedInteger</code></p> <p>Int64 data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Int64.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Int64.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Int64.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Int8","title":"Int8","text":"<pre><code>Int8(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>SignedInteger</code></p> <p>Int8 data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Int8.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Int8.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Int8.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Integer","title":"Integer","text":"<pre><code>Integer(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>AnyType</code></p> <p>Integer number data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Integer.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Integer.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Integer.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Number","title":"Number","text":"<pre><code>Number(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>AnyType</code></p> <p>Number data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Number.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Number.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.Number.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.SignedInteger","title":"SignedInteger","text":"<pre><code>SignedInteger(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Integer</code></p> <p>Signed integer number data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.SignedInteger.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.SignedInteger.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.SignedInteger.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.UInt128","title":"UInt128","text":"<pre><code>UInt128(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>UnsignedInteger</code></p> <p>UInt128 data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.UInt128.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.UInt128.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.UInt128.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.UInt16","title":"UInt16","text":"<pre><code>UInt16(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>UnsignedInteger</code></p> <p>UInt16 data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.UInt16.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.UInt16.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.UInt16.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.UInt32","title":"UInt32","text":"<pre><code>UInt32(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>UnsignedInteger</code></p> <p>UInt32 data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.UInt32.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.UInt32.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.UInt32.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.UInt64","title":"UInt64","text":"<pre><code>UInt64(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>UnsignedInteger</code></p> <p>UInt64 data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.UInt64.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.UInt64.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.UInt64.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.UInt8","title":"UInt8","text":"<pre><code>UInt8(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>UnsignedInteger</code></p> <p>UInt8 data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.UInt8.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.UInt8.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.UInt8.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.UnsignedInteger","title":"UnsignedInteger","text":"<pre><code>UnsignedInteger(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Integer</code></p> <p>Unsigned integer number data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.UnsignedInteger.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.UnsignedInteger.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/numeric/#astx.types.numeric.UnsignedInteger.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/operators/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> operators","text":""},{"location":"api/types/operators/#astx.types.operators","title":"operators","text":"<p>ASTx Data Types module.</p> <p>Classes:</p> <ul> <li> <code>AndOp</code>           \u2013            <p>AST class for logical AND operation.</p> </li> <li> <code>BinaryOp</code>           \u2013            <p>AST class for the binary operator.</p> </li> <li> <code>BoolBinaryOp</code>           \u2013            <p>Base AST class for boolean binary operations.</p> </li> <li> <code>BoolUnaryOp</code>           \u2013            <p>Base AST class for boolean unary operations.</p> </li> <li> <code>DataTypeOps</code>           \u2013            <p>Overload some magic functions used for the main operations.</p> </li> <li> <code>NandOp</code>           \u2013            <p>AST class for logical NAND operation.</p> </li> <li> <code>NorOp</code>           \u2013            <p>AST class for logical NOR operation.</p> </li> <li> <code>NotOp</code>           \u2013            <p>AST class for logical NOT operation.</p> </li> <li> <code>OrOp</code>           \u2013            <p>AST class for logical OR operation.</p> </li> <li> <code>UnaryOp</code>           \u2013            <p>AST class for the unary operator.</p> </li> <li> <code>XnorOp</code>           \u2013            <p>AST class for logical XNOR operation.</p> </li> <li> <code>XorOp</code>           \u2013            <p>AST class for logical XOR operation.</p> </li> </ul>"},{"location":"api/types/operators/#astx.types.operators.AndOp","title":"AndOp","text":"<pre><code>AndOp(lhs: DataType, rhs: DataType, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>BoolBinaryOp</code></p> <p>AST class for logical AND operation.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/types/operators.py</code> <pre><code>def __init__(\n    self,\n    lhs: DataType,\n    rhs: DataType,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Instantiate AST class for logical AND operation.\"\"\"\n    super().__init__(\n        op_code=self.op_code,\n        lhs=lhs,\n        rhs=rhs,\n        loc=loc,\n        parent=parent,\n    )\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.AndOp.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure that represents the object.</p> Source code in <code>src/astx/types/operators.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure that represents the object.\"\"\"\n    key = f\"BOOL_BINARY_OP[{self.__class__.__name__}]\"\n    value: ReprStruct = {\n        \"lhs\": self.lhs.get_struct(simplified),\n        \"rhs\": self.rhs.get_struct(simplified),\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.AndOp.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.AndOp.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.BinaryOp","title":"BinaryOp","text":"<pre><code>BinaryOp(op_code: str, lhs: DataType, rhs: DataType, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>DataTypeOps</code></p> <p>AST class for the binary operator.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/types/operators.py</code> <pre><code>def __init__(\n    self,\n    op_code: str,\n    lhs: DataType,\n    rhs: DataType,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the BinaryOp instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n\n    self.op_code = op_code\n    self.lhs = lhs\n    self.rhs = rhs\n    self.kind = ASTKind.BinaryOpKind\n\n    if not (\n        isinstance(lhs.type_, DataType) and isinstance(rhs.type_, DataType)\n    ):\n        raise Exception(\n            \"For now, binary operators are just allowed for `DataType`.\"\n            f\"LHS: {lhs.type_}, RHS: {rhs.type_}\"\n        )\n\n    if lhs.type_ == rhs.type_:\n        self.type_ = lhs.type_\n    else:\n        # type inference\n        self.type_ = max([lhs.type_, rhs.type_], key=lambda v: v.nbytes)\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.BinaryOp.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure that represents the object.</p> Source code in <code>src/astx/types/operators.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure that represents the object.\"\"\"\n    key = f\"BINARY[{self.op_code}]\"\n    lhs = {\"lhs\": self.lhs.get_struct(simplified)}\n    rhs = {\"rhs\": self.rhs.get_struct(simplified)}\n\n    content: ReprStruct = {**lhs, **rhs}\n    return self._prepare_struct(key, content, simplified)\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.BinaryOp.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.BinaryOp.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.BoolBinaryOp","title":"BoolBinaryOp","text":"<pre><code>BoolBinaryOp(op_code: str, lhs: DataType, rhs: DataType, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>BinaryOp</code></p> <p>Base AST class for boolean binary operations.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/types/operators.py</code> <pre><code>def __init__(\n    self,\n    op_code: str,\n    lhs: DataType,\n    rhs: DataType,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(\n        op_code=op_code,\n        lhs=lhs,\n        rhs=rhs,\n        loc=loc,\n        parent=parent,\n    )\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.BoolBinaryOp.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure that represents the object.</p> Source code in <code>src/astx/types/operators.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure that represents the object.\"\"\"\n    key = f\"BOOL_BINARY_OP[{self.__class__.__name__}]\"\n    value: ReprStruct = {\n        \"lhs\": self.lhs.get_struct(simplified),\n        \"rhs\": self.rhs.get_struct(simplified),\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.BoolBinaryOp.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.BoolBinaryOp.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.BoolUnaryOp","title":"BoolUnaryOp","text":"<pre><code>BoolUnaryOp(op_code: str, operand: DataType, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>UnaryOp</code></p> <p>Base AST class for boolean unary operations.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/types/operators.py</code> <pre><code>def __init__(\n    self,\n    op_code: str,\n    operand: DataType,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(\n        op_code=op_code,\n        operand=operand,\n        loc=loc,\n        parent=parent,\n    )\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.BoolUnaryOp.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure that represents the object.</p> Source code in <code>src/astx/types/operators.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure that represents the object.\"\"\"\n    key = f\"BOOL_UNARY_OP[{self.__class__.__name__}]\"\n    value: ReprStruct = {\"operand\": self.operand.get_struct(simplified)}\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.BoolUnaryOp.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.BoolUnaryOp.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.DataTypeOps","title":"DataTypeOps","text":"<pre><code>DataTypeOps(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>DataType</code></p> <p>Overload some magic functions used for the main operations.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.DataTypeOps.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.DataTypeOps.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.DataTypeOps.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.NandOp","title":"NandOp","text":"<pre><code>NandOp(lhs: DataType, rhs: DataType, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>BoolBinaryOp</code></p> <p>AST class for logical NAND operation.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/types/operators.py</code> <pre><code>def __init__(\n    self,\n    lhs: DataType,\n    rhs: DataType,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Instantiate AST class for logical NAND operation.\"\"\"\n    super().__init__(\n        op_code=self.op_code,\n        lhs=lhs,\n        rhs=rhs,\n        loc=loc,\n        parent=parent,\n    )\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.NandOp.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure that represents the object.</p> Source code in <code>src/astx/types/operators.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure that represents the object.\"\"\"\n    key = f\"BOOL_BINARY_OP[{self.__class__.__name__}]\"\n    value: ReprStruct = {\n        \"lhs\": self.lhs.get_struct(simplified),\n        \"rhs\": self.rhs.get_struct(simplified),\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.NandOp.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.NandOp.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.NorOp","title":"NorOp","text":"<pre><code>NorOp(lhs: DataType, rhs: DataType, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>BoolBinaryOp</code></p> <p>AST class for logical NOR operation.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/types/operators.py</code> <pre><code>def __init__(\n    self,\n    lhs: DataType,\n    rhs: DataType,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Instantiate AST class for logical NOR operation.\"\"\"\n    super().__init__(\n        op_code=self.op_code,\n        lhs=lhs,\n        rhs=rhs,\n        loc=loc,\n        parent=parent,\n    )\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.NorOp.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure that represents the object.</p> Source code in <code>src/astx/types/operators.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure that represents the object.\"\"\"\n    key = f\"BOOL_BINARY_OP[{self.__class__.__name__}]\"\n    value: ReprStruct = {\n        \"lhs\": self.lhs.get_struct(simplified),\n        \"rhs\": self.rhs.get_struct(simplified),\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.NorOp.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.NorOp.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.NotOp","title":"NotOp","text":"<pre><code>NotOp(operand: DataType, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>BoolUnaryOp</code></p> <p>AST class for logical NOT operation.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/types/operators.py</code> <pre><code>def __init__(\n    self,\n    operand: DataType,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Instantiate AST class for logical NOT operation.\"\"\"\n    super().__init__(\n        op_code=self.op_code,\n        operand=operand,\n        loc=loc,\n        parent=parent,\n    )\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.NotOp.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure that represents the object.</p> Source code in <code>src/astx/types/operators.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure that represents the object.\"\"\"\n    key = f\"BOOL_UNARY_OP[{self.__class__.__name__}]\"\n    value: ReprStruct = {\"operand\": self.operand.get_struct(simplified)}\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.NotOp.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.NotOp.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.OrOp","title":"OrOp","text":"<pre><code>OrOp(lhs: DataType, rhs: DataType, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>BoolBinaryOp</code></p> <p>AST class for logical OR operation.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/types/operators.py</code> <pre><code>def __init__(\n    self,\n    lhs: DataType,\n    rhs: DataType,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Instantiate AST class for logical OR operation.\"\"\"\n    super().__init__(\n        op_code=self.op_code,\n        lhs=lhs,\n        rhs=rhs,\n        loc=loc,\n        parent=parent,\n    )\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.OrOp.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure that represents the object.</p> Source code in <code>src/astx/types/operators.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure that represents the object.\"\"\"\n    key = f\"BOOL_BINARY_OP[{self.__class__.__name__}]\"\n    value: ReprStruct = {\n        \"lhs\": self.lhs.get_struct(simplified),\n        \"rhs\": self.rhs.get_struct(simplified),\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.OrOp.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.OrOp.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.UnaryOp","title":"UnaryOp","text":"<pre><code>UnaryOp(op_code: str, operand: DataType, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>DataTypeOps</code></p> <p>AST class for the unary operator.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure of the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/types/operators.py</code> <pre><code>def __init__(\n    self,\n    op_code: str,\n    operand: DataType,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Initialize the UnaryOp instance.\"\"\"\n    super().__init__(loc=loc, parent=parent)\n    self.op_code = op_code\n    self.operand = operand\n    self.kind = ASTKind.UnaryOpKind\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.UnaryOp.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure of the object.</p> Source code in <code>src/astx/types/operators.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure of the object.\"\"\"\n    key = f\"UNARY[{self.op_code}]\"\n    value = self.operand.get_struct(simplified)\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.UnaryOp.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.UnaryOp.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.XnorOp","title":"XnorOp","text":"<pre><code>XnorOp(lhs: DataType, rhs: DataType, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>BoolBinaryOp</code></p> <p>AST class for logical XNOR operation.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/types/operators.py</code> <pre><code>def __init__(\n    self,\n    lhs: DataType,\n    rhs: DataType,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Instantiate AST class for logical XNOR operation.\"\"\"\n    super().__init__(\n        op_code=self.op_code,\n        lhs=lhs,\n        rhs=rhs,\n        loc=loc,\n        parent=parent,\n    )\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.XnorOp.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure that represents the object.</p> Source code in <code>src/astx/types/operators.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure that represents the object.\"\"\"\n    key = f\"BOOL_BINARY_OP[{self.__class__.__name__}]\"\n    value: ReprStruct = {\n        \"lhs\": self.lhs.get_struct(simplified),\n        \"rhs\": self.rhs.get_struct(simplified),\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.XnorOp.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.XnorOp.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.XorOp","title":"XorOp","text":"<pre><code>XorOp(lhs: DataType, rhs: DataType, loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>BoolBinaryOp</code></p> <p>AST class for logical XOR operation.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return the AST structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/types/operators.py</code> <pre><code>def __init__(\n    self,\n    lhs: DataType,\n    rhs: DataType,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    \"\"\"Instantiate AST class for logical XOR operation.\"\"\"\n    super().__init__(\n        op_code=self.op_code,\n        lhs=lhs,\n        rhs=rhs,\n        loc=loc,\n        parent=parent,\n    )\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.XorOp.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return the AST structure that represents the object.</p> Source code in <code>src/astx/types/operators.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return the AST structure that represents the object.\"\"\"\n    key = f\"BOOL_BINARY_OP[{self.__class__.__name__}]\"\n    value: ReprStruct = {\n        \"lhs\": self.lhs.get_struct(simplified),\n        \"rhs\": self.rhs.get_struct(simplified),\n    }\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.XorOp.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/operators/#astx.types.operators.XorOp.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/string/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> string","text":""},{"location":"api/types/string/#astx.types.string","title":"string","text":"<p>ASTx Data Types module.</p> <p>Classes:</p> <ul> <li> <code>String</code>           \u2013            <p>Base class for strings.</p> </li> <li> <code>UTF8Char</code>           \u2013            <p>Class for UTF-8 encoded characters.</p> </li> <li> <code>UTF8String</code>           \u2013            <p>Class for UTF-8 encoded strings.</p> </li> </ul>"},{"location":"api/types/string/#astx.types.string.String","title":"String","text":"<pre><code>String(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>AnyType</code></p> <p>Base class for strings.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/string/#astx.types.string.String.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/string/#astx.types.string.String.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/string/#astx.types.string.String.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/string/#astx.types.string.UTF8Char","title":"UTF8Char","text":"<pre><code>UTF8Char(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>AnyType</code></p> <p>Class for UTF-8 encoded characters.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/string/#astx.types.string.UTF8Char.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/string/#astx.types.string.UTF8Char.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/string/#astx.types.string.UTF8Char.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/string/#astx.types.string.UTF8String","title":"UTF8String","text":"<pre><code>UTF8String(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>AnyType</code></p> <p>Class for UTF-8 encoded strings.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/string/#astx.types.string.UTF8String.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/string/#astx.types.string.UTF8String.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/string/#astx.types.string.UTF8String.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/temporal/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> temporal","text":""},{"location":"api/types/temporal/#astx.types.temporal","title":"temporal","text":"<p>ASTx Data Types module.</p> <p>Classes:</p> <ul> <li> <code>Date</code>           \u2013            <p>Date data type expression.</p> </li> <li> <code>DateTime</code>           \u2013            <p>DateTime data type expression.</p> </li> <li> <code>Temporal</code>           \u2013            <p>Base class for temporal data types (date, time, timestamp, datetime).</p> </li> <li> <code>Time</code>           \u2013            <p>Time data type expression.</p> </li> <li> <code>Timestamp</code>           \u2013            <p>Timestamp data type expression.</p> </li> </ul>"},{"location":"api/types/temporal/#astx.types.temporal.Date","title":"Date","text":"<pre><code>Date(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Temporal</code></p> <p>Date data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/temporal/#astx.types.temporal.Date.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/temporal/#astx.types.temporal.Date.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/temporal/#astx.types.temporal.Date.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/temporal/#astx.types.temporal.DateTime","title":"DateTime","text":"<pre><code>DateTime(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Temporal</code></p> <p>DateTime data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/temporal/#astx.types.temporal.DateTime.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/temporal/#astx.types.temporal.DateTime.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/temporal/#astx.types.temporal.DateTime.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/temporal/#astx.types.temporal.Temporal","title":"Temporal","text":"<pre><code>Temporal(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>AnyType</code></p> <p>Base class for temporal data types (date, time, timestamp, datetime).</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/temporal/#astx.types.temporal.Temporal.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/temporal/#astx.types.temporal.Temporal.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/temporal/#astx.types.temporal.Temporal.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/temporal/#astx.types.temporal.Time","title":"Time","text":"<pre><code>Time(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Temporal</code></p> <p>Time data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/temporal/#astx.types.temporal.Time.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/temporal/#astx.types.temporal.Time.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/temporal/#astx.types.temporal.Time.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/temporal/#astx.types.temporal.Timestamp","title":"Timestamp","text":"<pre><code>Timestamp(loc: SourceLocation = NO_SOURCE_LOCATION, parent: Optional[ASTNodes] = None)\n</code></pre> <p>               Bases: <code>Temporal</code></p> <p>Timestamp data type expression.</p> <p>Methods:</p> <ul> <li> <code>get_struct</code>             \u2013              <p>Return a simple structure that represents the object.</p> </li> <li> <code>to_json</code>             \u2013              <p>Return an json string that represents the object.</p> </li> <li> <code>to_yaml</code>             \u2013              <p>Return an yaml string that represents the object.</p> </li> </ul> Source code in <code>src/astx/base.py</code> <pre><code>def __init__(\n    self,\n    loc: SourceLocation = NO_SOURCE_LOCATION,\n    parent: Optional[ASTNodes] = None,\n) -&gt; None:\n    super().__init__(loc)\n    self.name = f\"temp_{DataType._tmp_id}\"\n    DataType._tmp_id += 1\n    # set it as a generic data type\n    self.type_: ExprType = ExprType()\n    self.parent = parent\n</code></pre>"},{"location":"api/types/temporal/#astx.types.temporal.Timestamp.get_struct","title":"get_struct","text":"<pre><code>get_struct(simplified: bool = False) -&gt; ReprStruct\n</code></pre> <p>Return a simple structure that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def get_struct(self, simplified: bool = False) -&gt; ReprStruct:\n    \"\"\"Return a simple structure that represents the object.\"\"\"\n    key = f\"DATA-TYPE[{self.__class__.__name__}]\"\n    value = self.name\n    return self._prepare_struct(key, value, simplified)\n</code></pre>"},{"location":"api/types/temporal/#astx.types.temporal.Timestamp.to_json","title":"to_json","text":"<pre><code>to_json(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an json string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_json(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an json string that represents the object.\"\"\"\n    return json.dumps(self.get_struct(simplified=simplified), indent=2)\n</code></pre>"},{"location":"api/types/temporal/#astx.types.temporal.Timestamp.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(simplified: bool = False) -&gt; str\n</code></pre> <p>Return an yaml string that represents the object.</p> Source code in <code>src/astx/base.py</code> <pre><code>def to_yaml(self, simplified: bool = False) -&gt; str:\n    \"\"\"Return an yaml string that represents the object.\"\"\"\n    return str(\n        yaml.dump(self.get_struct(simplified=simplified), sort_keys=False)\n    )\n</code></pre>"},{"location":"api/types/ttypes/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> ttypes","text":""},{"location":"api/types/ttypes/#astx.types.ttypes","title":"ttypes","text":"<p>Constant objects.</p>"},{"location":"tutorials/context/","title":"Adding Nodes into Specific Contexts in ASTx","text":"<p>In abstract syntax tree (AST) manipulations, context or scope management is crucial for correctly placing nodes within the tree. This tutorial will discuss two methods to add nodes into specific contexts or scopes using the <code>ASTx</code> library, which provides a comprehensive framework for constructing and manipulating ASTs.</p> In\u00a0[1]: Copied! <pre>import astx\n</pre> import astx In\u00a0[2]: Copied! <pre># skip warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n</pre> # skip warnings import warnings warnings.filterwarnings(\"ignore\") In\u00a0[3]: Copied! <pre># Initialize the ASTx module\nmodule = astx.Module()\n\n# Declare variables 'a', 'b', and 'c' with initial values\ndecl_a = astx.VariableDeclaration(name=\"a\", type_=astx.Int32(), value=astx.LiteralInt32(1))\ndecl_b = astx.VariableDeclaration(name=\"b\", type_=astx.Int32(), value=astx.LiteralInt32(2))\ndecl_c = astx.VariableDeclaration(name=\"c\", type_=astx.Int32(), value=astx.LiteralInt32(1))\n\n# Reassign a new value to variable 'c'\nassign_c = astx.VariableAssignment(name=\"c\", value=astx.LiteralInt32(3))\n\n# Create ASTx Variable objects\na = astx.Variable(name=\"a\")\nb = astx.Variable(name=\"b\")\nc = astx.Variable(name=\"c\")\n\n# Create a literal integer\nlit_1 = astx.LiteralInt32(1)\n\n# Perform basic operations\nbasic_op = lit_1 + b - a * c / a\n\n# Define the main function prototype\nmain_proto = astx.FunctionPrototype(\n    name=\"main\", args=astx.Arguments(), return_type=astx.Int32()\n)\n\n# Create a block of code and append variable declarations and operations\nmain_block = astx.Block()\nmain_block.append(decl_a)\nmain_block.append(decl_b)\nmain_block.append(decl_c)\nmain_block.append(assign_c)\nmain_block.append(astx.FunctionReturn(basic_op))\n\n# Define the main function with its body\nmain_fn = astx.Function(prototype=main_proto, body=main_block)\n\n# Append the main function to the module block\nmodule.block.append(main_fn)\nmodule\n</pre> # Initialize the ASTx module module = astx.Module()  # Declare variables 'a', 'b', and 'c' with initial values decl_a = astx.VariableDeclaration(name=\"a\", type_=astx.Int32(), value=astx.LiteralInt32(1)) decl_b = astx.VariableDeclaration(name=\"b\", type_=astx.Int32(), value=astx.LiteralInt32(2)) decl_c = astx.VariableDeclaration(name=\"c\", type_=astx.Int32(), value=astx.LiteralInt32(1))  # Reassign a new value to variable 'c' assign_c = astx.VariableAssignment(name=\"c\", value=astx.LiteralInt32(3))  # Create ASTx Variable objects a = astx.Variable(name=\"a\") b = astx.Variable(name=\"b\") c = astx.Variable(name=\"c\")  # Create a literal integer lit_1 = astx.LiteralInt32(1)  # Perform basic operations basic_op = lit_1 + b - a * c / a  # Define the main function prototype main_proto = astx.FunctionPrototype(     name=\"main\", args=astx.Arguments(), return_type=astx.Int32() )  # Create a block of code and append variable declarations and operations main_block = astx.Block() main_block.append(decl_a) main_block.append(decl_b) main_block.append(decl_c) main_block.append(assign_c) main_block.append(astx.FunctionReturn(basic_op))  # Define the main function with its body main_fn = astx.Function(prototype=main_proto, body=main_block)  # Append the main function to the module block module.block.append(main_fn) module Out[3]: <pre></pre> In\u00a0[4]: Copied! <pre># Initialize the ASTx module\nmodule = astx.Module()\n\nmain_block = astx.Block()\n\n# Define the main function prototype\nmain_proto = astx.FunctionPrototype(\n    name=\"main\", args=astx.Arguments(), return_type=astx.Int32()\n)\n# Define the main function with its body\nmain_fn = astx.Function(prototype=main_proto, body=main_block, parent=module)\n\n# Declare variables 'a', 'b', and 'c' with initial values\ndecl_a = astx.VariableDeclaration(name=\"a\", type_=astx.Int32(), value=astx.LiteralInt32(1), parent=main_block)\ndecl_b = astx.VariableDeclaration(name=\"b\", type_=astx.Int32(), value=astx.LiteralInt32(2), parent=main_block)\ndecl_c = astx.VariableDeclaration(name=\"c\", type_=astx.Int32(), value=astx.LiteralInt32(1), parent=main_block)\n\n# Reassign a new value to variable 'c'\nassign_c = astx.VariableAssignment(name=\"c\", value=astx.LiteralInt32(3), parent=main_block)\n\n# Create ASTx Variable objects\na = astx.Variable(name=\"a\")\nb = astx.Variable(name=\"b\")\nc = astx.Variable(name=\"c\")\n\n# Create a literal integer\nlit_1 = astx.LiteralInt32(1)\n\n# Perform basic operations\nbasic_op = lit_1 + b - a * c / a\nastx.FunctionReturn(basic_op, parent=main_block)\n\nmodule\n</pre> # Initialize the ASTx module module = astx.Module()  main_block = astx.Block()  # Define the main function prototype main_proto = astx.FunctionPrototype(     name=\"main\", args=astx.Arguments(), return_type=astx.Int32() ) # Define the main function with its body main_fn = astx.Function(prototype=main_proto, body=main_block, parent=module)  # Declare variables 'a', 'b', and 'c' with initial values decl_a = astx.VariableDeclaration(name=\"a\", type_=astx.Int32(), value=astx.LiteralInt32(1), parent=main_block) decl_b = astx.VariableDeclaration(name=\"b\", type_=astx.Int32(), value=astx.LiteralInt32(2), parent=main_block) decl_c = astx.VariableDeclaration(name=\"c\", type_=astx.Int32(), value=astx.LiteralInt32(1), parent=main_block)  # Reassign a new value to variable 'c' assign_c = astx.VariableAssignment(name=\"c\", value=astx.LiteralInt32(3), parent=main_block)  # Create ASTx Variable objects a = astx.Variable(name=\"a\") b = astx.Variable(name=\"b\") c = astx.Variable(name=\"c\")  # Create a literal integer lit_1 = astx.LiteralInt32(1)  # Perform basic operations basic_op = lit_1 + b - a * c / a astx.FunctionReturn(basic_op, parent=main_block)  module Out[4]: <pre></pre>"},{"location":"tutorials/context/#adding-nodes-into-specific-contexts-in-astx","title":"Adding Nodes into Specific Contexts in ASTx\u00b6","text":""},{"location":"tutorials/context/#introduction","title":"Introduction\u00b6","text":""},{"location":"tutorials/context/#setup","title":"Setup\u00b6","text":"<p>Before you begin, make sure you have the <code>ASTx</code> library installed and imported in your Python environment:</p>"},{"location":"tutorials/context/#example-setup","title":"Example Setup\u00b6","text":"<p>We will explore two methods for adding nodes into specific contexts, 1) with <code>append</code> method into the parent object, and 2) with the <code>parent</code> attribute.</p>"},{"location":"tutorials/context/#method-1-using-the-parent-attribute","title":"Method 1: Using the <code>parent</code> Attribute\u00b6","text":"<p>One effective way to manage context is by directly adding new child nodes into the parent one. This method doesn't require the creation of the <code>parent</code> node first:</p>"},{"location":"tutorials/context/#using-parent-argument","title":"Using <code>parent</code> argument\u00b6","text":"<p>If you prefer to add a new node automatically into the parent node, you can use the <code>parent</code> argument, pointing it to the desired parent node:</p>"},{"location":"tutorials/context/#conclusion","title":"Conclusion\u00b6","text":"<p>In this tutorial, we explored two methods for adding nodes into specific contexts or scopes in ASTs using the <code>ASTx</code> library. By correctly managing the context of nodes, developers can ensure that the AST accurately represents the intended structure of the source code, which is essential for further analysis or transformations. Whether you choose to manually add the child node into the parent node or using the <code>parent</code> argument, <code>ASTx</code> provides the flexibility to suit various coding styles and requirements.</p>"},{"location":"tutorials/fibonacci/","title":"Fibonacci Sequence with ASTx","text":"In\u00a0[1]: Copied! <pre>def fib(n: int):\n    if n in {0, 1}:\n        return n\n    return fib(n - 1) + fib(n - 2)\n</pre> def fib(n: int):     if n in {0, 1}:         return n     return fib(n - 1) + fib(n - 2) In\u00a0[2]: Copied! <pre># skip warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n</pre> # skip warnings import warnings warnings.filterwarnings(\"ignore\") In\u00a0[3]: Copied! <pre>import astx\n\n# Initialize the ASTx module\nmodule = astx.Module()\n\n# Define the Fibonacci function prototype\nfib_proto = astx.FunctionPrototype(\n    name=\"fib\", \n    args=astx.Arguments(astx.Argument(\"n\", astx.Int32())), \n    return_type=astx.Int32()\n)\n\n# Create the function body block\nfib_block = astx.Block()\n\n# Define the function with its body\nfib_fn = astx.Function(prototype=fib_proto, body=fib_block)\n\n# Base case: if (n &lt;= 1) return n;\nbase_case_cond = astx.BinaryOp(\n    op_code=\"&lt;=\", \n    lhs=astx.Variable(name=\"n\"), \n    rhs=astx.LiteralInt32(1)\n)\n\nbase_case_block = astx.Block()\nbase_case_return = astx.FunctionReturn(astx.Variable(name=\"n\"))\nbase_case_block.append(base_case_return)\n\nbase_case_if = astx.IfStmt(condition=base_case_cond, then=base_case_block)\n\n# Recursive case: return fib(n - 1) + fib(n - 2);\nfib_n1_call = astx.FunctionCall(\n    fib_fn, \n    args=(\n        astx.BinaryOp(\n            op_code=\"-\", \n            lhs=astx.Variable(name=\"n\"), \n            rhs=astx.LiteralInt32(1)\n        ),\n    )\n)\nfib_n2_call = astx.FunctionCall(\n    fib_fn, \n    args=(\n        astx.BinaryOp(\n            op_code=\"-\", \n            lhs=astx.Variable(name=\"n\"), \n            rhs=astx.LiteralInt32(2)\n        ),\n    )\n)\nrecursive_return = astx.FunctionReturn(\n    astx.BinaryOp(\n        op_code=\"+\",\n        lhs=fib_n1_call,\n        rhs=fib_n2_call\n    )\n)\n\n# Append base case and recursive case to the function body\nfib_block.append(base_case_if)\nfib_block.append(recursive_return)\n\n# Append the Fibonacci function to the module block\nmodule.block.append(fib_fn)\n\n# Display the module's structure\nmodule\n</pre> import astx  # Initialize the ASTx module module = astx.Module()  # Define the Fibonacci function prototype fib_proto = astx.FunctionPrototype(     name=\"fib\",      args=astx.Arguments(astx.Argument(\"n\", astx.Int32())),      return_type=astx.Int32() )  # Create the function body block fib_block = astx.Block()  # Define the function with its body fib_fn = astx.Function(prototype=fib_proto, body=fib_block)  # Base case: if (n &lt;= 1) return n; base_case_cond = astx.BinaryOp(     op_code=\"&lt;=\",      lhs=astx.Variable(name=\"n\"),      rhs=astx.LiteralInt32(1) )  base_case_block = astx.Block() base_case_return = astx.FunctionReturn(astx.Variable(name=\"n\")) base_case_block.append(base_case_return)  base_case_if = astx.IfStmt(condition=base_case_cond, then=base_case_block)  # Recursive case: return fib(n - 1) + fib(n - 2); fib_n1_call = astx.FunctionCall(     fib_fn,      args=(         astx.BinaryOp(             op_code=\"-\",              lhs=astx.Variable(name=\"n\"),              rhs=astx.LiteralInt32(1)         ),     ) ) fib_n2_call = astx.FunctionCall(     fib_fn,      args=(         astx.BinaryOp(             op_code=\"-\",              lhs=astx.Variable(name=\"n\"),              rhs=astx.LiteralInt32(2)         ),     ) ) recursive_return = astx.FunctionReturn(     astx.BinaryOp(         op_code=\"+\",         lhs=fib_n1_call,         rhs=fib_n2_call     ) )  # Append base case and recursive case to the function body fib_block.append(base_case_if) fib_block.append(recursive_return)  # Append the Fibonacci function to the module block module.block.append(fib_fn)  # Display the module's structure module Out[3]: <pre></pre>"},{"location":"tutorials/fibonacci/#fibonacci-sequence-with-astx","title":"Fibonacci Sequence with ASTx\u00b6","text":""},{"location":"tutorials/fibonacci/#introduction","title":"Introduction\u00b6","text":"<p>The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. The sequence typically looks like this: 0, 1, 1, 2, 3, 5, 8, 13, 21, and so on. It is a common example used to illustrate concepts in programming, including recursion and iterative loops.</p> <p>As mentioned by Fibonacci Sequence Wiki, the Fibonacci numbers may be defined by the recurrence relation:</p> <p>$F_0 = 0$, $F_1 = 1$,</p> <p>and</p> <p>$F_n = F_{n\u22121} + F_{n\u22122}$</p> <p>for n &gt; 1.</p> <p>Under some older definitions, the value $F_0= 0$ is omitted, so that the sequence starts with $F_1 = F_2 = 1$, and the recurrence $F_n = F_{n-1} + F_{n-2}$ is valid for n &gt; 2.</p> <p>In this section, we'll demonstrate how to implement a Fibonacci sequence generator using ASTx. We'll focus on creating an AST for a function that computes Fibonacci numbers using an iterative approach.</p> <p>As a reference, let's use the following Python code:</p>"},{"location":"tutorials/fibonacci/#steps-to-implement-fibonacci-with-astx","title":"Steps to Implement Fibonacci with ASTx\u00b6","text":"<ol> <li>Define the Function Prototype: This includes the function name and parameters.</li> <li>Declare Variables: Variables needed for the iterative computation.</li> <li>Create the Loop: Implement the loop to compute the Fibonacci sequence.</li> <li>Return the Result: Return the computed Fibonacci number.</li> </ol>"},{"location":"tutorials/fibonacci/#implementation","title":"Implementation\u00b6","text":"<p>Below is the Python code to create an AST for a Fibonacci function using ASTx. Note that the ASTx library and its components need to be defined as per your setup.</p>"},{"location":"tutorials/fibonacci/#explanation","title":"Explanation\u00b6","text":"<ol> <li>Module Initialization: We start by initializing the ASTx module.</li> <li>Function Prototype: We define the prototype of the Fibonacci function, which takes an integer <code>n</code> and returns an integer.</li> <li>Variable Declarations: We declare the necessary variables for the computation: <code>a</code>, <code>b</code>, and <code>i</code>.</li> <li>Loop Construction: We create a while loop that iterates until <code>i</code> is less than <code>n</code>. Inside the loop, we update the variables <code>a</code>, <code>b</code>, and <code>i</code> to compute the Fibonacci sequence.</li> <li>Return Statement: We add a return statement to return the computed Fibonacci number (<code>b</code>).</li> <li>Appending to the Module: Finally, we append the function definition to the module and print the module's structure to visualize the AST.</li> </ol>"},{"location":"tutorials/fibonacci/#conclusion","title":"Conclusion\u00b6","text":"<p>By following these steps, you can implement the Fibonacci sequence generator using ASTx. This example demonstrates how to use ASTx to create an AST for a simple function, showcasing the flexibility and power of the library. You can extend this example with additional features or optimizations as needed.</p>"},{"location":"tutorials/for-loop/","title":"Exploring For Loops in ASTx: A Detailed Guide","text":"In\u00a0[1]: Copied! <pre>import astx\n</pre> import astx In\u00a0[2]: Copied! <pre>import warnings\nwarnings.filterwarnings(\"ignore\")\n</pre> import warnings warnings.filterwarnings(\"ignore\") <p>With ASTx imported, we're now ready to explore the different types of loops it supports.</p> In\u00a0[3]: Copied! <pre># Declare a loop variable\ndecl_a = astx.InlineVariableDeclaration(\n    \"a\",\n    type_=astx.Int32(),\n)\n\n# Create a block for loop body\nbody_for = astx.Block()\nbody_for.append(\n    astx.VariableAssignment(\n        name=\"x\",\n        value=astx.Variable(\"a\") + astx.LiteralInt32(1)\n    )\n)\n\n# Define a For Range Expression from 0 to 10 with step 1\nfor_1000 = astx.ForRangeLoopExpr(\n    start=astx.LiteralInt32(0),\n    end=astx.LiteralInt32(10),\n    step=astx.LiteralInt32(1),\n    variable=decl_a,\n    body=body_for\n)\n\nfor_1000\n</pre> # Declare a loop variable decl_a = astx.InlineVariableDeclaration(     \"a\",     type_=astx.Int32(), )  # Create a block for loop body body_for = astx.Block() body_for.append(     astx.VariableAssignment(         name=\"x\",         value=astx.Variable(\"a\") + astx.LiteralInt32(1)     ) )  # Define a For Range Expression from 0 to 10 with step 1 for_1000 = astx.ForRangeLoopExpr(     start=astx.LiteralInt32(0),     end=astx.LiteralInt32(10),     step=astx.LiteralInt32(1),     variable=decl_a,     body=body_for )  for_1000 Out[3]: <pre></pre> <p>In this example, we declare an inline variable <code>a</code> of type <code>Int32</code>. The <code>ForRangeLoop</code> is then defined with this variable, starting at 0, ending at 10, and stepping by 1 on each iteration. The loop's body, which will contain the instructions to be repeated, is currently an empty block.</p> In\u00a0[4]: Copied! <pre># Declare and initialize the loop variable\ndecl_a = astx.InlineVariableDeclaration(\"a\", type_=astx.Int32(), value=astx.LiteralInt32(0))\nvar_a = astx.Variable(\"a\")\n\n# Create a block for loop body\nbody_for = astx.Block()\n\n# Define a For Count Loop\nfor_counter = astx.ForCountLoopStmt(\n    initializer=decl_a,\n    condition=var_a &lt; astx.LiteralInt32(10),\n    update=astx.UnaryOp(\"++\", var_a),\n    body=body_for\n)\n\nfor_counter\n</pre> # Declare and initialize the loop variable decl_a = astx.InlineVariableDeclaration(\"a\", type_=astx.Int32(), value=astx.LiteralInt32(0)) var_a = astx.Variable(\"a\")  # Create a block for loop body body_for = astx.Block()  # Define a For Count Loop for_counter = astx.ForCountLoopStmt(     initializer=decl_a,     condition=var_a &lt; astx.LiteralInt32(10),     update=astx.UnaryOp(\"++\", var_a),     body=body_for )  for_counter Out[4]: <pre></pre>"},{"location":"tutorials/for-loop/#exploring-for-loops-in-astx-a-detailed-guide","title":"Exploring For Loops in ASTx: A Detailed Guide\u00b6","text":""},{"location":"tutorials/for-loop/#introduction","title":"Introduction\u00b6","text":"<p>Loops are a fundamental aspect of programming, offering a way to repeat a set of instructions under specific conditions. In this blog post, we'll delve into how ASTx, a versatile tool for manipulating abstract syntax trees (ASTs), handles two types of loops: the <code>For Range Loop</code> and the <code>For Count Loop</code>. Understanding these constructs in ASTx is crucial for anyone looking to automate or analyze code patterns efficiently.</p>"},{"location":"tutorials/for-loop/#setting-up","title":"Setting Up\u00b6","text":"<p>Before we dive into the specifics of loop creation in ASTx, let's start by setting up our environment. This step is as simple as importing the ASTx library:</p>"},{"location":"tutorials/for-loop/#for-range-loop","title":"For Range Loop\u00b6","text":"<p>The <code>For Range Loop</code> in ASTx allows you to specify the starting point, end condition, and iteration step. This loop is especially useful for scenarios where you need to iterate over a range of values.</p>"},{"location":"tutorials/for-loop/#for-count-loop","title":"For Count Loop\u00b6","text":"<p>The <code>For Count Loop</code>, reminiscent of the classic <code>for</code> loop in C or C++, is another powerful looping construct available in ASTx. This loop is characterized by its three components: an initializer, a condition, and an update expression.</p>"},{"location":"tutorials/functions/","title":"Functions in ASTx: A Comprehensive Guide","text":"In\u00a0[1]: Copied! <pre>import astx\n\nmodule = astx.Module()\n</pre> import astx  module = astx.Module() In\u00a0[2]: Copied! <pre># skip warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n</pre> # skip warnings import warnings warnings.filterwarnings(\"ignore\") In\u00a0[3]: Copied! <pre># Define function arguments\narg_a = astx.Argument(name=\"a\", type_=astx.Int32())\narg_b = astx.Argument(name=\"b\", type_=astx.Int32())\narg_c = astx.Argument(name=\"c\", type_=astx.Int32())\n\n# Create ASTx Variable objects\na = astx.Variable(name=\"a\")\nb = astx.Variable(name=\"b\")\nc = astx.Variable(name=\"c\")\n\n# Create a literal integer\nlit_1 = astx.LiteralInt32(1)\n\n# Define the basic operation\nbasic_op = lit_1 + b - a * c / a + (b - a / a)\n\n# Create the function prototype\nfn_math_proto = astx.FunctionPrototype(\n    name=\"simple_math\", \n    args=astx.Arguments(arg_a, arg_b, arg_c), \n    return_type=astx.Int32()\n)\n\n# Create the function body\nfn_math_block = astx.Block()\nfn_math_block.append(astx.FunctionReturn(basic_op))\n\n# Define the function\nfn_math = astx.Function(prototype=fn_math_proto, body=fn_math_block)\nfn_math\n</pre> # Define function arguments arg_a = astx.Argument(name=\"a\", type_=astx.Int32()) arg_b = astx.Argument(name=\"b\", type_=astx.Int32()) arg_c = astx.Argument(name=\"c\", type_=astx.Int32())  # Create ASTx Variable objects a = astx.Variable(name=\"a\") b = astx.Variable(name=\"b\") c = astx.Variable(name=\"c\")  # Create a literal integer lit_1 = astx.LiteralInt32(1)  # Define the basic operation basic_op = lit_1 + b - a * c / a + (b - a / a)  # Create the function prototype fn_math_proto = astx.FunctionPrototype(     name=\"simple_math\",      args=astx.Arguments(arg_a, arg_b, arg_c),      return_type=astx.Int32() )  # Create the function body fn_math_block = astx.Block() fn_math_block.append(astx.FunctionReturn(basic_op))  # Define the function fn_math = astx.Function(prototype=fn_math_proto, body=fn_math_block) fn_math Out[3]: <pre></pre> <p>In this code snippet, we define three arguments for our function: <code>a</code>, <code>b</code>, and <code>c</code>, all of integer type. We then create a mathematical expression that combines these arguments in various operations. The <code>FunctionPrototype</code> defines the function's signature, including its name, arguments, and return type. Finally, the function body is created and the function is defined with its prototype and body.</p> In\u00a0[4]: Copied! <pre># Define the main function prototype\nfn_main_proto = astx.FunctionPrototype(\n    name=\"main\", \n    args=astx.Arguments(), \n    return_type=astx.Int32()\n)\n\n# Create the main function block\nfn_main_block = astx.Block()\n\n# Create a function call to 'simple_math'\nfn_math_call = fn_math(\n    args=(\n        astx.LiteralInt32(1),\n        astx.LiteralInt32(2),\n        astx.LiteralInt32(3)\n    )\n)\n\n# Append the function call to the main block\nfn_main_block.append(\n    astx.FunctionReturn(\n        fn_math_call,\n    )\n)\n\n# NOTE: it is the same as:\n# fn_math_call = astx.FunctionCall(\n#     \"simple_math\",\n#     args=(\n#         astx.LiteralInt32(1),\n#         astx.LiteralInt32(2),\n#         astx.LiteralInt32(3)\n#     )\n# )\n\n\n# Define the main function\nfn_main = astx.Function(prototype=fn_main_proto, body=fn_main_block)\n\n# Append the main function to the module\nmodule.block.append(fn_main)\nmodule\n</pre> # Define the main function prototype fn_main_proto = astx.FunctionPrototype(     name=\"main\",      args=astx.Arguments(),      return_type=astx.Int32() )  # Create the main function block fn_main_block = astx.Block()  # Create a function call to 'simple_math' fn_math_call = fn_math(     args=(         astx.LiteralInt32(1),         astx.LiteralInt32(2),         astx.LiteralInt32(3)     ) )  # Append the function call to the main block fn_main_block.append(     astx.FunctionReturn(         fn_math_call,     ) )  # NOTE: it is the same as: # fn_math_call = astx.FunctionCall( #     \"simple_math\", #     args=( #         astx.LiteralInt32(1), #         astx.LiteralInt32(2), #         astx.LiteralInt32(3) #     ) # )   # Define the main function fn_main = astx.Function(prototype=fn_main_proto, body=fn_main_block)  # Append the main function to the module module.block.append(fn_main) module Out[4]: <pre></pre> <p>In this section, we define the main function with no arguments and an integer return type. We then create a function call to <code>simple_math</code> with specific values. This call is appended to the main function block, which is then used to define the main function of our module.</p>"},{"location":"tutorials/functions/#functions-in-astx-a-comprehensive-guide","title":"Functions in ASTx: A Comprehensive Guide\u00b6","text":""},{"location":"tutorials/functions/#introduction","title":"Introduction\u00b6","text":"<p>Welcome to another chapter in our exploration of ASTx, a powerful tool for manipulating abstract syntax trees (ASTs) in various programming languages. In this post, we delve into the realm of functions - a crucial element in programming that encapsulates blocks of code for specific tasks. Understanding how to define and use functions in ASTx is essential for anyone looking to leverage its full potential.</p>"},{"location":"tutorials/functions/#setting-the-stage","title":"Setting the Stage\u00b6","text":"<p>To kick things off, we begin by importing ASTx and initializing a module. This foundational step is crucial for structuring our work with functions in ASTx.</p>"},{"location":"tutorials/functions/#creating-a-function-for-simple-calculations","title":"Creating a Function for Simple Calculations\u00b6","text":"<p>In this section, we demonstrate how to create a function for performing a basic mathematical operation using ASTx. This example will illustrate how to define function arguments, perform operations, and structure a function in ASTx.</p>"},{"location":"tutorials/functions/#integrating-the-function-in-a-main-block","title":"Integrating the Function in a Main Block\u00b6","text":"<p>Now, let's see how to integrate this function into the main block of our module.</p>"},{"location":"tutorials/functions/#conclusion","title":"Conclusion\u00b6","text":"<p>Functions are a vital aspect of programming, and mastering their usage in ASTx is key to unlocking the full potential of this tool. Through the creation of a simple mathematical function and its integration into a main block, this guide provides a practical and clear understanding of how functions can be constructed and utilized in ASTx.</p> <p>Whether you're a beginner or an experienced developer, grasping the concepts of functions in ASTx is an invaluable addition to your programming skills. Stay tuned for more insights and tutorials as we continue to explore the fascinating world of ASTx.</p>"},{"location":"tutorials/get-started/","title":"Get Started","text":"In\u00a0[1]: Copied! <pre># import display for AST visualization\nfrom IPython.display import display\nfrom astx.viz import traverse_ast_ascii, graph_to_ascii\nimport astx\n</pre> # import display for AST visualization from IPython.display import display from astx.viz import traverse_ast_ascii, graph_to_ascii import astx In\u00a0[2]: Copied! <pre># skip warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n</pre> # skip warnings import warnings warnings.filterwarnings(\"ignore\") <p>Then we create an instance of the Module class, and this instance will be the first node of the tree, or the root node. After that, we declare the variables and literal that will be part of the basic operation that we will parse into an AST.</p> In\u00a0[3]: Copied! <pre># Create module\nmodule = astx.Module()\n\n# Declare variables\ndecl_a = astx.VariableDeclaration(name=\"a\", type_=astx.Int32(), value=astx.LiteralInt32(1))\ndecl_b = astx.VariableDeclaration(name=\"b\", type_=astx.Int32(), value=astx.LiteralInt32(2))\ndecl_c = astx.VariableDeclaration(name=\"c\", type_=astx.Int32(), value=astx.LiteralInt32(4))\n\na = astx.Variable(name=\"a\")\nb = astx.Variable(name=\"b\")\nc = astx.Variable(name=\"c\")\n\n# Declare literal\nlit_1 = astx.LiteralInt32(1)\n\n# State the expression\nbasic_op = lit_1 + b - a * c / a + (b - a / a)\n</pre> # Create module module = astx.Module()  # Declare variables decl_a = astx.VariableDeclaration(name=\"a\", type_=astx.Int32(), value=astx.LiteralInt32(1)) decl_b = astx.VariableDeclaration(name=\"b\", type_=astx.Int32(), value=astx.LiteralInt32(2)) decl_c = astx.VariableDeclaration(name=\"c\", type_=astx.Int32(), value=astx.LiteralInt32(4))  a = astx.Variable(name=\"a\") b = astx.Variable(name=\"b\") c = astx.Variable(name=\"c\")  # Declare literal lit_1 = astx.LiteralInt32(1)  # State the expression basic_op = lit_1 + b - a * c / a + (b - a / a) <p>After the basic expression is stated, we create an instance of the Function class. As mentioned in the API documentation, each instance of the Function class must have a prototype and a body, so we'll create those first.</p> <p>The body is made of a block that is created and the variables, as well as the basic operation, are appended to it afterwards.</p> In\u00a0[4]: Copied! <pre># Create FunctionPrototype\nmain_proto = astx.FunctionPrototype(\n    name=\"main\", args=astx.Arguments(), return_type=astx.Int32()\n)\n\n# Create FunctionReturn\nmain_block = astx.Block()\nmain_block.append(decl_a)\nmain_block.append(decl_b)\nmain_block.append(decl_c)\nmain_block.append(astx.FunctionReturn(basic_op))\n\n# Create Function\nmain_fn = astx.Function(prototype=main_proto, body=main_block)\n\n# Append function to module\nmodule.block.append(main_fn)\n</pre> # Create FunctionPrototype main_proto = astx.FunctionPrototype(     name=\"main\", args=astx.Arguments(), return_type=astx.Int32() )  # Create FunctionReturn main_block = astx.Block() main_block.append(decl_a) main_block.append(decl_b) main_block.append(decl_c) main_block.append(astx.FunctionReturn(basic_op))  # Create Function main_fn = astx.Function(prototype=main_proto, body=main_block)  # Append function to module module.block.append(main_fn) <p>After this, the module is complete. We can get its AST structure as a dictionary, as well as a PNG representation.</p> In\u00a0[5]: Copied! <pre># Create dictionary representation\nmodule.get_struct()\n</pre> # Create dictionary representation module.get_struct() Out[5]: <pre>{'MODULE[main]': {'content': [{'FUNCTION[main]': {'content': {'args': {'Arguments(0)': {'content': [],\n        'metadata': {'loc': {line: -1, col: -1},\n         'comment': '',\n         'ref': '',\n         'kind': &lt;ASTKind.GenericKind: -100&gt;}}},\n      'body': {'BLOCK': {'content': [{'VariableDeclaration[a, Int32]': {'content': {'Literal[Int32: temp_6]: 1': {'content': 1,\n             'metadata': {'loc': {line: -1, col: -1},\n              'comment': '',\n              'ref': '703c5373461f42bb817b0fd95188a2e3',\n              'kind': &lt;ASTKind.GenericKind: -100&gt;}}},\n           'metadata': {'loc': {line: -1, col: -1},\n            'comment': '',\n            'ref': '',\n            'kind': &lt;ASTKind.VarDeclKind: -203&gt;}}},\n         {'VariableDeclaration[b, Int32]': {'content': {'Literal[Int32: temp_9]: 2': {'content': 2,\n             'metadata': {'loc': {line: -1, col: -1},\n              'comment': '',\n              'ref': '0940a880e393494a8873e5275221e3af',\n              'kind': &lt;ASTKind.GenericKind: -100&gt;}}},\n           'metadata': {'loc': {line: -1, col: -1},\n            'comment': '',\n            'ref': '',\n            'kind': &lt;ASTKind.VarDeclKind: -203&gt;}}},\n         {'VariableDeclaration[c, Int32]': {'content': {'Literal[Int32: temp_12]: 4': {'content': 4,\n             'metadata': {'loc': {line: -1, col: -1},\n              'comment': '',\n              'ref': '45812136ec464b40a051c2cf184bfd69',\n              'kind': &lt;ASTKind.GenericKind: -100&gt;}}},\n           'metadata': {'loc': {line: -1, col: -1},\n            'comment': '',\n            'ref': '',\n            'kind': &lt;ASTKind.VarDeclKind: -203&gt;}}},\n         {'RETURN': {'content': {'BINARY[+]': {'content': {'lhs': {'BINARY[-]': {'content': {'lhs': {'BINARY[+]': {'content': {'lhs': {'Literal[Int32: temp_17]: 1': {'content': 1,\n                      'metadata': {'loc': {line: -1, col: -1},\n                       'comment': '',\n                       'ref': 'a22345b92e494c7084274e89a8460a0f',\n                       'kind': &lt;ASTKind.GenericKind: -100&gt;}}},\n                    'rhs': {'Variable[b]': {'content': 'b',\n                      'metadata': {'loc': {line: -1, col: -1},\n                       'comment': '',\n                       'ref': '',\n                       'kind': &lt;ASTKind.GenericKind: -100&gt;}}}},\n                   'metadata': {'loc': {line: -1, col: -1},\n                    'comment': '',\n                    'ref': '',\n                    'kind': &lt;ASTKind.BinaryOpKind: -301&gt;}}},\n                 'rhs': {'BINARY[/]': {'content': {'lhs': {'BINARY[*]': {'content': {'lhs': {'Variable[a]': {'content': 'a',\n                         'metadata': {'loc': {line: -1, col: -1},\n                          'comment': '',\n                          'ref': '',\n                          'kind': &lt;ASTKind.GenericKind: -100&gt;}}},\n                       'rhs': {'Variable[c]': {'content': 'c',\n                         'metadata': {'loc': {line: -1, col: -1},\n                          'comment': '',\n                          'ref': '',\n                          'kind': &lt;ASTKind.GenericKind: -100&gt;}}}},\n                      'metadata': {'loc': {line: -1, col: -1},\n                       'comment': '',\n                       'ref': '',\n                       'kind': &lt;ASTKind.BinaryOpKind: -301&gt;}}},\n                    'rhs': {'Variable[a]': {'content': 'a',\n                      'metadata': {'loc': {line: -1, col: -1},\n                       'comment': '',\n                       'ref': '',\n                       'kind': &lt;ASTKind.GenericKind: -100&gt;}}}},\n                   'metadata': {'loc': {line: -1, col: -1},\n                    'comment': '',\n                    'ref': '',\n                    'kind': &lt;ASTKind.BinaryOpKind: -301&gt;}}}},\n                'metadata': {'loc': {line: -1, col: -1},\n                 'comment': '',\n                 'ref': '',\n                 'kind': &lt;ASTKind.BinaryOpKind: -301&gt;}}},\n              'rhs': {'BINARY[-]': {'content': {'lhs': {'Variable[b]': {'content': 'b',\n                   'metadata': {'loc': {line: -1, col: -1},\n                    'comment': '',\n                    'ref': '',\n                    'kind': &lt;ASTKind.GenericKind: -100&gt;}}},\n                 'rhs': {'BINARY[/]': {'content': {'lhs': {'Variable[a]': {'content': 'a',\n                      'metadata': {'loc': {line: -1, col: -1},\n                       'comment': '',\n                       'ref': '',\n                       'kind': &lt;ASTKind.GenericKind: -100&gt;}}},\n                    'rhs': {'Variable[a]': {'content': 'a',\n                      'metadata': {'loc': {line: -1, col: -1},\n                       'comment': '',\n                       'ref': '',\n                       'kind': &lt;ASTKind.GenericKind: -100&gt;}}}},\n                   'metadata': {'loc': {line: -1, col: -1},\n                    'comment': '',\n                    'ref': '',\n                    'kind': &lt;ASTKind.BinaryOpKind: -301&gt;}}}},\n                'metadata': {'loc': {line: -1, col: -1},\n                 'comment': '',\n                 'ref': '',\n                 'kind': &lt;ASTKind.BinaryOpKind: -301&gt;}}}},\n             'metadata': {'loc': {line: -1, col: -1},\n              'comment': '',\n              'ref': '',\n              'kind': &lt;ASTKind.BinaryOpKind: -301&gt;}}},\n           'metadata': {'loc': {line: -1, col: -1},\n            'comment': '',\n            'ref': '',\n            'kind': &lt;ASTKind.ReturnKind: -403&gt;}}}],\n        'metadata': {'loc': {line: -1, col: -1},\n         'comment': '',\n         'ref': '',\n         'kind': &lt;ASTKind.GenericKind: -100&gt;}}}},\n     'metadata': {'loc': {line: -1, col: -1},\n      'comment': '',\n      'ref': '',\n      'kind': &lt;ASTKind.FunctionKind: -401&gt;}}}],\n  'metadata': {'loc': {line: -1, col: -1},\n   'comment': '',\n   'ref': '',\n   'kind': &lt;ASTKind.ModuleKind: -101&gt;}}}</pre> In\u00a0[6]: Copied! <pre># Create ascii representation\ndot_graph = traverse_ast_ascii(module.get_struct(simplified=True))\ngraph = graph_to_ascii(dot_graph) \nprint(repr(module))\n</pre> # Create ascii representation dot_graph = traverse_ast_ascii(module.get_struct(simplified=True)) graph = graph_to_ascii(dot_graph)  print(repr(module)) <pre>\n</pre> In\u00a0[7]: Copied! <pre># Create PNG representation\nmodule\n</pre> # Create PNG representation module Out[7]: <pre></pre> <p>We can also get the PNG representation of parts of the AST, such as <code>basic_op</code> and the variable <code>a</code>:</p> In\u00a0[8]: Copied! <pre># Create PNG representation\nbasic_op\n</pre> # Create PNG representation basic_op Out[8]: <pre></pre> In\u00a0[9]: Copied! <pre># Create PNG representation\na\n</pre> # Create PNG representation a Out[9]: <pre></pre> In\u00a0[10]: Copied! <pre># Import visualization module\nfrom astx import viz\n\n# Create PNG representation with diamond shape\nviz.visualize(a.get_struct(), shape=\"diamond\")\n</pre> # Import visualization module from astx import viz  # Create PNG representation with diamond shape viz.visualize(a.get_struct(), shape=\"diamond\") In\u00a0[11]: Copied! <pre># Create PNG representation with circle shape\nviz.visualize(a.get_struct(), shape=\"circle\")\n</pre> # Create PNG representation with circle shape viz.visualize(a.get_struct(), shape=\"circle\") In\u00a0[12]: Copied! <pre># Create PNG representation with ellipse shape\nviz.visualize(a.get_struct(), shape=\"ellipse\")\n</pre> # Create PNG representation with ellipse shape viz.visualize(a.get_struct(), shape=\"ellipse\")"},{"location":"tutorials/get-started/#get-started","title":"Get Started\u00b6","text":""},{"location":"tutorials/get-started/#introduction","title":"Introduction\u00b6","text":"<p>The ASTx library is an agnostic framework for constructing and representing Abstract Syntax Trees (ASTs). Its primary objective is to provide a versatile and language-independent structure for ASTs, with the flexibility to be utilized across various programming languages and parsing tools. ASTx doesn't aim to be a lexer or a parser, although it could be used by any programming language or parser in order to provide a high level representation of the AST.</p> <p>Many kinds of nodes (classes) are currently supported. Below is a list with just some examples:</p>"},{"location":"tutorials/get-started/#statements","title":"Statements:\u00b6","text":"<ul> <li>Function</li> <li>Function Prototype</li> <li>FunctionReturn</li> <li>ForRangeLoop</li> <li>VarDecl</li> </ul>"},{"location":"tutorials/get-started/#operators","title":"Operators:\u00b6","text":"<ul> <li>BinaryOp</li> <li>UnaryOp</li> </ul>"},{"location":"tutorials/get-started/#data-types","title":"Data types:\u00b6","text":"<ul> <li>Boolean</li> <li>Literal</li> <li>Variable</li> </ul> <p>The ASTx project is still under development, so new classes may be added to the ones above at any time.</p> <p>Below are installation instructions and an example, so you can have an overview of how you can leverage the ASTx library for your needs.</p>"},{"location":"tutorials/get-started/#installation","title":"Installation\u00b6","text":"<p>The first step is to install ASTx. You can do it simply by running the command below in your terminal: <code>$ pip install astx</code> If you need more information on installation, you can get it in the ASTx installation page. After that, you can just open a Jupyter Notebook instance and start writing your first AST.</p>"},{"location":"tutorials/get-started/#example-an-ast-of-a-series-of-mathematical-operations","title":"Example: an AST of a series of mathematical operations\u00b6","text":"<p>Here we will present a quick example of an AST of the expression  <code>basic_op = lit_1 + b - a * c / a + (b - a / a)</code>, in which  $~~~~$ <code>lit_1</code> is a defined integer, and  $~~~~$ <code>a</code>, <code>b</code>, and <code>c</code> are variables. The first thing to do is, in your Jupyter Notebook instance, import <code>display</code>, which will allow you to have a basic visualization of the AST, and the astx library itself.</p>"},{"location":"tutorials/get-started/#custom-shapes","title":"Custom shapes\u00b6","text":"<p>It is also possible to use custom shapes for the output using the function <code>viz.visualize</code>. The Default shape is <code>box</code>, but  <code>diamond</code>, <code>ellipse</code>, and <code>circle</code> are also avaiable options.</p>"},{"location":"tutorials/get-started/#conclusion","title":"Conclusion\u00b6","text":"<p>This guide provides clear instructions and a simple example for you to start using the ASTx library. But this is just the beginning of your journey. Make sure to check out the other tutorials available, such as the one for variables and the one for functions.</p>"},{"location":"tutorials/literals/","title":"Literals in ASTx","text":"<p>Literals are fixed values embedded directly in source code, representing specific values. They are the raw data given in variables or constants and are not variables themselves but the data assigned to them. Common types of literals found in many programming languages include:</p> <ol> <li>Integer Literals: Represent whole numbers without any fractional component, e.g., <code>42</code>, <code>-1</code>, <code>0</code>.</li> <li>Floating-Point Literals: Represent real numbers with fractional parts, e.g., <code>3.14</code>, <code>-0.01</code>.</li> <li>String Literals: Enclose sequences of characters, typically in quotes, e.g., <code>\"hello\"</code>, <code>'world'</code>.</li> <li>Boolean Literals: Represent truth values, usually denoted by <code>true</code> and <code>false</code>.</li> <li>Null/None Literals: Represent the absence of a value or a null reference, e.g., <code>null</code> in Java, <code>None</code> in Python.</li> <li>Character Literals: Represent single characters, e.g., <code>'a'</code>, <code>'Z'</code>.</li> <li>Array or List Literals: Define arrays or lists directly, e.g., <code>[1, 2, 3]</code> in Python.</li> <li>Object Literals: Used in languages like JavaScript to define objects directly, e.g., <code>{name: \"Alice\", age: 25}</code>.</li> </ol> <p>Currently, ASTx just support integer literals (8, 16, 32, and 64 bits) and boolean literals, but the support for new ones should be done soon.</p> In\u00a0[1]: Copied! <pre>import astx\n</pre> import astx In\u00a0[2]: Copied! <pre># skip warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n</pre> # skip warnings import warnings warnings.filterwarnings(\"ignore\") In\u00a0[3]: Copied! <pre>astx.LiteralInt8(value=1)\n</pre> astx.LiteralInt8(value=1) Out[3]: <pre></pre> In\u00a0[4]: Copied! <pre>astx.LiteralInt16(value=1)\n</pre> astx.LiteralInt16(value=1) Out[4]: <pre></pre> In\u00a0[5]: Copied! <pre>astx.LiteralInt32(value=1)\n</pre> astx.LiteralInt32(value=1) Out[5]: <pre></pre> In\u00a0[6]: Copied! <pre>astx.LiteralInt64(value=1)\n</pre> astx.LiteralInt64(value=1) Out[6]: <pre></pre> In\u00a0[7]: Copied! <pre>astx.LiteralBoolean(value=True)\n</pre> astx.LiteralBoolean(value=True) Out[7]: <pre></pre> <p>Now, let's check how a math operation over literals would look like:</p> In\u00a0[8]: Copied! <pre>lit_1_a = astx.LiteralInt32(value=1)\nlit_1_b = astx.LiteralInt32(value=1)\nlit_2 = astx.LiteralInt32(value=2)\n\n(lit_1_a + lit_1_b + lit_2)\n</pre> lit_1_a = astx.LiteralInt32(value=1) lit_1_b = astx.LiteralInt32(value=1) lit_2 = astx.LiteralInt32(value=2)  (lit_1_a + lit_1_b + lit_2) Out[8]: <pre></pre>"},{"location":"tutorials/literals/#literals-in-astx","title":"Literals in ASTx\u00b6","text":""},{"location":"tutorials/literals/#introduction","title":"Introduction\u00b6","text":""},{"location":"tutorials/literals/#example","title":"Example\u00b6","text":"<p>Let's check a very some examples of the usage of literals with ASTx:</p>"},{"location":"tutorials/literals/#conclusion","title":"Conclusion\u00b6","text":"<p>Literals are features really fundamental in any programming language. Currently, ASTx supports supports Integers (8, 16, 32, and 64 bits) and Boolean, and much more should be implemented soon!</p>"},{"location":"tutorials/variables/","title":"Understanding Variables in ASTx: A Comprehensive Guide","text":"<p>First, ensure you have astx installed:</p> <pre>$ pip install astx\n</pre> <p>Now, you can import the libraries and modules necessary for this tutorial:</p> In\u00a0[1]: Copied! <pre>from __future__ import annotations\n\nimport copy\n\nfrom typing import Any\n\nfrom IPython.display import display\n\nimport astx\n</pre> from __future__ import annotations  import copy  from typing import Any  from IPython.display import display  import astx In\u00a0[2]: Copied! <pre># skip warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n</pre> # skip warnings import warnings warnings.filterwarnings(\"ignore\") <p>This code block sets the stage for our exploration into ASTx's variable handling. We're importing essential modules like <code>copy</code> for deep copying objects, <code>typing</code> for type annotations, and <code>IPython.display</code> for displaying outputs in an interactive Python environment. Most importantly, we import <code>astx</code>, the library central to our discussion.</p> In\u00a0[3]: Copied! <pre># Initialize the ASTx module\nmodule = astx.Module()\n\n# Declare variables 'a', 'b', and 'c' with initial values\ndecl_a = astx.VariableDeclaration(name=\"a\", type_=astx.Int32(), value=astx.LiteralInt32(1))\ndecl_b = astx.VariableDeclaration(name=\"b\", type_=astx.Int32(), value=astx.LiteralInt32(2))\ndecl_c = astx.VariableDeclaration(name=\"c\", type_=astx.Int32(), value=astx.LiteralInt32(4))\n\n# Reassign a new value to variable 'c'\nassign_c = astx.VariableAssignment(name=\"c\", value=astx.LiteralInt32(3))\n\n# Create ASTx Variable objects\na = astx.Variable(name=\"a\")\nb = astx.Variable(name=\"b\")\nc = astx.Variable(name=\"c\")\n\n# Create a literal integer\nlit_1 = astx.LiteralInt32(1)\n\n# Perform basic operations\nbasic_op = lit_1 + b - a * c / a\n\n# Define the main function prototype\nmain_proto = astx.FunctionPrototype(\n    name=\"main\", args=astx.Arguments(), return_type=astx.Int32()\n)\n\n# Create a block of code and append variable declarations and operations\nmain_block = astx.Block()\nmain_block.append(decl_a)\nmain_block.append(decl_b)\nmain_block.append(decl_c)\nmain_block.append(assign_c)\nmain_block.append(astx.FunctionReturn(basic_op))\n\n# Define the main function with its body\nmain_fn = astx.Function(prototype=main_proto, body=main_block)\n\n# Append the main function to the module block\nmodule.block.append(main_fn)\nmodule\n</pre> # Initialize the ASTx module module = astx.Module()  # Declare variables 'a', 'b', and 'c' with initial values decl_a = astx.VariableDeclaration(name=\"a\", type_=astx.Int32(), value=astx.LiteralInt32(1)) decl_b = astx.VariableDeclaration(name=\"b\", type_=astx.Int32(), value=astx.LiteralInt32(2)) decl_c = astx.VariableDeclaration(name=\"c\", type_=astx.Int32(), value=astx.LiteralInt32(4))  # Reassign a new value to variable 'c' assign_c = astx.VariableAssignment(name=\"c\", value=astx.LiteralInt32(3))  # Create ASTx Variable objects a = astx.Variable(name=\"a\") b = astx.Variable(name=\"b\") c = astx.Variable(name=\"c\")  # Create a literal integer lit_1 = astx.LiteralInt32(1)  # Perform basic operations basic_op = lit_1 + b - a * c / a  # Define the main function prototype main_proto = astx.FunctionPrototype(     name=\"main\", args=astx.Arguments(), return_type=astx.Int32() )  # Create a block of code and append variable declarations and operations main_block = astx.Block() main_block.append(decl_a) main_block.append(decl_b) main_block.append(decl_c) main_block.append(assign_c) main_block.append(astx.FunctionReturn(basic_op))  # Define the main function with its body main_fn = astx.Function(prototype=main_proto, body=main_block)  # Append the main function to the module block module.block.append(main_fn) module Out[3]: <pre></pre> <p>In this code snippet, we start by initializing an ASTx module. We then declare three variables (<code>a</code>, <code>b</code>, and <code>c</code>) with initial integer values using <code>VarDecl</code>. Interestingly, we demonstrate how to reassign a new value to an existing variable (<code>c</code> in this case). The <code>Variable</code> class in ASTx is used to create variable objects that can be manipulated further.</p> <p>Next, we create a simple mathematical operation involving these variables, showcasing how ASTx can elegantly handle arithmetic expressions. The code concludes with the creation of a main function prototype, a block of code containing our declarations and operations, and the definition of the main function itself.</p>"},{"location":"tutorials/variables/#understanding-variables-in-astx-a-comprehensive-guide","title":"Understanding Variables in ASTx: A Comprehensive Guide\u00b6","text":""},{"location":"tutorials/variables/#introduction","title":"Introduction\u00b6","text":"<p>In the world of programming, the concept of variables is fundamental, acting as the cornerstone for writing effective and efficient code. However, the way variables are declared and used can vary significantly across different programming languages. This variability poses a challenge for tools that need to operate across these languages, such as ASTx. ASTx, an advanced tool for manipulating abstract syntax trees (ASTs), addresses this challenge by offering a generic approach to handling variables. This blog post delves into the nuances of working with variables in ASTx, providing insights into both declaration and usage, with a focus on simplicity and generality.</p>"},{"location":"tutorials/variables/#setting-up-the-environment","title":"Setting Up the Environment\u00b6","text":"<p>To get started with variables in ASTx, you need to set up your Python environment appropriately. This setup involves importing necessary modules and ensuring that your environment is primed for the tasks ahead. Here's how you can set it up:</p>"},{"location":"tutorials/variables/#creating-variables-and-performing-simple-math","title":"Creating Variables and Performing Simple Math\u00b6","text":"<p>Now, let's dive into the practical aspects of variable declaration and usage in ASTx, particularly how these variables can be used in basic mathematical operations.</p>"},{"location":"tutorials/variables/#conclusion","title":"Conclusion\u00b6","text":"<p>This exploration into the world of variables within ASTx reveals the power and flexibility of this tool. By abstracting the intricacies of variable handling across different programming languages, ASTx provides a unified and streamlined approach. Whether you are a seasoned developer or just starting, understanding how to effectively declare and manipulate variables in ASTx is a valuable skill in your programming toolkit.</p>"}]}